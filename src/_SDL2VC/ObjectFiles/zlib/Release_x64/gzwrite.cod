; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30142.1 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0CH@DEEGAHIB@internal?5error?3?5deflate?5stream?5@ ; `string'
PUBLIC	??_C@_0CF@MLPJFDMM@requested?5length?5does?5not?5fit?5i@ ; `string'
PUBLIC	??_C@_0CC@ENDIFONJ@string?5length?5does?5not?5fit?5in?5i@ ; `string'
EXTRN	__imp__write:PROC
;	COMDAT ??_C@_0CC@ENDIFONJ@string?5length?5does?5not?5fit?5in?5i@
CONST	SEGMENT
??_C@_0CC@ENDIFONJ@string?5length?5does?5not?5fit?5in?5i@ DB 'string leng'
	DB	'th does not fit in int', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@MLPJFDMM@requested?5length?5does?5not?5fit?5i@
CONST	SEGMENT
??_C@_0CF@MLPJFDMM@requested?5length?5does?5not?5fit?5i@ DB 'requested le'
	DB	'ngth does not fit in int', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@DEEGAHIB@internal?5error?3?5deflate?5stream?5@
CONST	SEGMENT
??_C@_0CH@DEEGAHIB@internal?5error?3?5deflate?5stream?5@ DB 'internal err'
	DB	'or: deflate stream corrupt', 00H		; `string'
PUBLIC	gzsetparams
PUBLIC	gzflush
PUBLIC	gzprintf
PUBLIC	gzvprintf
PUBLIC	gzputs
PUBLIC	gzputc
PUBLIC	gzfwrite
PUBLIC	gzwrite
PUBLIC	gzclose_w
;	COMDAT pdata
pdata	SEGMENT
$pdata$gzsetparams DD imagerel $LN16
	DD	imagerel $LN16+177
	DD	imagerel $unwind$gzsetparams
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gzflush DD imagerel $LN14
	DD	imagerel $LN14+107
	DD	imagerel $unwind$gzflush
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gzprintf DD imagerel $LN4
	DD	imagerel $LN4+34
	DD	imagerel $unwind$gzprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gzvprintf DD imagerel $LN23
	DD	imagerel $LN23+129
	DD	imagerel $unwind$gzvprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$gzvprintf DD imagerel $LN23+129
	DD	imagerel $LN23+334
	DD	imagerel $chain$1$gzvprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$gzvprintf DD imagerel $LN23+334
	DD	imagerel $LN23+377
	DD	imagerel $chain$3$gzvprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$gzvprintf DD imagerel $LN23+377
	DD	imagerel $LN23+399
	DD	imagerel $chain$4$gzvprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gzputs DD imagerel $LN11
	DD	imagerel $LN11+33
	DD	imagerel $unwind$gzputs
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$gzputs DD imagerel $LN11+33
	DD	imagerel $LN11+95
	DD	imagerel $chain$0$gzputs
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$gzputs DD imagerel $LN11+95
	DD	imagerel $LN11+125
	DD	imagerel $chain$2$gzputs
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$gzputs DD imagerel $LN11+125
	DD	imagerel $LN11+138
	DD	imagerel $chain$3$gzputs
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gzputc DD imagerel $LN14
	DD	imagerel $LN14+211
	DD	imagerel $unwind$gzputc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gzfwrite DD imagerel $LN10
	DD	imagerel $LN10+114
	DD	imagerel $unwind$gzfwrite
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gzwrite DD imagerel $LN8
	DD	imagerel $LN8+65
	DD	imagerel $unwind$gzwrite
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gz_write DD imagerel gz_write
	DD	imagerel gz_write+333
	DD	imagerel $unwind$gz_write
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gz_zero DD imagerel gz_zero
	DD	imagerel gz_zero+164
	DD	imagerel $unwind$gz_zero
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gz_comp DD imagerel gz_comp
	DD	imagerel gz_comp+438
	DD	imagerel $unwind$gz_comp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gz_init DD imagerel gz_init
	DD	imagerel gz_init+78
	DD	imagerel $unwind$gz_init
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$gz_init DD imagerel gz_init+78
	DD	imagerel gz_init+242
	DD	imagerel $chain$0$gz_init
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$gz_init DD imagerel gz_init+242
	DD	imagerel gz_init+291
	DD	imagerel $chain$2$gz_init
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gzclose_w DD imagerel $LN13
	DD	imagerel $LN13+207
	DD	imagerel $unwind$gzclose_w
;	COMDAT xdata
xdata	SEGMENT
$unwind$gzclose_w DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$gz_init DD 020021H
	DD	0a6400H
	DD	imagerel gz_init
	DD	imagerel gz_init+78
	DD	imagerel $unwind$gz_init
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$gz_init DD 020521H
	DD	0a6405H
	DD	imagerel gz_init
	DD	imagerel gz_init+78
	DD	imagerel $unwind$gz_init
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gz_init DD 040a01H
	DD	0b340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gz_comp DD 0a4201H
	DD	0ae442H
	DD	09643dH
	DD	085438H
	DD	0f0053209H
	DD	030027003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gz_zero DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gz_write DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gzwrite DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gzfwrite DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gzputc DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$gzputs DD 021H
	DD	imagerel $LN11
	DD	imagerel $LN11+33
	DD	imagerel $unwind$gzputs
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$gzputs DD 020021H
	DD	063400H
	DD	imagerel $LN11
	DD	imagerel $LN11+33
	DD	imagerel $unwind$gzputs
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$gzputs DD 020521H
	DD	063405H
	DD	imagerel $LN11
	DD	imagerel $LN11+33
	DD	imagerel $unwind$gzputs
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gzputs DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$gzvprintf DD 021H
	DD	imagerel $LN23
	DD	imagerel $LN23+129
	DD	imagerel $unwind$gzvprintf
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$gzvprintf DD 040021H
	DD	095400H
	DD	083400H
	DD	imagerel $LN23
	DD	imagerel $LN23+129
	DD	imagerel $unwind$gzvprintf
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$gzvprintf DD 040a21H
	DD	09540aH
	DD	083405H
	DD	imagerel $LN23
	DD	imagerel $LN23+129
	DD	imagerel $unwind$gzvprintf
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gzvprintf DD 061001H
	DD	0b7410H
	DD	0a6410H
	DD	0e00c5210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gzprintf DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gzflush DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gzsetparams DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\gzwrite.c
;	COMDAT gzclose_w
_TEXT	SEGMENT
file$ = 48
gzclose_w PROC						; COMDAT

; 633  : {

$LN13:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 634  :     int ret = Z_OK;

  0000a	33 ff		 xor	 edi, edi
  0000c	48 8b d9	 mov	 rbx, rcx

; 635  :     gz_statep state;
; 636  : 
; 637  :     /* get internal structure */
; 638  :     if (file == NULL)

  0000f	48 85 c9	 test	 rcx, rcx
  00012	0f 84 a7 00 00
	00		 je	 $LN11@gzclose_w

; 639  :         return Z_STREAM_ERROR;
; 640  :     state = (gz_statep)file;
; 641  : 
; 642  :     /* check that we're writing */
; 643  :     if (state->mode != GZ_WRITE)

  00018	81 79 18 b1 79
	00 00		 cmp	 DWORD PTR [rcx+24], 31153 ; 000079b1H
  0001f	0f 85 9a 00 00
	00		 jne	 $LN11@gzclose_w

; 644  :         return Z_STREAM_ERROR;
; 645  : 
; 646  :     /* check for seek request */
; 647  :     if (state->seek) {

  00025	39 79 70	 cmp	 DWORD PTR [rcx+112], edi
  00028	74 14		 je	 SHORT $LN5@gzclose_w

; 648  :         state->seek = 0;
; 649  :         if (gz_zero(state, state->skip) == -1)

  0002a	48 8b 51 68	 mov	 rdx, QWORD PTR [rcx+104]
  0002e	89 79 70	 mov	 DWORD PTR [rcx+112], edi
  00031	e8 00 00 00 00	 call	 gz_zero
  00036	83 f8 ff	 cmp	 eax, -1
  00039	75 03		 jne	 SHORT $LN5@gzclose_w

; 650  :             ret = state->err;

  0003b	8b 7b 74	 mov	 edi, DWORD PTR [rbx+116]
$LN5@gzclose_w:

; 651  :     }
; 652  : 
; 653  :     /* flush, free memory, and close file */
; 654  :     if (gz_comp(state, Z_FINISH) == -1)

  0003e	ba 04 00 00 00	 mov	 edx, 4
  00043	48 8b cb	 mov	 rcx, rbx
  00046	e8 00 00 00 00	 call	 gz_comp
  0004b	83 f8 ff	 cmp	 eax, -1
  0004e	75 03		 jne	 SHORT $LN6@gzclose_w

; 655  :         ret = state->err;

  00050	8b 7b 74	 mov	 edi, DWORD PTR [rbx+116]
$LN6@gzclose_w:

; 656  :     if (state->size) {

  00053	83 7b 28 00	 cmp	 DWORD PTR [rbx+40], 0
  00057	74 26		 je	 SHORT $LN7@gzclose_w

; 657  :         if (!state->direct) {

  00059	83 7b 40 00	 cmp	 DWORD PTR [rbx+64], 0
  0005d	75 16		 jne	 SHORT $LN8@gzclose_w

; 658  :             (void)deflateEnd(&(state->strm));

  0005f	48 8d 8b 80 00
	00 00		 lea	 rcx, QWORD PTR [rbx+128]
  00066	e8 00 00 00 00	 call	 deflateEnd

; 659  :             free(state->out);

  0006b	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  0006f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN8@gzclose_w:

; 660  :         }
; 661  :         free(state->in);

  00075	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  00079	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN7@gzclose_w:

; 662  :     }
; 663  :     gz_error(state, Z_OK, NULL);

  0007f	45 33 c0	 xor	 r8d, r8d
  00082	33 d2		 xor	 edx, edx
  00084	48 8b cb	 mov	 rcx, rbx
  00087	e8 00 00 00 00	 call	 gz_error

; 664  :     free(state->path);

  0008c	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  00090	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 665  :     if (_close(state->fd) == -1)

  00096	8b 4b 1c	 mov	 ecx, DWORD PTR [rbx+28]
  00099	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__close
  0009f	b9 ff ff ff ff	 mov	 ecx, -1
  000a4	3b c1		 cmp	 eax, ecx
  000a6	0f 44 f9	 cmove	 edi, ecx

; 666  :         ret = Z_ERRNO;
; 667  :     free(state);

  000a9	48 8b cb	 mov	 rcx, rbx
  000ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 668  :     return ret;

  000b2	8b c7		 mov	 eax, edi

; 669  : }

  000b4	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000b9	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000bd	5f		 pop	 rdi
  000be	c3		 ret	 0
$LN11@gzclose_w:
  000bf	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000c4	b8 fe ff ff ff	 mov	 eax, -2
  000c9	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000cd	5f		 pop	 rdi
  000ce	c3		 ret	 0
gzclose_w ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\gzwrite.c
;	COMDAT gz_init
_TEXT	SEGMENT
state$ = 80
gz_init	PROC						; COMDAT

; 18   : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 19   :     int ret;
; 20   :     z_streamp strm = &(state->strm);
; 21   : 
; 22   :     /* allocate input buffer (double size for gzprintf) */
; 23   :     state->in = (unsigned char *)malloc(state->want << 1);

  0000a	8b 41 2c	 mov	 eax, DWORD PTR [rcx+44]
  0000d	48 8d b9 80 00
	00 00		 lea	 rdi, QWORD PTR [rcx+128]
  00014	48 8b d9	 mov	 rbx, rcx
  00017	8d 0c 00	 lea	 ecx, DWORD PTR [rax+rax]
  0001a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00020	48 89 43 30	 mov	 QWORD PTR [rbx+48], rax

; 24   :     if (state->in == NULL) {

  00024	48 85 c0	 test	 rax, rax
  00027	75 22		 jne	 SHORT $LN2@gz_init

; 25   :         gz_error(state, Z_MEM_ERROR, "out of memory");

  00029	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@BNNCBLEN@out?5of?5memory@
  00030	48 8b cb	 mov	 rcx, rbx
  00033	8d 50 fc	 lea	 edx, QWORD PTR [rax-4]
  00036	e8 00 00 00 00	 call	 gz_error

; 26   :         return -1;

  0003b	b8 ff ff ff ff	 mov	 eax, -1

; 64   : }

  00040	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  00045	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00049	5f		 pop	 rdi
  0004a	c3		 ret	 0
$LN2@gz_init:

; 27   :     }
; 28   : 
; 29   :     /* only need output buffer and deflate state if compressing */
; 30   :     if (!state->direct) {

  0004b	8b 43 40	 mov	 eax, DWORD PTR [rbx+64]
  0004e	48 89 74 24 50	 mov	 QWORD PTR [rsp+80], rsi
  00053	85 c0		 test	 eax, eax
  00055	0f 85 9d 00 00
	00		 jne	 $LN3@gz_init

; 31   :         /* allocate output buffer */
; 32   :         state->out = (unsigned char *)malloc(state->want);

  0005b	8b 4b 2c	 mov	 ecx, DWORD PTR [rbx+44]
  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00064	48 89 43 38	 mov	 QWORD PTR [rbx+56], rax

; 33   :         if (state->out == NULL) {

  00068	48 85 c0	 test	 rax, rax
  0006b	74 52		 je	 SHORT $LN9@gz_init

; 34   :             free(state->in);
; 35   :             gz_error(state, Z_MEM_ERROR, "out of memory");
; 36   :             return -1;
; 37   :         }
; 38   : 
; 39   :         /* allocate deflate memory, set up for gzip compression */
; 40   :         strm->zalloc = Z_NULL;

  0006d	33 f6		 xor	 esi, esi

; 41   :         strm->zfree = Z_NULL;
; 42   :         strm->opaque = Z_NULL;
; 43   :         ret = deflateInit2(strm, state->level, Z_DEFLATED,

  0006f	c7 44 24 38 58
	00 00 00	 mov	 DWORD PTR [rsp+56], 88	; 00000058H
  00077	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BD@PGJIJI@1?42?412?4f?9BlazesRus@
  0007e	48 89 77 30	 mov	 QWORD PTR [rdi+48], rsi
  00082	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00087	48 8b cf	 mov	 rcx, rdi
  0008a	48 89 77 38	 mov	 QWORD PTR [rdi+56], rsi
  0008e	48 89 77 40	 mov	 QWORD PTR [rdi+64], rsi
  00092	44 8d 4e 1f	 lea	 r9d, QWORD PTR [rsi+31]
  00096	8b 43 5c	 mov	 eax, DWORD PTR [rbx+92]
  00099	44 8d 46 08	 lea	 r8d, QWORD PTR [rsi+8]
  0009d	8b 53 58	 mov	 edx, DWORD PTR [rbx+88]
  000a0	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000a4	c7 44 24 20 08
	00 00 00	 mov	 DWORD PTR [rsp+32], 8
  000ac	e8 00 00 00 00	 call	 deflateInit2_

; 44   :                            MAX_WBITS + 16, DEF_MEM_LEVEL, state->strategy);
; 45   :         if (ret != Z_OK) {

  000b1	85 c0		 test	 eax, eax
  000b3	74 3d		 je	 SHORT $LN5@gz_init

; 46   :             free(state->out);

  000b5	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  000b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN9@gz_init:

; 47   :             free(state->in);

  000bf	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  000c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 48   :             gz_error(state, Z_MEM_ERROR, "out of memory");

  000c9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@BNNCBLEN@out?5of?5memory@
  000d0	ba fc ff ff ff	 mov	 edx, -4
  000d5	48 8b cb	 mov	 rcx, rbx
  000d8	e8 00 00 00 00	 call	 gz_error
  000dd	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]

; 49   :             return -1;

  000e2	b8 ff ff ff ff	 mov	 eax, -1

; 64   : }

  000e7	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  000ec	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000f0	5f		 pop	 rdi
  000f1	c3		 ret	 0
$LN5@gz_init:

; 50   :         }
; 51   :         strm->next_in = NULL;

  000f2	48 89 37	 mov	 QWORD PTR [rdi], rsi
  000f5	8b 43 40	 mov	 eax, DWORD PTR [rbx+64]
$LN3@gz_init:

; 52   :     }
; 53   : 
; 54   :     /* mark state as initialized */
; 55   :     state->size = state->want;

  000f8	8b 4b 2c	 mov	 ecx, DWORD PTR [rbx+44]
  000fb	89 4b 28	 mov	 DWORD PTR [rbx+40], ecx

; 56   : 
; 57   :     /* initialize write buffer if compressing */
; 58   :     if (!state->direct) {

  000fe	85 c0		 test	 eax, eax
  00100	75 0f		 jne	 SHORT $LN6@gz_init

; 59   :         strm->avail_out = state->size;

  00102	89 4f 18	 mov	 DWORD PTR [rdi+24], ecx

; 60   :         strm->next_out = state->out;

  00105	48 8b 43 38	 mov	 rax, QWORD PTR [rbx+56]
  00109	48 89 47 10	 mov	 QWORD PTR [rdi+16], rax

; 61   :         state->x.next = strm->next_out;

  0010d	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax
$LN6@gz_init:

; 62   :     }
; 63   :     return 0;

  00111	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00116	33 c0		 xor	 eax, eax

; 64   : }

  00118	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  0011d	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00121	5f		 pop	 rdi
  00122	c3		 ret	 0
gz_init	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\gzwrite.c
;	COMDAT gz_comp
_TEXT	SEGMENT
state$ = 64
flush$ = 72
gz_comp	PROC						; COMDAT

; 73   : {

  00000	40 53		 push	 rbx
  00002	57		 push	 rdi
  00003	41 57		 push	 r15
  00005	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 74   :     int ret, writ;
; 75   :     unsigned have, put, max = ((unsigned)-1 >> 2) + 1;
; 76   :     z_streamp strm = &(state->strm);
; 77   : 
; 78   :     /* allocate memory if this is the first time through */
; 79   :     if (state->size == 0 && gz_init(state) == -1)

  00009	83 79 28 00	 cmp	 DWORD PTR [rcx+40], 0
  0000d	48 8d 99 80 00
	00 00		 lea	 rbx, QWORD PTR [rcx+128]
  00014	44 8b fa	 mov	 r15d, edx
  00017	48 8b f9	 mov	 rdi, rcx
  0001a	75 13		 jne	 SHORT $LN44@gz_comp
  0001c	e8 00 00 00 00	 call	 gz_init
  00021	83 f8 ff	 cmp	 eax, -1
  00024	75 09		 jne	 SHORT $LN44@gz_comp

; 147  : }

  00026	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002a	41 5f		 pop	 r15
  0002c	5f		 pop	 rdi
  0002d	5b		 pop	 rbx
  0002e	c3		 ret	 0
$LN44@gz_comp:

; 80   :         return -1;
; 81   : 
; 82   :     /* write directly if requested */
; 83   :     if (state->direct) {

  0002f	83 7f 40 00	 cmp	 DWORD PTR [rdi+64], 0
  00033	48 89 6c 24 40	 mov	 QWORD PTR [rsp+64], rbp
  00038	48 89 74 24 48	 mov	 QWORD PTR [rsp+72], rsi
  0003d	4c 89 74 24 50	 mov	 QWORD PTR [rsp+80], r14
  00042	74 69		 je	 SHORT $LN10@gz_comp

; 84   :         while (strm->avail_in) {

  00044	8b 4b 08	 mov	 ecx, DWORD PTR [rbx+8]
  00047	85 c9		 test	 ecx, ecx
  00049	0f 84 32 01 00
	00		 je	 $LN20@gz_comp
  0004f	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  00052	41 be 00 00 00
	40		 mov	 r14d, 1073741824	; 40000000H
  00058	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL2@gz_comp:

; 85   :             put = strm->avail_in > max ? max : strm->avail_in;

  00060	41 3b ce	 cmp	 ecx, r14d
  00063	41 0f 47 ce	 cmova	 ecx, r14d

; 86   :             writ = _write(state->fd, strm->next_in, put);

  00067	44 8b c1	 mov	 r8d, ecx
  0006a	8b 4f 1c	 mov	 ecx, DWORD PTR [rdi+28]
  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__write

; 87   :             if (writ < 0) {

  00073	85 c0		 test	 eax, eax
  00075	78 1b		 js	 SHORT $LN29@gz_comp

; 88   :                 gz_error(state, Z_ERRNO, zstrerror());
; 89   :                 return -1;
; 90   :             }
; 91   :             strm->avail_in -= (unsigned)writ;

  00077	8b 4b 08	 mov	 ecx, DWORD PTR [rbx+8]
  0007a	2b c8		 sub	 ecx, eax

; 92   :             strm->next_in += writ;

  0007c	48 98		 cdqe
  0007e	48 01 03	 add	 QWORD PTR [rbx], rax
  00081	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  00084	89 4b 08	 mov	 DWORD PTR [rbx+8], ecx
  00087	85 c9		 test	 ecx, ecx
  00089	75 d5		 jne	 SHORT $LL2@gz_comp

; 144  : 
; 145  :     /* all done, no errors */
; 146  :     return 0;

  0008b	33 c0		 xor	 eax, eax
  0008d	e9 0c 01 00 00	 jmp	 $LN47@gz_comp
$LN29@gz_comp:

; 134  :             gz_error(state, Z_STREAM_ERROR,

  00092	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00098	8b 08		 mov	 ecx, DWORD PTR [rax]
  0009a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strerror
  000a0	4c 8b c0	 mov	 r8, rax
  000a3	ba ff ff ff ff	 mov	 edx, -1
  000a8	e9 e4 00 00 00	 jmp	 $LN48@gz_comp
$LN10@gz_comp:

; 93   :         }
; 94   :         return 0;
; 95   :     }
; 96   : 
; 97   :     /* check for a pending reset */
; 98   :     if (state->reset) {

  000ad	33 ed		 xor	 ebp, ebp
  000af	39 6f 60	 cmp	 DWORD PTR [rdi+96], ebp
  000b2	74 14		 je	 SHORT $LN12@gz_comp

; 99   :         /* don't start a new gzip member unless there is data to write */
; 100  :         if (strm->avail_in == 0)

  000b4	39 6b 08	 cmp	 DWORD PTR [rbx+8], ebp
  000b7	0f 84 c4 00 00
	00		 je	 $LN20@gz_comp

; 101  :             return 0;
; 102  :         deflateReset(strm);

  000bd	48 8b cb	 mov	 rcx, rbx
  000c0	e8 00 00 00 00	 call	 deflateReset

; 103  :         state->reset = 0;

  000c5	89 6f 60	 mov	 DWORD PTR [rdi+96], ebp
$LN12@gz_comp:

; 104  :     }
; 105  : 
; 106  :     /* run deflate() on provided input until it produces no more output */
; 107  :     ret = Z_OK;

  000c8	8b 43 18	 mov	 eax, DWORD PTR [rbx+24]
  000cb	41 be 00 00 00
	40		 mov	 r14d, 1073741824	; 40000000H
$LL6@gz_comp:

; 108  :     do {
; 109  :         /* write out current buffer contents if full, or if flushing, but if
; 110  :            doing Z_FINISH then don't write until we get to Z_STREAM_END */
; 111  :         if (strm->avail_out == 0 || (flush != Z_NO_FLUSH &&

  000d1	85 c0		 test	 eax, eax
  000d3	74 12		 je	 SHORT $LN28@gz_comp
  000d5	8b f0		 mov	 esi, eax
  000d7	45 85 ff	 test	 r15d, r15d
  000da	74 7b		 je	 SHORT $LN18@gz_comp
  000dc	41 83 ff 04	 cmp	 r15d, 4
  000e0	75 05		 jne	 SHORT $LN28@gz_comp
  000e2	83 fd 01	 cmp	 ebp, 1
  000e5	75 70		 jne	 SHORT $LN18@gz_comp
$LN28@gz_comp:

; 112  :             (flush != Z_FINISH || ret == Z_STREAM_END))) {
; 113  :             while (strm->next_out > state->x.next) {

  000e7	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  000eb	48 8b 57 08	 mov	 rdx, QWORD PTR [rdi+8]
  000ef	48 3b ca	 cmp	 rcx, rdx
  000f2	76 43		 jbe	 SHORT $LN43@gz_comp
  000f4	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL7@gz_comp:

; 114  :                 put = strm->next_out - state->x.next > (int)max ? max :

  00100	48 8b c1	 mov	 rax, rcx
  00103	2b ca		 sub	 ecx, edx
  00105	48 2b c2	 sub	 rax, rdx
  00108	49 3b c6	 cmp	 rax, r14
  0010b	41 0f 4f ce	 cmovg	 ecx, r14d

; 115  :                       (unsigned)(strm->next_out - state->x.next);
; 116  :                 writ = _write(state->fd, state->x.next, put);

  0010f	44 8b c1	 mov	 r8d, ecx
  00112	8b 4f 1c	 mov	 ecx, DWORD PTR [rdi+28]
  00115	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__write

; 117  :                 if (writ < 0) {

  0011b	85 c0		 test	 eax, eax
  0011d	0f 88 6f ff ff
	ff		 js	 $LN29@gz_comp

; 118  :                     gz_error(state, Z_ERRNO, zstrerror());
; 119  :                     return -1;
; 120  :                 }
; 121  :                 state->x.next += writ;

  00123	48 63 d0	 movsxd	 rdx, eax
  00126	48 03 57 08	 add	 rdx, QWORD PTR [rdi+8]
  0012a	48 89 57 08	 mov	 QWORD PTR [rdi+8], rdx
  0012e	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00132	48 3b ca	 cmp	 rcx, rdx
  00135	77 c9		 ja	 SHORT $LL7@gz_comp
$LN43@gz_comp:

; 122  :             }
; 123  :             if (strm->avail_out == 0) {

  00137	8b 73 18	 mov	 esi, DWORD PTR [rbx+24]
  0013a	85 f6		 test	 esi, esi
  0013c	75 19		 jne	 SHORT $LN18@gz_comp

; 124  :                 strm->avail_out = state->size;

  0013e	8b 47 28	 mov	 eax, DWORD PTR [rdi+40]
  00141	89 43 18	 mov	 DWORD PTR [rbx+24], eax

; 125  :                 strm->next_out = state->out;

  00144	48 8b 47 38	 mov	 rax, QWORD PTR [rdi+56]
  00148	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax

; 126  :                 state->x.next = state->out;

  0014c	48 8b 47 38	 mov	 rax, QWORD PTR [rdi+56]
  00150	48 89 47 08	 mov	 QWORD PTR [rdi+8], rax
  00154	8b 73 18	 mov	 esi, DWORD PTR [rbx+24]
$LN18@gz_comp:

; 127  :             }
; 128  :         }
; 129  : 
; 130  :         /* compress */
; 131  :         have = strm->avail_out;
; 132  :         ret = deflate(strm, flush);

  00157	41 8b d7	 mov	 edx, r15d
  0015a	48 8b cb	 mov	 rcx, rbx
  0015d	e8 00 00 00 00	 call	 deflate
  00162	8b e8		 mov	 ebp, eax

; 133  :         if (ret == Z_STREAM_ERROR) {

  00164	83 f8 fe	 cmp	 eax, -2
  00167	74 1c		 je	 SHORT $LN32@gz_comp

; 137  :         }
; 138  :         have -= strm->avail_out;

  00169	8b 43 18	 mov	 eax, DWORD PTR [rbx+24]
  0016c	3b f0		 cmp	 esi, eax

; 139  :     } while (have);

  0016e	0f 85 5d ff ff
	ff		 jne	 $LL6@gz_comp

; 140  : 
; 141  :     /* if that completed a deflate stream, allow another to start */
; 142  :     if (flush == Z_FINISH)

  00174	41 83 ff 04	 cmp	 r15d, 4
  00178	75 07		 jne	 SHORT $LN20@gz_comp

; 143  :         state->reset = 1;

  0017a	c7 47 60 01 00
	00 00		 mov	 DWORD PTR [rdi+96], 1
$LN20@gz_comp:

; 144  : 
; 145  :     /* all done, no errors */
; 146  :     return 0;

  00181	33 c0		 xor	 eax, eax
  00183	eb 19		 jmp	 SHORT $LN47@gz_comp
$LN32@gz_comp:

; 134  :             gz_error(state, Z_STREAM_ERROR,

  00185	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CH@DEEGAHIB@internal?5error?3?5deflate?5stream?5@
  0018c	ba fe ff ff ff	 mov	 edx, -2
$LN48@gz_comp:
  00191	48 8b cf	 mov	 rcx, rdi
  00194	e8 00 00 00 00	 call	 gz_error

; 135  :                       "internal error: deflate stream corrupt");
; 136  :             return -1;

  00199	b8 ff ff ff ff	 mov	 eax, -1
$LN47@gz_comp:
  0019e	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  001a3	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  001a8	4c 8b 74 24 50	 mov	 r14, QWORD PTR [rsp+80]

; 147  : }

  001ad	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001b1	41 5f		 pop	 r15
  001b3	5f		 pop	 rdi
  001b4	5b		 pop	 rbx
  001b5	c3		 ret	 0
gz_comp	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\gzwrite.c
;	COMDAT gz_zero
_TEXT	SEGMENT
state$ = 48
len$ = 56
gz_zero	PROC						; COMDAT

; 152  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 153  :     int first;
; 154  :     unsigned n;
; 155  :     z_streamp strm = &(state->strm);
; 156  : 
; 157  :     /* consume whatever's left in the input buffer */
; 158  :     if (strm->avail_in && gz_comp(state, Z_NO_FLUSH) == -1)

  00014	83 b9 88 00 00
	00 00		 cmp	 DWORD PTR [rcx+136], 0
  0001b	48 8b f2	 mov	 rsi, rdx
  0001e	48 8b d9	 mov	 rbx, rcx
  00021	74 0c		 je	 SHORT $LN4@gz_zero
  00023	33 d2		 xor	 edx, edx
  00025	e8 00 00 00 00	 call	 gz_comp
  0002a	83 f8 ff	 cmp	 eax, -1
  0002d	74 6e		 je	 SHORT $LN11@gz_zero
$LN4@gz_zero:

; 159  :         return -1;
; 160  : 
; 161  :     /* compress len zeros (len guaranteed > 0) */
; 162  :     first = 1;

  0002f	bd 01 00 00 00	 mov	 ebp, 1

; 163  :     while (len) {

  00034	48 85 f6	 test	 rsi, rsi
  00037	74 4d		 je	 SHORT $LN3@gz_zero
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@gz_zero:

; 164  :         n = GT_OFF(state->size) || (z_off64_t)state->size > len ?

  00040	8b 7b 28	 mov	 edi, DWORD PTR [rbx+40]

; 165  :             (unsigned)len : state->size;
; 166  :         if (first) {

  00043	48 3b fe	 cmp	 rdi, rsi
  00046	0f 4f fe	 cmovg	 edi, esi
  00049	85 ed		 test	 ebp, ebp
  0004b	74 10		 je	 SHORT $LN5@gz_zero

; 167  :             memset(state->in, 0, n);

  0004d	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  00051	33 d2		 xor	 edx, edx
  00053	44 8b c7	 mov	 r8d, edi
  00056	e8 00 00 00 00	 call	 memset

; 168  :             first = 0;

  0005b	33 ed		 xor	 ebp, ebp
$LN5@gz_zero:

; 169  :         }
; 170  :         strm->avail_in = n;

  0005d	89 bb 88 00 00
	00		 mov	 DWORD PTR [rbx+136], edi

; 171  :         strm->next_in = state->in;
; 172  :         state->x.pos += n;
; 173  :         if (gz_comp(state, Z_NO_FLUSH) == -1)

  00063	33 d2		 xor	 edx, edx
  00065	48 8b 43 30	 mov	 rax, QWORD PTR [rbx+48]
  00069	48 8b cb	 mov	 rcx, rbx
  0006c	48 89 83 80 00
	00 00		 mov	 QWORD PTR [rbx+128], rax
  00073	48 01 7b 10	 add	 QWORD PTR [rbx+16], rdi
  00077	e8 00 00 00 00	 call	 gz_comp
  0007c	83 f8 ff	 cmp	 eax, -1
  0007f	74 1c		 je	 SHORT $LN11@gz_zero

; 175  :         len -= n;

  00081	48 2b f7	 sub	 rsi, rdi
  00084	75 ba		 jne	 SHORT $LL2@gz_zero
$LN3@gz_zero:

; 176  :     }
; 177  :     return 0;

  00086	33 c0		 xor	 eax, eax
$LN1@gz_zero:

; 178  : }

  00088	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008d	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00092	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00097	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009b	5f		 pop	 rdi
  0009c	c3		 ret	 0
$LN11@gz_zero:

; 174  :             return -1;

  0009d	b8 ff ff ff ff	 mov	 eax, -1
  000a2	eb e4		 jmp	 SHORT $LN1@gz_zero
gz_zero	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\gzwrite.c
;	COMDAT gz_write
_TEXT	SEGMENT
state$ = 48
buf$ = 56
len$ = 64
gz_write PROC						; COMDAT

; 183  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 56		 push	 r14
  00016	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0001a	49 8b f0	 mov	 rsi, r8
  0001d	48 8b ea	 mov	 rbp, rdx
  00020	48 8b d9	 mov	 rbx, rcx

; 184  :     z_size_t put = len;

  00023	4d 8b f0	 mov	 r14, r8

; 185  : 
; 186  :     /* if len is zero, avoid unnecessary operations */
; 187  :     if (len == 0)

  00026	4d 85 c0	 test	 r8, r8
  00029	0f 84 ae 00 00
	00		 je	 $LN25@gz_write

; 188  :         return 0;
; 189  : 
; 190  :     /* allocate memory if this is the first time through */
; 191  :     if (state->size == 0 && gz_init(state) == -1)

  0002f	83 79 28 00	 cmp	 DWORD PTR [rcx+40], 0
  00033	75 0e		 jne	 SHORT $LN32@gz_write
  00035	e8 00 00 00 00	 call	 gz_init
  0003a	83 f8 ff	 cmp	 eax, -1
  0003d	0f 84 9a 00 00
	00		 je	 $LN25@gz_write
$LN32@gz_write:

; 192  :         return 0;
; 193  : 
; 194  :     /* check for seek request */
; 195  :     if (state->seek) {

  00043	83 7b 70 00	 cmp	 DWORD PTR [rbx+112], 0
  00047	74 18		 je	 SHORT $LN11@gz_write

; 196  :         state->seek = 0;
; 197  :         if (gz_zero(state, state->skip) == -1)

  00049	48 8b 53 68	 mov	 rdx, QWORD PTR [rbx+104]
  0004d	48 8b cb	 mov	 rcx, rbx
  00050	c7 43 70 00 00
	00 00		 mov	 DWORD PTR [rbx+112], 0
  00057	e8 00 00 00 00	 call	 gz_zero
  0005c	83 f8 ff	 cmp	 eax, -1
  0005f	74 7c		 je	 SHORT $LN25@gz_write
$LN11@gz_write:

; 198  :             return 0;
; 199  :     }
; 200  : 
; 201  :     /* for small len, copy to input buffer, otherwise compress directly */
; 202  :     if (len < state->size) {

  00061	8b 43 28	 mov	 eax, DWORD PTR [rbx+40]
  00064	48 3b f0	 cmp	 rsi, rax
  00067	0f 83 8d 00 00
	00		 jae	 $LN12@gz_write
  0006d	0f 1f 00	 npad	 3
$LL4@gz_write:

; 203  :         /* copy to input buffer, compress when full */
; 204  :         do {
; 205  :             unsigned have, copy;
; 206  : 
; 207  :             if (state->strm.avail_in == 0)

  00070	8b 93 88 00 00
	00		 mov	 edx, DWORD PTR [rbx+136]
  00076	85 d2		 test	 edx, edx
  00078	75 12		 jne	 SHORT $LN29@gz_write

; 208  :                 state->strm.next_in = state->in;

  0007a	48 8b 43 30	 mov	 rax, QWORD PTR [rbx+48]
  0007e	48 89 83 80 00
	00 00		 mov	 QWORD PTR [rbx+128], rax
  00085	8b c8		 mov	 ecx, eax
  00087	4c 8b c0	 mov	 r8, rax
  0008a	eb 0d		 jmp	 SHORT $LN14@gz_write
$LN29@gz_write:
  0008c	8b 43 30	 mov	 eax, DWORD PTR [rbx+48]
  0008f	8b 8b 80 00 00
	00		 mov	 ecx, DWORD PTR [rbx+128]
  00095	4c 8b 43 30	 mov	 r8, QWORD PTR [rbx+48]
$LN14@gz_write:

; 209  :             have = (unsigned)((state->strm.next_in + state->strm.avail_in) -

  00099	2b d0		 sub	 edx, eax

; 210  :                               state->in);
; 211  :             copy = state->size - have;
; 212  :             if (copy > len)
; 213  :                 copy = (unsigned)len;
; 214  :             memcpy(state->in + have, buf, copy);

  0009b	8b c6		 mov	 eax, esi
  0009d	03 d1		 add	 edx, ecx
  0009f	8b 4b 28	 mov	 ecx, DWORD PTR [rbx+40]
  000a2	2b ca		 sub	 ecx, edx
  000a4	48 3b ce	 cmp	 rcx, rsi
  000a7	0f 46 c1	 cmovbe	 eax, ecx
  000aa	8b ca		 mov	 ecx, edx
  000ac	49 03 c8	 add	 rcx, r8
  000af	8b f8		 mov	 edi, eax
  000b1	44 8b c0	 mov	 r8d, eax
  000b4	48 8b d5	 mov	 rdx, rbp
  000b7	e8 00 00 00 00	 call	 memcpy

; 215  :             state->strm.avail_in += copy;

  000bc	01 bb 88 00 00
	00		 add	 DWORD PTR [rbx+136], edi

; 216  :             state->x.pos += copy;
; 217  :             buf = (const char *)buf + copy;

  000c2	48 03 ef	 add	 rbp, rdi
  000c5	48 01 7b 10	 add	 QWORD PTR [rbx+16], rdi

; 218  :             len -= copy;

  000c9	48 2b f7	 sub	 rsi, rdi

; 219  :             if (len && gz_comp(state, Z_NO_FLUSH) == -1)

  000cc	74 7a		 je	 SHORT $LN6@gz_write
  000ce	33 d2		 xor	 edx, edx
  000d0	48 8b cb	 mov	 rcx, rbx
  000d3	e8 00 00 00 00	 call	 gz_comp
  000d8	83 f8 ff	 cmp	 eax, -1
  000db	75 93		 jne	 SHORT $LL4@gz_write
$LN25@gz_write:

; 237  :                 return 0;

  000dd	33 c0		 xor	 eax, eax
$LN1@gz_write:

; 244  : }

  000df	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000e4	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000e9	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000ee	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  000f3	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000f7	41 5e		 pop	 r14
  000f9	c3		 ret	 0
$LN12@gz_write:

; 220  :                 return 0;
; 221  :         } while (len);
; 222  :     }
; 223  :     else {
; 224  :         /* consume whatever's left in the input buffer */
; 225  :         if (state->strm.avail_in && gz_comp(state, Z_NO_FLUSH) == -1)

  000fa	83 bb 88 00 00
	00 00		 cmp	 DWORD PTR [rbx+136], 0
  00101	74 0f		 je	 SHORT $LN17@gz_write
  00103	33 d2		 xor	 edx, edx
  00105	48 8b cb	 mov	 rcx, rbx
  00108	e8 00 00 00 00	 call	 gz_comp
  0010d	83 f8 ff	 cmp	 eax, -1
  00110	74 cb		 je	 SHORT $LN25@gz_write
$LN17@gz_write:

; 226  :             return 0;
; 227  : 
; 228  :         /* directly compress user buffer to file */
; 229  :         state->strm.next_in = (z_const Bytef *)buf;

  00112	48 89 ab 80 00
	00 00		 mov	 QWORD PTR [rbx+128], rbp
  00119	bd ff ff ff ff	 mov	 ebp, -1			; ffffffffH
  0011e	66 90		 npad	 2
$LL7@gz_write:

; 230  :         do {
; 231  :             unsigned n = (unsigned)-1;
; 232  :             if (n > len)

  00120	8b cd		 mov	 ecx, ebp
  00122	48 3b f5	 cmp	 rsi, rbp
  00125	0f 42 ce	 cmovb	 ecx, esi

; 233  :                 n = (unsigned)len;
; 234  :             state->strm.avail_in = n;
; 235  :             state->x.pos += n;
; 236  :             if (gz_comp(state, Z_NO_FLUSH) == -1)

  00128	33 d2		 xor	 edx, edx
  0012a	8b f9		 mov	 edi, ecx
  0012c	48 01 7b 10	 add	 QWORD PTR [rbx+16], rdi
  00130	89 8b 88 00 00
	00		 mov	 DWORD PTR [rbx+136], ecx
  00136	48 8b cb	 mov	 rcx, rbx
  00139	e8 00 00 00 00	 call	 gz_comp
  0013e	83 f8 ff	 cmp	 eax, -1
  00141	74 9a		 je	 SHORT $LN25@gz_write

; 238  :             len -= n;

  00143	48 2b f7	 sub	 rsi, rdi

; 239  :         } while (len);

  00146	75 d8		 jne	 SHORT $LL7@gz_write
$LN6@gz_write:

; 240  :     }
; 241  : 
; 242  :     /* input was all buffered or compressed */
; 243  :     return put;

  00148	49 8b c6	 mov	 rax, r14
  0014b	eb 92		 jmp	 SHORT $LN1@gz_write
gz_write ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\gzwrite.c
;	COMDAT gzwrite
_TEXT	SEGMENT
file$ = 48
buf$ = 56
len$ = 64
gzwrite	PROC						; COMDAT

; 251  : {

$LN8:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 252  :     gz_statep state;
; 253  : 
; 254  :     /* get internal structure */
; 255  :     if (file == NULL)

  00004	48 85 c9	 test	 rcx, rcx
  00007	74 25		 je	 SHORT $LN4@gzwrite

; 256  :         return 0;
; 257  :     state = (gz_statep)file;
; 258  : 
; 259  :     /* check that we're writing and that there's no error */
; 260  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  00009	81 79 18 b1 79
	00 00		 cmp	 DWORD PTR [rcx+24], 31153 ; 000079b1H
  00010	75 1c		 jne	 SHORT $LN4@gzwrite
  00012	83 79 74 00	 cmp	 DWORD PTR [rcx+116], 0
  00016	75 16		 jne	 SHORT $LN4@gzwrite

; 261  :         return 0;
; 262  : 
; 263  :     /* since an int is returned, make sure len fits in one, otherwise return
; 264  :        with an error (this avoids a flaw in the interface) */
; 265  :     if ((int)len < 0) {

  00018	45 85 c0	 test	 r8d, r8d
  0001b	79 18		 jns	 SHORT $LN5@gzwrite

; 266  :         gz_error(state, Z_DATA_ERROR, "requested length does not fit in int");

  0001d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CF@MLPJFDMM@requested?5length?5does?5not?5fit?5i@
  00024	ba fd ff ff ff	 mov	 edx, -3
  00029	e8 00 00 00 00	 call	 gz_error
$LN4@gzwrite:

; 272  : }

  0002e	33 c0		 xor	 eax, eax
  00030	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00034	c3		 ret	 0
$LN5@gzwrite:

; 267  :         return 0;
; 268  :     }
; 269  : 
; 270  :     /* write len bytes from buf (the return value will fit in an int) */
; 271  :     return (int)gz_write(state, buf, len);

  00035	45 8b c0	 mov	 r8d, r8d

; 272  : }

  00038	48 83 c4 28	 add	 rsp, 40			; 00000028H

; 267  :         return 0;
; 268  :     }
; 269  : 
; 270  :     /* write len bytes from buf (the return value will fit in an int) */
; 271  :     return (int)gz_write(state, buf, len);

  0003c	e9 00 00 00 00	 jmp	 gz_write
gzwrite	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\gzwrite.c
;	COMDAT gzfwrite
_TEXT	SEGMENT
buf$ = 48
size$ = 56
nitems$ = 64
file$ = 72
gzfwrite PROC						; COMDAT

; 280  : {

$LN10:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	4d 8b d0	 mov	 r10, r8
  00009	48 8b da	 mov	 rbx, rdx

; 281  :     z_size_t len;
; 282  :     gz_statep state;
; 283  : 
; 284  :     /* get internal structure */
; 285  :     if (file == NULL)

  0000c	4d 85 c9	 test	 r9, r9
  0000f	74 3e		 je	 SHORT $LN4@gzfwrite

; 286  :         return 0;
; 287  :     state = (gz_statep)file;
; 288  : 
; 289  :     /* check that we're writing and that there's no error */
; 290  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  00011	41 81 79 18 b1
	79 00 00	 cmp	 DWORD PTR [r9+24], 31153 ; 000079b1H
  00019	75 34		 jne	 SHORT $LN4@gzfwrite
  0001b	41 83 79 74 00	 cmp	 DWORD PTR [r9+116], 0
  00020	75 2d		 jne	 SHORT $LN4@gzfwrite

; 291  :         return 0;
; 292  : 
; 293  :     /* compute bytes to read -- error on overflow */
; 294  :     len = nitems * size;

  00022	4c 8b c2	 mov	 r8, rdx
  00025	4d 0f af c2	 imul	 r8, r10

; 295  :     if (size && len / size != nitems) {

  00029	48 85 d2	 test	 rdx, rdx
  0002c	74 29		 je	 SHORT $LN5@gzfwrite
  0002e	33 d2		 xor	 edx, edx
  00030	49 8b c0	 mov	 rax, r8
  00033	48 f7 f3	 div	 rbx
  00036	49 3b c2	 cmp	 rax, r10
  00039	74 1c		 je	 SHORT $LN5@gzfwrite

; 296  :         gz_error(state, Z_STREAM_ERROR, "request does not fit in a size_t");

  0003b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CB@EGGJDMIK@request?5does?5not?5fit?5in?5a?5size_@
  00042	ba fe ff ff ff	 mov	 edx, -2
  00047	49 8b c9	 mov	 rcx, r9
  0004a	e8 00 00 00 00	 call	 gz_error
$LN4@gzfwrite:

; 302  : }

  0004f	33 c0		 xor	 eax, eax
  00051	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00055	5b		 pop	 rbx
  00056	c3		 ret	 0
$LN5@gzfwrite:

; 297  :         return 0;
; 298  :     }
; 299  : 
; 300  :     /* write len bytes to buf, return the number of full items written */
; 301  :     return len ? gz_write(state, buf, len) / size : 0;

  00057	4d 85 c0	 test	 r8, r8
  0005a	74 f3		 je	 SHORT $LN4@gzfwrite
  0005c	48 8b d1	 mov	 rdx, rcx
  0005f	49 8b c9	 mov	 rcx, r9
  00062	e8 00 00 00 00	 call	 gz_write
  00067	33 d2		 xor	 edx, edx
  00069	48 f7 f3	 div	 rbx

; 302  : }

  0006c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00070	5b		 pop	 rbx
  00071	c3		 ret	 0
gzfwrite ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\gzwrite.c
;	COMDAT gzputc
_TEXT	SEGMENT
buf$ = 48
file$ = 48
c$ = 56
gzputc	PROC						; COMDAT

; 308  : {

$LN14:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	8b fa		 mov	 edi, edx
  0000c	48 8b d9	 mov	 rbx, rcx

; 309  :     unsigned have;
; 310  :     unsigned char buf[1];
; 311  :     gz_statep state;
; 312  :     z_streamp strm;
; 313  : 
; 314  :     /* get internal structure */
; 315  :     if (file == NULL)

  0000f	48 85 c9	 test	 rcx, rcx
  00012	0f 84 ab 00 00
	00		 je	 $LN4@gzputc

; 316  :         return -1;
; 317  :     state = (gz_statep)file;
; 318  :     strm = &(state->strm);
; 319  : 
; 320  :     /* check that we're writing and that there's no error */
; 321  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  00018	81 79 18 b1 79
	00 00		 cmp	 DWORD PTR [rcx+24], 31153 ; 000079b1H
  0001f	0f 85 9e 00 00
	00		 jne	 $LN4@gzputc
  00025	83 79 74 00	 cmp	 DWORD PTR [rcx+116], 0
  00029	0f 85 94 00 00
	00		 jne	 $LN4@gzputc

; 323  : 
; 324  :     /* check for seek request */
; 325  :     if (state->seek) {

  0002f	83 79 70 00	 cmp	 DWORD PTR [rcx+112], 0
  00033	74 15		 je	 SHORT $LN6@gzputc

; 326  :         state->seek = 0;
; 327  :         if (gz_zero(state, state->skip) == -1)

  00035	48 8b 51 68	 mov	 rdx, QWORD PTR [rcx+104]
  00039	c7 41 70 00 00
	00 00		 mov	 DWORD PTR [rcx+112], 0
  00040	e8 00 00 00 00	 call	 gz_zero
  00045	83 f8 ff	 cmp	 eax, -1
  00048	74 79		 je	 SHORT $LN4@gzputc
$LN6@gzputc:

; 328  :             return -1;
; 329  :     }
; 330  : 
; 331  :     /* try writing to input buffer for speed (state->size == 0 if buffer not
; 332  :        initialized) */
; 333  :     if (state->size) {

  0004a	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]
  0004d	85 d2		 test	 edx, edx
  0004f	74 50		 je	 SHORT $LN9@gzputc

; 334  :         if (strm->avail_in == 0)

  00051	8b 83 88 00 00
	00		 mov	 eax, DWORD PTR [rbx+136]
  00057	85 c0		 test	 eax, eax
  00059	75 10		 jne	 SHORT $LN12@gzputc

; 335  :             strm->next_in = state->in;

  0005b	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  0005f	48 89 8b 80 00
	00 00		 mov	 QWORD PTR [rbx+128], rcx
  00066	44 8b c1	 mov	 r8d, ecx
  00069	eb 0a		 jmp	 SHORT $LN8@gzputc
$LN12@gzputc:
  0006b	8b 8b 80 00 00
	00		 mov	 ecx, DWORD PTR [rbx+128]
  00071	44 8b 43 30	 mov	 r8d, DWORD PTR [rbx+48]
$LN8@gzputc:

; 336  :         have = (unsigned)((strm->next_in + strm->avail_in) - state->in);

  00075	41 2b c0	 sub	 eax, r8d
  00078	03 c1		 add	 eax, ecx

; 337  :         if (have < state->size) {

  0007a	3b c2		 cmp	 eax, edx
  0007c	73 23		 jae	 SHORT $LN9@gzputc

; 338  :             state->in[have] = (unsigned char)c;

  0007e	8b c8		 mov	 ecx, eax
  00080	48 8b 43 30	 mov	 rax, QWORD PTR [rbx+48]
  00084	40 88 3c 01	 mov	 BYTE PTR [rcx+rax], dil

; 339  :             ++strm->avail_in;

  00088	ff 83 88 00 00
	00		 inc	 DWORD PTR [rbx+136]

; 340  :             ++state->x.pos;

  0008e	48 ff 43 10	 inc	 QWORD PTR [rbx+16]

; 341  :             return c & 0xff;

  00092	40 0f b6 c7	 movzx	 eax, dil

; 350  : }

  00096	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0009b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
$LN9@gzputc:

; 342  :         }
; 343  :     }
; 344  : 
; 345  :     /* no room in buffer or not initialized, use gz_write() */
; 346  :     buf[0] = (unsigned char)c;
; 347  :     if (gz_write(state, buf, 1) != 1)

  000a1	41 b8 01 00 00
	00		 mov	 r8d, 1
  000a7	40 88 7c 24 30	 mov	 BYTE PTR buf$[rsp], dil
  000ac	48 8d 54 24 30	 lea	 rdx, QWORD PTR buf$[rsp]
  000b1	48 8b cb	 mov	 rcx, rbx
  000b4	e8 00 00 00 00	 call	 gz_write
  000b9	48 83 f8 01	 cmp	 rax, 1

; 348  :         return -1;
; 349  :     return c & 0xff;

  000bd	40 0f b6 c7	 movzx	 eax, dil
  000c1	74 05		 je	 SHORT $LN1@gzputc
$LN4@gzputc:

; 322  :         return -1;

  000c3	b8 ff ff ff ff	 mov	 eax, -1
$LN1@gzputc:

; 350  : }

  000c8	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000cd	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d1	5f		 pop	 rdi
  000d2	c3		 ret	 0
gzputc	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\gzwrite.c
;	COMDAT gzputs
_TEXT	SEGMENT
file$ = 48
s$ = 56
gzputs	PROC						; COMDAT

; 356  : {

$LN11:
  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 357  :     z_size_t len, put;
; 358  :     gz_statep state;
; 359  : 
; 360  :     /* get internal structure */
; 361  :     if (file == NULL)

  00006	48 85 c9	 test	 rcx, rcx
  00009	74 72		 je	 SHORT $LN4@gzputs

; 362  :         return -1;
; 363  :     state = (gz_statep)file;
; 364  : 
; 365  :     /* check that we're writing and that there's no error */
; 366  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  0000b	81 79 18 b1 79
	00 00		 cmp	 DWORD PTR [rcx+24], 31153 ; 000079b1H
  00012	75 69		 jne	 SHORT $LN4@gzputs
  00014	83 79 74 00	 cmp	 DWORD PTR [rcx+116], 0
  00018	75 63		 jne	 SHORT $LN4@gzputs

; 368  : 
; 369  :     /* write string */
; 370  :     len = strlen(s);

  0001a	48 c7 c7 ff ff
	ff ff		 mov	 rdi, -1
  00021	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00026	48 8b df	 mov	 rbx, rdi
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL8@gzputs:
  00030	48 ff c3	 inc	 rbx
  00033	80 3c 1a 00	 cmp	 BYTE PTR [rdx+rbx], 0
  00037	75 f7		 jne	 SHORT $LL8@gzputs

; 371  :     if ((int)len < 0 || (unsigned)len != len) {

  00039	85 db		 test	 ebx, ebx
  0003b	78 22		 js	 SHORT $LN6@gzputs
  0003d	8b c3		 mov	 eax, ebx
  0003f	48 3b c3	 cmp	 rax, rbx
  00042	75 1b		 jne	 SHORT $LN6@gzputs

; 374  :     }
; 375  :     put = gz_write(state, s, len);

  00044	4c 8b c3	 mov	 r8, rbx
  00047	e8 00 00 00 00	 call	 gz_write

; 376  :     return put < len ? -1 : (int)len;

  0004c	48 3b c3	 cmp	 rax, rbx
  0004f	0f 42 df	 cmovb	 ebx, edi
  00052	8b c3		 mov	 eax, ebx
  00054	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 377  : }

  00059	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005d	5f		 pop	 rdi
  0005e	c3		 ret	 0
$LN6@gzputs:

; 372  :         gz_error(state, Z_STREAM_ERROR, "string length does not fit in int");

  0005f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CC@ENDIFONJ@string?5length?5does?5not?5fit?5in?5i@
  00066	ba fe ff ff ff	 mov	 edx, -2
  0006b	e8 00 00 00 00	 call	 gz_error
  00070	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]

; 373  :         return -1;

  00075	8b c7		 mov	 eax, edi

; 377  : }

  00077	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007b	5f		 pop	 rdi
  0007c	c3		 ret	 0
$LN4@gzputs:

; 367  :         return -1;

  0007d	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1

; 377  : }

  00084	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00088	5f		 pop	 rdi
  00089	c3		 ret	 0
gzputs	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\gzwrite.c
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\stdio.h
; File C:\UserFiles\Github\zlib-win64\gzwrite.c
;	COMDAT gzvprintf
_TEXT	SEGMENT
file$ = 64
format$ = 72
va$ = 80
gzvprintf PROC						; COMDAT

; 384  : {

$LN23:
  00000	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  00005	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  0000a	41 56		 push	 r14
  0000c	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00010	49 8b f0	 mov	 rsi, r8
  00013	4c 8b f2	 mov	 r14, rdx
  00016	48 8b f9	 mov	 rdi, rcx

; 385  :     int len;
; 386  :     unsigned left;
; 387  :     char *next;
; 388  :     gz_statep state;
; 389  :     z_streamp strm;
; 390  : 
; 391  :     /* get internal structure */
; 392  :     if (file == NULL)

  00019	48 85 c9	 test	 rcx, rcx
  0001c	0f 84 57 01 00
	00		 je	 $LN4@gzvprintf

; 393  :         return Z_STREAM_ERROR;
; 394  :     state = (gz_statep)file;
; 395  :     strm = &(state->strm);
; 396  : 
; 397  :     /* check that we're writing and that there's no error */
; 398  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  00022	81 79 18 b1 79
	00 00		 cmp	 DWORD PTR [rcx+24], 31153 ; 000079b1H
  00029	0f 85 4a 01 00
	00		 jne	 $LN4@gzvprintf
  0002f	83 79 74 00	 cmp	 DWORD PTR [rcx+116], 0
  00033	0f 85 40 01 00
	00		 jne	 $LN4@gzvprintf

; 399  :         return Z_STREAM_ERROR;
; 400  : 
; 401  :     /* make sure we have some buffer space */
; 402  :     if (state->size == 0 && gz_init(state) == -1)

  00039	83 79 28 00	 cmp	 DWORD PTR [rcx+40], 0
  0003d	75 1e		 jne	 SHORT $LN18@gzvprintf
  0003f	e8 00 00 00 00	 call	 gz_init
  00044	83 f8 ff	 cmp	 eax, -1
  00047	75 14		 jne	 SHORT $LN18@gzvprintf
$LN21@gzvprintf:

; 453  : }

  00049	8b 47 74	 mov	 eax, DWORD PTR [rdi+116]
  0004c	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00051	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  00056	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005a	41 5e		 pop	 r14
  0005c	c3		 ret	 0
$LN18@gzvprintf:

; 403  :         return state->err;
; 404  : 
; 405  :     /* check for seek request */
; 406  :     if (state->seek) {

  0005d	83 7f 70 00	 cmp	 DWORD PTR [rdi+112], 0
  00061	74 18		 je	 SHORT $LN7@gzvprintf

; 407  :         state->seek = 0;
; 408  :         if (gz_zero(state, state->skip) == -1)

  00063	48 8b 57 68	 mov	 rdx, QWORD PTR [rdi+104]
  00067	48 8b cf	 mov	 rcx, rdi
  0006a	c7 47 70 00 00
	00 00		 mov	 DWORD PTR [rdi+112], 0
  00071	e8 00 00 00 00	 call	 gz_zero
  00076	83 f8 ff	 cmp	 eax, -1
  00079	74 ce		 je	 SHORT $LN21@gzvprintf
$LN7@gzvprintf:

; 409  :             return state->err;
; 410  :     }
; 411  : 
; 412  :     /* do the printf() into the input buffer, put length in len -- the input
; 413  :        buffer is double-sized just for this function, so there is guaranteed to
; 414  :        be state->size bytes available after the current contents */
; 415  :     if (strm->avail_in == 0)

  0007b	8b 8f 88 00 00
	00		 mov	 ecx, DWORD PTR [rdi+136]
  00081	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00086	48 89 6c 24 48	 mov	 QWORD PTR [rsp+72], rbp
  0008b	85 c9		 test	 ecx, ecx
  0008d	75 0d		 jne	 SHORT $LN17@gzvprintf

; 416  :         strm->next_in = state->in;

  0008f	48 8b 47 30	 mov	 rax, QWORD PTR [rdi+48]
  00093	48 89 87 80 00
	00 00		 mov	 QWORD PTR [rdi+128], rax
  0009a	eb 07		 jmp	 SHORT $LN8@gzvprintf
$LN17@gzvprintf:
  0009c	48 8b 87 80 00
	00 00		 mov	 rax, QWORD PTR [rdi+128]
$LN8@gzvprintf:

; 417  :     next = (char *)(state->in + (strm->next_in - state->in) + strm->avail_in);

  000a3	48 8d 2c 08	 lea	 rbp, QWORD PTR [rax+rcx]

; 418  :     next[state->size - 1] = 0;

  000a7	8b 47 28	 mov	 eax, DWORD PTR [rdi+40]
  000aa	ff c8		 dec	 eax
  000ac	c6 04 28 00	 mov	 BYTE PTR [rax+rbp], 0

; 419  : #ifdef NO_vsnprintf
; 420  : #  ifdef HAS_vsprintf_void
; 421  :     (void)vsprintf(next, format, va);
; 422  :     for (len = 0; len < state->size; len++)
; 423  :         if (next[len] == 0) break;
; 424  : #  else
; 425  :     len = vsprintf(next, format, va);
; 426  : #  endif
; 427  : #else
; 428  : #  ifdef HAS_vsnprintf_void
; 429  :     (void)vsnprintf(next, state->size, format, va);
; 430  :     len = strlen(next);
; 431  : #  else
; 432  :     len = vsnprintf(next, state->size, format, va);

  000b0	8b 5f 28	 mov	 ebx, DWORD PTR [rdi+40]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\stdio.h

; 1439 :         int const _Result = __stdio_common_vsprintf(

  000b3	e8 00 00 00 00	 call	 __local_stdio_printf_options
  000b8	48 89 74 24 28	 mov	 QWORD PTR [rsp+40], rsi
  000bd	4d 8b ce	 mov	 r9, r14
  000c0	44 8b c3	 mov	 r8d, ebx
  000c3	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  000cc	48 8b d5	 mov	 rdx, rbp
  000cf	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000d2	48 83 c9 02	 or	 rcx, 2
  000d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsprintf
  000dc	8b f0		 mov	 esi, eax

; 1440 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1441 :             _Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1442 : 
; 1443 :         return _Result < 0 ? -1 : _Result;

  000de	b8 ff ff ff ff	 mov	 eax, -1
  000e3	85 f6		 test	 esi, esi
  000e5	0f 48 f0	 cmovs	 esi, eax
; File C:\UserFiles\Github\zlib-win64\gzwrite.c

; 437  :     if (len == 0 || (unsigned)len >= state->size || next[state->size - 1] != 0)

  000e8	85 f6		 test	 esi, esi
  000ea	0f 84 85 00 00
	00		 je	 $LN10@gzvprintf
  000f0	8b 47 28	 mov	 eax, DWORD PTR [rdi+40]
  000f3	3b f0		 cmp	 esi, eax
  000f5	73 7e		 jae	 SHORT $LN10@gzvprintf
  000f7	ff c8		 dec	 eax
  000f9	80 3c 28 00	 cmp	 BYTE PTR [rax+rbp], 0
  000fd	75 76		 jne	 SHORT $LN10@gzvprintf

; 439  : 
; 440  :     /* update buffer and position, compress first half if past that */
; 441  :     strm->avail_in += (unsigned)len;

  000ff	01 b7 88 00 00
	00		 add	 DWORD PTR [rdi+136], esi

; 442  :     state->x.pos += len;

  00105	48 63 c6	 movsxd	 rax, esi
  00108	48 01 47 10	 add	 QWORD PTR [rdi+16], rax

; 443  :     if (strm->avail_in >= state->size) {

  0010c	8b 9f 88 00 00
	00		 mov	 ebx, DWORD PTR [rdi+136]
  00112	8b 47 28	 mov	 eax, DWORD PTR [rdi+40]
  00115	3b d8		 cmp	 ebx, eax
  00117	72 58		 jb	 SHORT $LN11@gzvprintf

; 444  :         left = strm->avail_in - state->size;
; 445  :         strm->avail_in = state->size;
; 446  :         if (gz_comp(state, Z_NO_FLUSH) == -1)

  00119	33 d2		 xor	 edx, edx
  0011b	89 87 88 00 00
	00		 mov	 DWORD PTR [rdi+136], eax
  00121	48 8b cf	 mov	 rcx, rdi
  00124	2b d8		 sub	 ebx, eax
  00126	e8 00 00 00 00	 call	 gz_comp
  0012b	83 f8 ff	 cmp	 eax, -1
  0012e	75 1e		 jne	 SHORT $LN12@gzvprintf

; 447  :             return state->err;

  00130	8b 47 74	 mov	 eax, DWORD PTR [rdi+116]
$LN20@gzvprintf:
  00133	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00138	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]

; 453  : }

  0013d	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  00142	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  00147	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0014b	41 5e		 pop	 r14
  0014d	c3		 ret	 0
$LN12@gzvprintf:

; 448  :         memmove(state->in, state->in + state->size, left);

  0014e	48 8b 4f 30	 mov	 rcx, QWORD PTR [rdi+48]
  00152	8b 57 28	 mov	 edx, DWORD PTR [rdi+40]
  00155	48 03 d1	 add	 rdx, rcx
  00158	44 8b c3	 mov	 r8d, ebx
  0015b	e8 00 00 00 00	 call	 memmove

; 449  :         strm->next_in = state->in;

  00160	48 8b 4f 30	 mov	 rcx, QWORD PTR [rdi+48]
  00164	48 89 8f 80 00
	00 00		 mov	 QWORD PTR [rdi+128], rcx

; 450  :         strm->avail_in = left;

  0016b	89 9f 88 00 00
	00		 mov	 DWORD PTR [rdi+136], ebx
$LN11@gzvprintf:

; 451  :     }
; 452  :     return len;

  00171	8b c6		 mov	 eax, esi
  00173	eb be		 jmp	 SHORT $LN20@gzvprintf
$LN10@gzvprintf:

; 438  :         return 0;

  00175	33 c0		 xor	 eax, eax
  00177	eb ba		 jmp	 SHORT $LN20@gzvprintf
$LN4@gzvprintf:

; 453  : }

  00179	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  0017e	b8 fe ff ff ff	 mov	 eax, -2
  00183	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  00188	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0018c	41 5e		 pop	 r14
  0018e	c3		 ret	 0
gzvprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\gzwrite.c
;	COMDAT gzprintf
_TEXT	SEGMENT
file$ = 48
format$ = 56
gzprintf PROC						; COMDAT

; 456  : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 457  :     va_list va;
; 458  :     int ret;
; 459  : 
; 460  :     va_start(va, format);

  00013	4c 8d 44 24 40	 lea	 r8, QWORD PTR format$[rsp+8]

; 461  :     ret = gzvprintf(file, format, va);

  00018	e8 00 00 00 00	 call	 gzvprintf

; 462  :     va_end(va);
; 463  :     return ret;
; 464  : }

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
gzprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\gzwrite.c
;	COMDAT gzflush
_TEXT	SEGMENT
file$ = 48
flush$ = 56
gzflush	PROC						; COMDAT

; 560  : {

$LN14:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	8b fa		 mov	 edi, edx
  0000c	48 8b d9	 mov	 rbx, rcx

; 561  :     gz_statep state;
; 562  : 
; 563  :     /* get internal structure */
; 564  :     if (file == NULL)

  0000f	48 85 c9	 test	 rcx, rcx
  00012	74 47		 je	 SHORT $LN4@gzflush

; 565  :         return Z_STREAM_ERROR;
; 566  :     state = (gz_statep)file;
; 567  : 
; 568  :     /* check that we're writing and that there's no error */
; 569  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  00014	81 79 18 b1 79
	00 00		 cmp	 DWORD PTR [rcx+24], 31153 ; 000079b1H
  0001b	75 3e		 jne	 SHORT $LN4@gzflush
  0001d	83 79 74 00	 cmp	 DWORD PTR [rcx+116], 0
  00021	75 38		 jne	 SHORT $LN4@gzflush

; 570  :         return Z_STREAM_ERROR;
; 571  : 
; 572  :     /* check flush parameter */
; 573  :     if (flush < 0 || flush > Z_FINISH)

  00023	83 fa 04	 cmp	 edx, 4
  00026	77 33		 ja	 SHORT $LN4@gzflush

; 574  :         return Z_STREAM_ERROR;
; 575  : 
; 576  :     /* check for seek request */
; 577  :     if (state->seek) {

  00028	83 79 70 00	 cmp	 DWORD PTR [rcx+112], 0
  0002c	74 15		 je	 SHORT $LN11@gzflush

; 578  :         state->seek = 0;
; 579  :         if (gz_zero(state, state->skip) == -1)

  0002e	48 8b 51 68	 mov	 rdx, QWORD PTR [rcx+104]
  00032	c7 41 70 00 00
	00 00		 mov	 DWORD PTR [rcx+112], 0
  00039	e8 00 00 00 00	 call	 gz_zero
  0003e	83 f8 ff	 cmp	 eax, -1
  00041	74 0a		 je	 SHORT $LN12@gzflush
$LN11@gzflush:

; 580  :             return state->err;
; 581  :     }
; 582  : 
; 583  :     /* compress remaining data with requested flush */
; 584  :     (void)gz_comp(state, flush);

  00043	8b d7		 mov	 edx, edi
  00045	48 8b cb	 mov	 rcx, rbx
  00048	e8 00 00 00 00	 call	 gz_comp
$LN12@gzflush:

; 585  :     return state->err;
; 586  : }

  0004d	8b 43 74	 mov	 eax, DWORD PTR [rbx+116]
  00050	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00055	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00059	5f		 pop	 rdi
  0005a	c3		 ret	 0
$LN4@gzflush:
  0005b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00060	b8 fe ff ff ff	 mov	 eax, -2
  00065	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00069	5f		 pop	 rdi
  0006a	c3		 ret	 0
gzflush	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\gzwrite.c
;	COMDAT gzsetparams
_TEXT	SEGMENT
file$ = 48
level$ = 56
strategy$ = 64
gzsetparams PROC					; COMDAT

; 593  : {

$LN16:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	41 8b f8	 mov	 edi, r8d
  00017	8b f2		 mov	 esi, edx
  00019	48 8b d9	 mov	 rbx, rcx

; 594  :     gz_statep state;
; 595  :     z_streamp strm;
; 596  : 
; 597  :     /* get internal structure */
; 598  :     if (file == NULL)

  0001c	48 85 c9	 test	 rcx, rcx
  0001f	74 76		 je	 SHORT $LN4@gzsetparam

; 599  :         return Z_STREAM_ERROR;
; 600  :     state = (gz_statep)file;
; 601  :     strm = &(state->strm);
; 602  : 
; 603  :     /* check that we're writing and that there's no error */
; 604  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  00021	81 79 18 b1 79
	00 00		 cmp	 DWORD PTR [rcx+24], 31153 ; 000079b1H
  00028	75 6d		 jne	 SHORT $LN4@gzsetparam
  0002a	83 79 74 00	 cmp	 DWORD PTR [rcx+116], 0
  0002e	75 67		 jne	 SHORT $LN4@gzsetparam

; 606  : 
; 607  :     /* if no change is requested, then do nothing */
; 608  :     if (level == state->level && strategy == state->strategy)

  00030	3b 51 58	 cmp	 edx, DWORD PTR [rcx+88]
  00033	75 06		 jne	 SHORT $LN5@gzsetparam
  00035	44 3b 41 5c	 cmp	 r8d, DWORD PTR [rcx+92]
  00039	74 58		 je	 SHORT $LN13@gzsetparam
$LN5@gzsetparam:

; 609  :         return Z_OK;
; 610  : 
; 611  :     /* check for seek request */
; 612  :     if (state->seek) {

  0003b	83 79 70 00	 cmp	 DWORD PTR [rcx+112], 0
  0003f	74 1a		 je	 SHORT $LN12@gzsetparam

; 613  :         state->seek = 0;
; 614  :         if (gz_zero(state, state->skip) == -1)

  00041	48 8b 51 68	 mov	 rdx, QWORD PTR [rcx+104]
  00045	c7 41 70 00 00
	00 00		 mov	 DWORD PTR [rcx+112], 0
  0004c	e8 00 00 00 00	 call	 gz_zero
  00051	83 f8 ff	 cmp	 eax, -1
  00054	75 05		 jne	 SHORT $LN12@gzsetparam
$LN14@gzsetparam:

; 627  :     return Z_OK;
; 628  : }

  00056	8b 43 74	 mov	 eax, DWORD PTR [rbx+116]
  00059	eb 41		 jmp	 SHORT $LN1@gzsetparam
$LN12@gzsetparam:

; 615  :             return state->err;
; 616  :     }
; 617  : 
; 618  :     /* change compression parameters for subsequent input */
; 619  :     if (state->size) {

  0005b	83 7b 28 00	 cmp	 DWORD PTR [rbx+40], 0
  0005f	74 2c		 je	 SHORT $LN8@gzsetparam

; 620  :         /* flush previous input with previous parameters before changing */
; 621  :         if (strm->avail_in && gz_comp(state, Z_BLOCK) == -1)

  00061	83 bb 88 00 00
	00 00		 cmp	 DWORD PTR [rbx+136], 0
  00068	74 12		 je	 SHORT $LN9@gzsetparam
  0006a	ba 05 00 00 00	 mov	 edx, 5
  0006f	48 8b cb	 mov	 rcx, rbx
  00072	e8 00 00 00 00	 call	 gz_comp
  00077	83 f8 ff	 cmp	 eax, -1
  0007a	74 da		 je	 SHORT $LN14@gzsetparam
$LN9@gzsetparam:

; 622  :             return state->err;
; 623  :         deflateParams(strm, level, strategy);

  0007c	44 8b c7	 mov	 r8d, edi
  0007f	48 8d 8b 80 00
	00 00		 lea	 rcx, QWORD PTR [rbx+128]
  00086	8b d6		 mov	 edx, esi
  00088	e8 00 00 00 00	 call	 deflateParams
$LN8@gzsetparam:

; 624  :     }
; 625  :     state->level = level;

  0008d	89 73 58	 mov	 DWORD PTR [rbx+88], esi

; 626  :     state->strategy = strategy;

  00090	89 7b 5c	 mov	 DWORD PTR [rbx+92], edi
$LN13@gzsetparam:

; 627  :     return Z_OK;
; 628  : }

  00093	33 c0		 xor	 eax, eax
  00095	eb 05		 jmp	 SHORT $LN1@gzsetparam
$LN4@gzsetparam:

; 605  :         return Z_STREAM_ERROR;

  00097	b8 fe ff ff ff	 mov	 eax, -2
$LN1@gzsetparam:

; 627  :     return Z_OK;
; 628  : }

  0009c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000a1	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000a6	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000ab	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000af	5f		 pop	 rdi
  000b0	c3		 ret	 0
gzsetparams ENDP
_TEXT	ENDS
END
