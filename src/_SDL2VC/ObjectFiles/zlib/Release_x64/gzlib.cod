; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30142.1 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_07EBNKNFJN@?$DMfd?3?$CFd?$DO@		; `string'
PUBLIC	??_C@_0O@BNNCBLEN@out?5of?5memory@		; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_02LMMGGCAJ@?3?5@				; `string'
PUBLIC	??_C@_06DIJPEION@?$CFs?$CFs?$CFs@		; `string'
EXTRN	__imp_malloc:PROC
EXTRN	__imp_free:PROC
EXTRN	__imp___stdio_common_vsprintf:PROC
EXTRN	__imp_wcstombs:PROC
EXTRN	__imp__open:PROC
EXTRN	__imp__wopen:PROC
EXTRN	__imp__lseeki64:PROC
;	COMDAT ??_C@_06DIJPEION@?$CFs?$CFs?$CFs@
CONST	SEGMENT
??_C@_06DIJPEION@?$CFs?$CFs?$CFs@ DB '%s%s%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02LMMGGCAJ@?3?5@
CONST	SEGMENT
??_C@_02LMMGGCAJ@?3?5@ DB ': ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BNNCBLEN@out?5of?5memory@
CONST	SEGMENT
??_C@_0O@BNNCBLEN@out?5of?5memory@ DB 'out of memory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07EBNKNFJN@?$DMfd?3?$CFd?$DO@
CONST	SEGMENT
??_C@_07EBNKNFJN@?$DMfd?3?$CFd?$DO@ DB '<fd:%d>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
PUBLIC	gz_error
PUBLIC	gzclearerr
PUBLIC	gzerror
PUBLIC	gzeof
PUBLIC	gzoffset
PUBLIC	gzoffset64
PUBLIC	gztell
PUBLIC	gztell64
PUBLIC	gzseek
PUBLIC	gzseek64
PUBLIC	gzrewind
PUBLIC	gzbuffer
PUBLIC	gzopen_w
PUBLIC	gzdopen
PUBLIC	gzopen
PUBLIC	snprintf
PUBLIC	vsnprintf
PUBLIC	__local_stdio_printf_options
;	COMDAT pdata
pdata	SEGMENT
$pdata$gz_error DD imagerel $LN15
	DD	imagerel $LN15+253
	DD	imagerel $unwind$gz_error
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gzoffset DD imagerel $LN4
	DD	imagerel $LN4+31
	DD	imagerel $unwind$gzoffset
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gzoffset64 DD imagerel $LN9
	DD	imagerel $LN9+89
	DD	imagerel $unwind$gzoffset64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gztell DD imagerel $LN4
	DD	imagerel $LN4+32
	DD	imagerel $unwind$gztell
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gzseek DD imagerel $LN4
	DD	imagerel $LN4+34
	DD	imagerel $unwind$gzseek
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gzseek64 DD imagerel $LN27
	DD	imagerel $LN27+344
	DD	imagerel $unwind$gzseek64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gzrewind DD imagerel $LN8
	DD	imagerel $LN8+84
	DD	imagerel $unwind$gzrewind
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gzdopen DD imagerel $LN6
	DD	imagerel $LN6+129
	DD	imagerel $unwind$gzdopen
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gz_open DD imagerel gz_open
	DD	imagerel gz_open+64
	DD	imagerel $unwind$gz_open
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$gz_open DD imagerel gz_open+64
	DD	imagerel gz_open+620
	DD	imagerel $chain$1$gz_open
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$gz_open DD imagerel gz_open+620
	DD	imagerel gz_open+668
	DD	imagerel $chain$3$gz_open
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$gz_open DD imagerel gz_open+668
	DD	imagerel gz_open+814
	DD	imagerel $chain$4$gz_open
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gz_reset DD imagerel gz_reset
	DD	imagerel gz_reset+72
	DD	imagerel $unwind$gz_reset
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$snprintf DD imagerel $LN6
	DD	imagerel $LN6+92
	DD	imagerel $unwind$snprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$vsnprintf DD imagerel $LN4
	DD	imagerel $LN4+104
	DD	imagerel $unwind$vsnprintf
;	COMDAT xdata
xdata	SEGMENT
$unwind$vsnprintf DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$snprintf DD 051201H
	DD	0700e6212H
	DD	0500c600dH
	DD	0300bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gz_reset DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$gz_open DD 021H
	DD	imagerel gz_open
	DD	imagerel gz_open+64
	DD	imagerel $unwind$gz_open
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$gz_open DD 040021H
	DD	0b7400H
	DD	0a5400H
	DD	imagerel gz_open
	DD	imagerel gz_open+64
	DD	imagerel $unwind$gz_open
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$gz_open DD 040a21H
	DD	0b740aH
	DD	0a5405H
	DD	imagerel gz_open
	DD	imagerel gz_open+64
	DD	imagerel $unwind$gz_open
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gz_open DD 081201H
	DD	0c3412H
	DD	0f00e3212H
	DD	0d00ae00cH
	DD	06006c008H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gzdopen DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gzrewind DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gzseek64 DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gzseek DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gztell DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gzoffset64 DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gzoffset DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gz_error DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00007	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\stdio.h
;	COMDAT vsnprintf
_TEXT	SEGMENT
_Buffer$ = 64
_BufferCount$ = 72
_Format$ = 80
_ArgList$ = 88
vsnprintf PROC						; COMDAT

; 1438 :     {

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00014	49 8b d9	 mov	 rbx, r9
  00017	49 8b f8	 mov	 rdi, r8
  0001a	48 8b f2	 mov	 rsi, rdx
  0001d	48 8b e9	 mov	 rbp, rcx

; 1439 :         int const _Result = __stdio_common_vsprintf(

  00020	e8 00 00 00 00	 call	 __local_stdio_printf_options
  00025	48 89 5c 24 28	 mov	 QWORD PTR [rsp+40], rbx
  0002a	4c 8b cf	 mov	 r9, rdi
  0002d	4c 8b c6	 mov	 r8, rsi
  00030	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00039	48 8b d5	 mov	 rdx, rbp
  0003c	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0003f	48 83 c9 02	 or	 rcx, 2
  00043	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsprintf

; 1440 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1441 :             _Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1442 : 
; 1443 :         return _Result < 0 ? -1 : _Result;
; 1444 :     }

  00049	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0004e	b9 ff ff ff ff	 mov	 ecx, -1
  00053	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00058	85 c0		 test	 eax, eax
  0005a	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  0005f	0f 48 c1	 cmovs	 eax, ecx
  00062	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00066	5f		 pop	 rdi
  00067	c3		 ret	 0
vsnprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\stdio.h
;	COMDAT snprintf
_TEXT	SEGMENT
_Buffer$ = 96
_BufferCount$ = 104
_Format$ = 112
snprintf PROC						; COMDAT

; 1927 :     {

$LN6:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  0000a	53		 push	 rbx
  0000b	55		 push	 rbp
  0000c	56		 push	 rsi
  0000d	57		 push	 rdi
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00012	49 8b f0	 mov	 rsi, r8

; 1928 :         int _Result;
; 1929 :         va_list _ArgList;
; 1930 :         __crt_va_start(_ArgList, _Format);

  00015	48 8d 6c 24 78	 lea	 rbp, QWORD PTR _Format$[rsp+8]
  0001a	48 8b da	 mov	 rbx, rdx
  0001d	48 8b f9	 mov	 rdi, rcx

; 1439 :         int const _Result = __stdio_common_vsprintf(

  00020	e8 00 00 00 00	 call	 __local_stdio_printf_options
  00025	48 89 6c 24 28	 mov	 QWORD PTR [rsp+40], rbp
  0002a	4c 8b ce	 mov	 r9, rsi
  0002d	4c 8b c3	 mov	 r8, rbx
  00030	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00039	48 8b d7	 mov	 rdx, rdi
  0003c	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0003f	48 83 c9 02	 or	 rcx, 2
  00043	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsprintf

; 1440 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1441 :             _Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1442 : 
; 1443 :         return _Result < 0 ? -1 : _Result;

  00049	85 c0		 test	 eax, eax
  0004b	b9 ff ff ff ff	 mov	 ecx, -1
  00050	0f 48 c1	 cmovs	 eax, ecx

; 1931 :         _Result = vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
; 1932 :         __crt_va_end(_ArgList);
; 1933 :         return _Result;
; 1934 :     }

  00053	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00057	5f		 pop	 rdi
  00058	5e		 pop	 rsi
  00059	5d		 pop	 rbp
  0005a	5b		 pop	 rbx
  0005b	c3		 ret	 0
snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\gzlib.c
;	COMDAT gz_reset
_TEXT	SEGMENT
state$ = 48
gz_reset PROC						; COMDAT

; 76   : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 77   :     state->x.have = 0;              /* no output data available */

  0000a	33 ff		 xor	 edi, edi
  0000c	48 8b d9	 mov	 rbx, rcx

; 78   :     if (state->mode == GZ_READ) {   /* for reading ... */

  0000f	81 79 18 4f 1c
	00 00		 cmp	 DWORD PTR [rcx+24], 7247 ; 00001c4fH
  00016	89 39		 mov	 DWORD PTR [rcx], edi
  00018	75 09		 jne	 SHORT $LN2@gz_reset

; 79   :         state->eof = 0;             /* not at end of file */

  0001a	48 89 79 50	 mov	 QWORD PTR [rcx+80], rdi

; 80   :         state->past = 0;            /* have not read past end yet */
; 81   :         state->how = LOOK;          /* look for gzip header */

  0001e	89 79 44	 mov	 DWORD PTR [rcx+68], edi

; 82   :     }

  00021	eb 03		 jmp	 SHORT $LN3@gz_reset
$LN2@gz_reset:

; 83   :     else                            /* for writing ... */
; 84   :         state->reset = 0;           /* no deflateReset pending */

  00023	89 79 60	 mov	 DWORD PTR [rcx+96], edi
$LN3@gz_reset:

; 85   :     state->seek = 0;                /* no seek request pending */
; 86   :     gz_error(state, Z_OK, NULL);    /* clear error */

  00026	45 33 c0	 xor	 r8d, r8d
  00029	89 79 70	 mov	 DWORD PTR [rcx+112], edi
  0002c	33 d2		 xor	 edx, edx
  0002e	e8 00 00 00 00	 call	 gz_error

; 87   :     state->x.pos = 0;               /* no uncompressed data yet */

  00033	48 89 7b 10	 mov	 QWORD PTR [rbx+16], rdi

; 88   :     state->strm.avail_in = 0;       /* no input data yet */

  00037	89 bb 88 00 00
	00		 mov	 DWORD PTR [rbx+136], edi

; 89   : }

  0003d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00042	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00046	5f		 pop	 rdi
  00047	c3		 ret	 0
gz_reset ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\gzlib.c
;	COMDAT gz_open
_TEXT	SEGMENT
path$ = 80
fd$ = 88
mode$ = 96
gz_open	PROC						; COMDAT

; 93   : {

  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	56		 push	 rsi
  00006	41 54		 push	 r12
  00008	41 55		 push	 r13
  0000a	41 56		 push	 r14
  0000c	41 57		 push	 r15
  0000e	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 94   :     gz_statep state;
; 95   :     z_size_t len;
; 96   :     int oflag;
; 97   : #ifdef O_CLOEXEC
; 98   :     int cloexec = 0;
; 99   : #endif
; 100  : #ifdef O_EXCL
; 101  :     int exclusive = 0;

  00012	45 33 ed	 xor	 r13d, r13d
  00015	4d 8b f0	 mov	 r14, r8
  00018	8b f2		 mov	 esi, edx
  0001a	4c 8b f9	 mov	 r15, rcx
  0001d	45 8b e5	 mov	 r12d, r13d

; 102  : #endif
; 103  : 
; 104  :     /* check input */
; 105  :     if (path == NULL)

  00020	48 85 c9	 test	 rcx, rcx
  00023	0f 84 73 02 00
	00		 je	 $LN50@gz_open

; 106  :         return NULL;
; 107  : 
; 108  :     /* allocate gzFile structure to return */
; 109  :     state = (gz_statep)malloc(sizeof(gz_state));

  00029	b9 d8 00 00 00	 mov	 ecx, 216		; 000000d8H
  0002e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00034	48 8b d8	 mov	 rbx, rax

; 110  :     if (state == NULL)

  00037	48 85 c0	 test	 rax, rax
  0003a	0f 84 5c 02 00
	00		 je	 $LN50@gz_open

; 111  :         return NULL;
; 112  :     state->size = 0;            /* no buffers allocated yet */

  00040	48 89 6c 24 50	 mov	 QWORD PTR [rsp+80], rbp
  00045	48 89 7c 24 58	 mov	 QWORD PTR [rsp+88], rdi

; 113  :     state->want = GZBUFSIZE;    /* requested buffer size */
; 114  :     state->msg = NULL;          /* no error message yet */
; 115  : 
; 116  :     /* interpret mode */
; 117  :     state->mode = GZ_NONE;
; 118  :     state->level = Z_DEFAULT_COMPRESSION;

  0004a	48 c7 c7 ff ff
	ff ff		 mov	 rdi, -1
  00051	89 78 58	 mov	 DWORD PTR [rax+88], edi
  00054	44 89 68 28	 mov	 DWORD PTR [rax+40], r13d
  00058	c7 40 2c 00 20
	00 00		 mov	 DWORD PTR [rax+44], 8192 ; 00002000H
  0005f	4c 89 68 78	 mov	 QWORD PTR [rax+120], r13
  00063	44 89 68 18	 mov	 DWORD PTR [rax+24], r13d

; 119  :     state->strategy = Z_DEFAULT_STRATEGY;

  00067	44 89 68 5c	 mov	 DWORD PTR [rax+92], r13d

; 120  :     state->direct = 0;

  0006b	44 89 68 40	 mov	 DWORD PTR [rax+64], r13d

; 121  :     while (*mode) {

  0006f	41 0f b6 06	 movzx	 eax, BYTE PTR [r14]
  00073	84 c0		 test	 al, al
  00075	0f 84 c9 01 00
	00		 je	 $LN49@gz_open
  0007b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:__ImageBase
$LL2@gz_open:

; 122  :         if (*mode >= '0' && *mode <= '9')

  00082	0f be c8	 movsx	 ecx, al
  00085	2c 30		 sub	 al, 48			; 00000030H
  00087	3c 09		 cmp	 al, 9
  00089	77 08		 ja	 SHORT $LN8@gz_open

; 123  :             state->level = *mode - '0';

  0008b	8d 41 d0	 lea	 eax, DWORD PTR [rcx-48]
  0008e	89 43 58	 mov	 DWORD PTR [rbx+88], eax
  00091	eb 6d		 jmp	 SHORT $LN21@gz_open
$LN8@gz_open:

; 124  :         else
; 125  :             switch (*mode) {

  00093	83 c1 d5	 add	 ecx, -43		; ffffffffffffffd5H
  00096	83 f9 4d	 cmp	 ecx, 77			; 0000004dH
  00099	77 65		 ja	 SHORT $LN21@gz_open
  0009b	48 63 c1	 movsxd	 rax, ecx
  0009e	0f b6 84 02 00
	00 00 00	 movzx	 eax, BYTE PTR $LN52@gz_open[rdx+rax]
  000a6	8b 8c 82 00 00
	00 00		 mov	 ecx, DWORD PTR $LN53@gz_open[rdx+rax*4]
  000ad	48 03 ca	 add	 rcx, rdx
  000b0	ff e1		 jmp	 rcx
$LN10@gz_open:

; 126  :             case 'r':
; 127  :                 state->mode = GZ_READ;

  000b2	c7 43 18 4f 1c
	00 00		 mov	 DWORD PTR [rbx+24], 7247 ; 00001c4fH

; 128  :                 break;

  000b9	eb 45		 jmp	 SHORT $LN21@gz_open
$LN11@gz_open:

; 129  : #ifndef NO_GZCOMPRESS
; 130  :             case 'w':
; 131  :                 state->mode = GZ_WRITE;

  000bb	c7 43 18 b1 79
	00 00		 mov	 DWORD PTR [rbx+24], 31153 ; 000079b1H

; 132  :                 break;

  000c2	eb 3c		 jmp	 SHORT $LN21@gz_open
$LN12@gz_open:

; 133  :             case 'a':
; 134  :                 state->mode = GZ_APPEND;

  000c4	c7 43 18 01 00
	00 00		 mov	 DWORD PTR [rbx+24], 1

; 135  :                 break;

  000cb	eb 33		 jmp	 SHORT $LN21@gz_open
$LN15@gz_open:

; 136  : #endif
; 137  :             case '+':       /* can't read and write at the same time */
; 138  :                 free(state);
; 139  :                 return NULL;
; 140  :             case 'b':       /* ignore -- will request binary anyway */
; 141  :                 break;
; 142  : #ifdef O_CLOEXEC
; 143  :             case 'e':
; 144  :                 cloexec = 1;
; 145  :                 break;
; 146  : #endif
; 147  : #ifdef O_EXCL
; 148  :             case 'x':
; 149  :                 exclusive = 1;

  000cd	41 bc 01 00 00
	00		 mov	 r12d, 1

; 150  :                 break;

  000d3	eb 2b		 jmp	 SHORT $LN21@gz_open
$LN16@gz_open:

; 151  : #endif
; 152  :             case 'f':
; 153  :                 state->strategy = Z_FILTERED;

  000d5	c7 43 5c 01 00
	00 00		 mov	 DWORD PTR [rbx+92], 1

; 154  :                 break;

  000dc	eb 22		 jmp	 SHORT $LN21@gz_open
$LN17@gz_open:

; 155  :             case 'h':
; 156  :                 state->strategy = Z_HUFFMAN_ONLY;

  000de	c7 43 5c 02 00
	00 00		 mov	 DWORD PTR [rbx+92], 2

; 157  :                 break;

  000e5	eb 19		 jmp	 SHORT $LN21@gz_open
$LN18@gz_open:

; 158  :             case 'R':
; 159  :                 state->strategy = Z_RLE;

  000e7	c7 43 5c 03 00
	00 00		 mov	 DWORD PTR [rbx+92], 3

; 160  :                 break;

  000ee	eb 10		 jmp	 SHORT $LN21@gz_open
$LN19@gz_open:

; 161  :             case 'F':
; 162  :                 state->strategy = Z_FIXED;

  000f0	c7 43 5c 04 00
	00 00		 mov	 DWORD PTR [rbx+92], 4

; 163  :                 break;

  000f7	eb 07		 jmp	 SHORT $LN21@gz_open
$LN20@gz_open:

; 164  :             case 'T':
; 165  :                 state->direct = 1;

  000f9	c7 43 40 01 00
	00 00		 mov	 DWORD PTR [rbx+64], 1
$LN21@gz_open:

; 121  :     while (*mode) {

  00100	41 0f b6 46 01	 movzx	 eax, BYTE PTR [r14+1]

; 166  :                 break;
; 167  :             default:        /* could consider as an error, but just ignore */
; 168  :                 ;
; 169  :             }
; 170  :         ++mode;

  00105	49 ff c6	 inc	 r14
  00108	84 c0		 test	 al, al
  0010a	0f 85 72 ff ff
	ff		 jne	 $LL2@gz_open

; 171  :     }
; 172  : 
; 173  :     /* must provide an "r", "w", or "a" */
; 174  :     if (state->mode == GZ_NONE) {

  00110	8b 43 18	 mov	 eax, DWORD PTR [rbx+24]
  00113	85 c0		 test	 eax, eax
  00115	0f 84 29 01 00
	00		 je	 $LN49@gz_open

; 175  :         free(state);
; 176  :         return NULL;
; 177  :     }
; 178  : 
; 179  :     /* can't force transparent read */
; 180  :     if (state->mode == GZ_READ) {

  0011b	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00120	75 11		 jne	 SHORT $LN23@gz_open

; 181  :         if (state->direct) {

  00122	44 39 6b 40	 cmp	 DWORD PTR [rbx+64], r13d
  00126	0f 85 18 01 00
	00		 jne	 $LN49@gz_open

; 182  :             free(state);
; 183  :             return NULL;
; 184  :         }
; 185  :         state->direct = 1;      /* for empty file */

  0012c	c7 43 40 01 00
	00 00		 mov	 DWORD PTR [rbx+64], 1
$LN23@gz_open:

; 186  :     }
; 187  : 
; 188  :     /* save the path name for error messages */
; 189  : #ifdef WIDECHAR
; 190  :     if (fd == -2) {

  00133	83 fe fe	 cmp	 esi, -2
  00136	75 1c		 jne	 SHORT $LL25@gz_open

; 191  :         len = wcstombs(NULL, path, 0);

  00138	45 33 c0	 xor	 r8d, r8d
  0013b	49 8b d7	 mov	 rdx, r15
  0013e	33 c9		 xor	 ecx, ecx
  00140	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_wcstombs
  00146	48 8b f8	 mov	 rdi, rax

; 192  :         if (len == (z_size_t)-1)

  00149	48 83 f8 ff	 cmp	 rax, -1
  0014d	75 0e		 jne	 SHORT $LN26@gz_open

; 193  :             len = 0;

  0014f	49 8b fd	 mov	 rdi, r13

; 194  :     }

  00152	eb 09		 jmp	 SHORT $LN26@gz_open
$LL25@gz_open:

; 195  :     else
; 196  : #endif
; 197  :         len = strlen((const char *)path);

  00154	48 ff c7	 inc	 rdi
  00157	45 38 2c 3f	 cmp	 BYTE PTR [r15+rdi], r13b
  0015b	75 f7		 jne	 SHORT $LL25@gz_open
$LN26@gz_open:

; 198  :     state->path = (char *)malloc(len + 1);

  0015d	48 8d 4f 01	 lea	 rcx, QWORD PTR [rdi+1]
  00161	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00167	48 89 43 20	 mov	 QWORD PTR [rbx+32], rax

; 199  :     if (state->path == NULL) {

  0016b	48 85 c0	 test	 rax, rax
  0016e	0f 84 d0 00 00
	00		 je	 $LN49@gz_open

; 200  :         free(state);
; 201  :         return NULL;
; 202  :     }
; 203  : #ifdef WIDECHAR
; 204  :     if (fd == -2)

  00174	83 fe fe	 cmp	 esi, -2
  00177	75 1c		 jne	 SHORT $LN29@gz_open

; 205  :         if (len)

  00179	48 85 ff	 test	 rdi, rdi
  0017c	74 12		 je	 SHORT $LN31@gz_open

; 206  :             wcstombs(state->path, path, len + 1);

  0017e	4c 8d 47 01	 lea	 r8, QWORD PTR [rdi+1]
  00182	49 8b d7	 mov	 rdx, r15
  00185	48 8b c8	 mov	 rcx, rax
  00188	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_wcstombs
  0018e	eb 1b		 jmp	 SHORT $LN30@gz_open
$LN31@gz_open:

; 207  :         else
; 208  :             *(state->path) = 0;

  00190	44 88 28	 mov	 BYTE PTR [rax], r13b
  00193	eb 16		 jmp	 SHORT $LN30@gz_open
$LN29@gz_open:

; 209  :     else
; 210  : #endif
; 211  : #if !defined(NO_snprintf) && !defined(NO_vsnprintf)
; 212  :         (void)snprintf(state->path, len + 1, "%s", (const char *)path);

  00195	4d 8b cf	 mov	 r9, r15
  00198	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  0019f	48 8d 57 01	 lea	 rdx, QWORD PTR [rdi+1]
  001a3	48 8b c8	 mov	 rcx, rax
  001a6	e8 00 00 00 00	 call	 snprintf
$LN30@gz_open:

; 213  : #else
; 214  :         strcpy(state->path, path);
; 215  : #endif
; 216  : 
; 217  :     /* compute the flags for open() */
; 218  :     oflag =

  001ab	8b 43 18	 mov	 eax, DWORD PTR [rbx+24]
  001ae	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  001b3	75 05		 jne	 SHORT $LN38@gz_open
  001b5	41 8b d5	 mov	 edx, r13d
  001b8	eb 24		 jmp	 SHORT $LN39@gz_open
$LN38@gz_open:
  001ba	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  001bf	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  001c4	ba 08 00 00 00	 mov	 edx, 8
  001c9	b8 01 01 00 00	 mov	 eax, 257		; 00000101H
  001ce	0f 44 d1	 cmove	 edx, ecx
  001d1	45 85 e4	 test	 r12d, r12d
  001d4	b9 01 05 00 00	 mov	 ecx, 1281		; 00000501H
  001d9	0f 45 c1	 cmovne	 eax, ecx
  001dc	0b d0		 or	 edx, eax
$LN39@gz_open:
  001de	0f ba ea 0f	 bts	 edx, 15

; 219  : #ifdef O_LARGEFILE
; 220  :         O_LARGEFILE |
; 221  : #endif
; 222  : #ifdef O_BINARY
; 223  :         O_BINARY |
; 224  : #endif
; 225  : #ifdef O_CLOEXEC
; 226  :         (cloexec ? O_CLOEXEC : 0) |
; 227  : #endif
; 228  :         (state->mode == GZ_READ ?
; 229  :          O_RDONLY :
; 230  :          (O_WRONLY | O_CREAT |
; 231  : #ifdef O_EXCL
; 232  :           (exclusive ? O_EXCL : 0) |
; 233  : #endif
; 234  :           (state->mode == GZ_WRITE ?
; 235  :            O_TRUNC :
; 236  :            O_APPEND)));
; 237  : 
; 238  :     /* open the file with the appropriate flags (or just use fd) */
; 239  :     state->fd = fd > -1 ? fd : (

  001e2	83 fe ff	 cmp	 esi, -1
  001e5	7e 2d		 jle	 SHORT $LN42@gz_open
  001e7	89 73 1c	 mov	 DWORD PTR [rbx+28], esi
$LN33@gz_open:

; 248  :     }
; 249  :     if (state->mode == GZ_APPEND) {

  001ea	8b 43 18	 mov	 eax, DWORD PTR [rbx+24]
  001ed	83 f8 01	 cmp	 eax, 1
  001f0	75 7a		 jne	 SHORT $LN34@gz_open

; 250  :         LSEEK(state->fd, 0, SEEK_END);  /* so gzoffset() is correct */

  001f2	33 d2		 xor	 edx, edx
  001f4	44 8d 40 01	 lea	 r8d, QWORD PTR [rax+1]
  001f8	8b ce		 mov	 ecx, esi
  001fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64

; 258  :     }
; 259  : 
; 260  :     /* initialize stream */
; 261  :     gz_reset(state);

  00200	48 8b cb	 mov	 rcx, rbx
  00203	c7 43 18 b1 79
	00 00		 mov	 DWORD PTR [rbx+24], 31153 ; 000079b1H
  0020a	e8 00 00 00 00	 call	 gz_reset

; 262  : 
; 263  :     /* return stream */
; 264  :     return (gzFile)state;

  0020f	48 8b c3	 mov	 rax, rbx
  00212	eb 3b		 jmp	 SHORT $LN56@gz_open
$LN42@gz_open:

; 219  : #ifdef O_LARGEFILE
; 220  :         O_LARGEFILE |
; 221  : #endif
; 222  : #ifdef O_BINARY
; 223  :         O_BINARY |
; 224  : #endif
; 225  : #ifdef O_CLOEXEC
; 226  :         (cloexec ? O_CLOEXEC : 0) |
; 227  : #endif
; 228  :         (state->mode == GZ_READ ?
; 229  :          O_RDONLY :
; 230  :          (O_WRONLY | O_CREAT |
; 231  : #ifdef O_EXCL
; 232  :           (exclusive ? O_EXCL : 0) |
; 233  : #endif
; 234  :           (state->mode == GZ_WRITE ?
; 235  :            O_TRUNC :
; 236  :            O_APPEND)));
; 237  : 
; 238  :     /* open the file with the appropriate flags (or just use fd) */
; 239  :     state->fd = fd > -1 ? fd : (

  00214	41 b8 b6 01 00
	00		 mov	 r8d, 438		; 000001b6H
  0021a	49 8b cf	 mov	 rcx, r15
  0021d	83 fe fe	 cmp	 esi, -2
  00220	75 08		 jne	 SHORT $LN40@gz_open
  00222	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wopen
  00228	eb 06		 jmp	 SHORT $LN57@gz_open
$LN40@gz_open:
  0022a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__open
$LN57@gz_open:
  00230	89 43 1c	 mov	 DWORD PTR [rbx+28], eax
  00233	8b f0		 mov	 esi, eax

; 240  : #ifdef WIDECHAR
; 241  :         fd == -2 ? _wopen(path, oflag, 0666) :
; 242  : #endif
; 243  :         _open((const char *)path, oflag, 0666));
; 244  :     if (state->fd == -1) {

  00235	83 f8 ff	 cmp	 eax, -1
  00238	75 b0		 jne	 SHORT $LN33@gz_open

; 245  :         free(state->path);

  0023a	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  0023e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN49@gz_open:

; 246  :         free(state);

  00244	48 8b cb	 mov	 rcx, rbx
  00247	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 247  :         return NULL;

  0024d	33 c0		 xor	 eax, eax
$LN56@gz_open:
  0024f	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  00254	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]

; 265  : }

  00259	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  0025e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00262	41 5f		 pop	 r15
  00264	41 5e		 pop	 r14
  00266	41 5d		 pop	 r13
  00268	41 5c		 pop	 r12
  0026a	5e		 pop	 rsi
  0026b	c3		 ret	 0
$LN34@gz_open:

; 251  :         state->mode = GZ_WRITE;         /* simplify later checks */
; 252  :     }
; 253  : 
; 254  :     /* save the current position for rewinding (only if reading) */
; 255  :     if (state->mode == GZ_READ) {

  0026c	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00271	75 1c		 jne	 SHORT $LN36@gz_open

; 256  :         state->start = LSEEK(state->fd, 0, SEEK_CUR);

  00273	33 d2		 xor	 edx, edx
  00275	8b ce		 mov	 ecx, esi
  00277	44 8d 42 01	 lea	 r8d, QWORD PTR [rdx+1]
  0027b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00281	48 89 43 48	 mov	 QWORD PTR [rbx+72], rax

; 257  :         if (state->start == -1) state->start = 0;

  00285	48 83 f8 ff	 cmp	 rax, -1
  00289	75 04		 jne	 SHORT $LN36@gz_open
  0028b	4c 89 6b 48	 mov	 QWORD PTR [rbx+72], r13
$LN36@gz_open:

; 258  :     }
; 259  : 
; 260  :     /* initialize stream */
; 261  :     gz_reset(state);

  0028f	48 8b cb	 mov	 rcx, rbx
  00292	e8 00 00 00 00	 call	 gz_reset

; 262  : 
; 263  :     /* return stream */
; 264  :     return (gzFile)state;

  00297	48 8b c3	 mov	 rax, rbx
  0029a	eb b3		 jmp	 SHORT $LN56@gz_open
$LN50@gz_open:

; 265  : }

  0029c	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  002a1	33 c0		 xor	 eax, eax
  002a3	48 83 c4 20	 add	 rsp, 32			; 00000020H
  002a7	41 5f		 pop	 r15
  002a9	41 5e		 pop	 r14
  002ab	41 5d		 pop	 r13
  002ad	41 5c		 pop	 r12
  002af	5e		 pop	 rsi
  002b0	c3		 ret	 0
  002b1	0f 1f 00	 npad	 3
$LN53@gz_open:
  002b4	00 00 00 00	 DD	 $LN49@gz_open
  002b8	00 00 00 00	 DD	 $LN19@gz_open
  002bc	00 00 00 00	 DD	 $LN18@gz_open
  002c0	00 00 00 00	 DD	 $LN20@gz_open
  002c4	00 00 00 00	 DD	 $LN12@gz_open
  002c8	00 00 00 00	 DD	 $LN16@gz_open
  002cc	00 00 00 00	 DD	 $LN17@gz_open
  002d0	00 00 00 00	 DD	 $LN10@gz_open
  002d4	00 00 00 00	 DD	 $LN11@gz_open
  002d8	00 00 00 00	 DD	 $LN15@gz_open
  002dc	00 00 00 00	 DD	 $LN21@gz_open
$LN52@gz_open:
  002e0	00		 DB	 0
  002e1	0a		 DB	 10
  002e2	0a		 DB	 10
  002e3	0a		 DB	 10
  002e4	0a		 DB	 10
  002e5	0a		 DB	 10
  002e6	0a		 DB	 10
  002e7	0a		 DB	 10
  002e8	0a		 DB	 10
  002e9	0a		 DB	 10
  002ea	0a		 DB	 10
  002eb	0a		 DB	 10
  002ec	0a		 DB	 10
  002ed	0a		 DB	 10
  002ee	0a		 DB	 10
  002ef	0a		 DB	 10
  002f0	0a		 DB	 10
  002f1	0a		 DB	 10
  002f2	0a		 DB	 10
  002f3	0a		 DB	 10
  002f4	0a		 DB	 10
  002f5	0a		 DB	 10
  002f6	0a		 DB	 10
  002f7	0a		 DB	 10
  002f8	0a		 DB	 10
  002f9	0a		 DB	 10
  002fa	0a		 DB	 10
  002fb	01		 DB	 1
  002fc	0a		 DB	 10
  002fd	0a		 DB	 10
  002fe	0a		 DB	 10
  002ff	0a		 DB	 10
  00300	0a		 DB	 10
  00301	0a		 DB	 10
  00302	0a		 DB	 10
  00303	0a		 DB	 10
  00304	0a		 DB	 10
  00305	0a		 DB	 10
  00306	0a		 DB	 10
  00307	02		 DB	 2
  00308	0a		 DB	 10
  00309	03		 DB	 3
  0030a	0a		 DB	 10
  0030b	0a		 DB	 10
  0030c	0a		 DB	 10
  0030d	0a		 DB	 10
  0030e	0a		 DB	 10
  0030f	0a		 DB	 10
  00310	0a		 DB	 10
  00311	0a		 DB	 10
  00312	0a		 DB	 10
  00313	0a		 DB	 10
  00314	0a		 DB	 10
  00315	0a		 DB	 10
  00316	04		 DB	 4
  00317	0a		 DB	 10
  00318	0a		 DB	 10
  00319	0a		 DB	 10
  0031a	0a		 DB	 10
  0031b	05		 DB	 5
  0031c	0a		 DB	 10
  0031d	06		 DB	 6
  0031e	0a		 DB	 10
  0031f	0a		 DB	 10
  00320	0a		 DB	 10
  00321	0a		 DB	 10
  00322	0a		 DB	 10
  00323	0a		 DB	 10
  00324	0a		 DB	 10
  00325	0a		 DB	 10
  00326	0a		 DB	 10
  00327	07		 DB	 7
  00328	0a		 DB	 10
  00329	0a		 DB	 10
  0032a	0a		 DB	 10
  0032b	0a		 DB	 10
  0032c	08		 DB	 8
  0032d	09		 DB	 9
gz_open	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\gzlib.c
;	COMDAT gzopen
_TEXT	SEGMENT
path$ = 8
mode$ = 16
gzopen	PROC						; COMDAT

; 272  :     return gz_open(path, -1, mode);

  00000	4c 8b c2	 mov	 r8, rdx
  00003	ba ff ff ff ff	 mov	 edx, -1
  00008	e9 00 00 00 00	 jmp	 gz_open
gzopen	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\gzlib.c
;	COMDAT gzdopen
_TEXT	SEGMENT
fd$ = 48
mode$ = 56
gzdopen	PROC						; COMDAT

; 287  : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b f2	 mov	 rsi, rdx
  00012	8b d9		 mov	 ebx, ecx

; 288  :     char *path;         /* identifier for error messages */
; 289  :     gzFile gz;
; 290  : 
; 291  :     if (fd == -1 || (path = (char *)malloc(7 + 3 * sizeof(int))) == NULL)

  00014	83 f9 ff	 cmp	 ecx, -1
  00017	74 56		 je	 SHORT $LN3@gzdopen
  00019	b9 13 00 00 00	 mov	 ecx, 19
  0001e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00024	48 8b f8	 mov	 rdi, rax
  00027	48 85 c0	 test	 rax, rax
  0002a	74 43		 je	 SHORT $LN3@gzdopen

; 292  :         return NULL;
; 293  : #if !defined(NO_snprintf) && !defined(NO_vsnprintf)
; 294  :     (void)snprintf(path, 7 + 3 * sizeof(int), "<fd:%d>", fd);

  0002c	44 8b cb	 mov	 r9d, ebx
  0002f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07EBNKNFJN@?$DMfd?3?$CFd?$DO@
  00036	ba 13 00 00 00	 mov	 edx, 19
  0003b	48 8b c8	 mov	 rcx, rax
  0003e	e8 00 00 00 00	 call	 snprintf

; 295  : #else
; 296  :     sprintf(path, "<fd:%d>", fd);   /* for debugging */
; 297  : #endif
; 298  :     gz = gz_open(path, fd, mode);

  00043	4c 8b c6	 mov	 r8, rsi
  00046	8b d3		 mov	 edx, ebx
  00048	48 8b cf	 mov	 rcx, rdi
  0004b	e8 00 00 00 00	 call	 gz_open

; 299  :     free(path);

  00050	48 8b cf	 mov	 rcx, rdi
  00053	48 8b d8	 mov	 rbx, rax
  00056	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 300  :     return gz;

  0005c	48 8b c3	 mov	 rax, rbx

; 301  : }

  0005f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00064	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00069	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006d	5f		 pop	 rdi
  0006e	c3		 ret	 0
$LN3@gzdopen:
  0006f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00074	33 c0		 xor	 eax, eax
  00076	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0007b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007f	5f		 pop	 rdi
  00080	c3		 ret	 0
gzdopen	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\gzlib.c
;	COMDAT gzopen_w
_TEXT	SEGMENT
path$ = 8
mode$ = 16
gzopen_w PROC						; COMDAT

; 309  :     return gz_open(path, -2, mode);

  00000	4c 8b c2	 mov	 r8, rdx
  00003	ba fe ff ff ff	 mov	 edx, -2
  00008	e9 00 00 00 00	 jmp	 gz_open
gzopen_w ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\gzlib.c
;	COMDAT gzbuffer
_TEXT	SEGMENT
file$ = 8
size$ = 16
gzbuffer PROC						; COMDAT

; 318  :     gz_statep state;
; 319  : 
; 320  :     /* get internal structure and check integrity */
; 321  :     if (file == NULL)

  00000	48 85 c9	 test	 rcx, rcx
  00003	74 2e		 je	 SHORT $LN8@gzbuffer

; 322  :         return -1;
; 323  :     state = (gz_statep)file;
; 324  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  00005	8b 41 18	 mov	 eax, DWORD PTR [rcx+24]
  00008	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  0000d	74 07		 je	 SHORT $LN3@gzbuffer
  0000f	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  00014	75 1d		 jne	 SHORT $LN8@gzbuffer
$LN3@gzbuffer:

; 325  :         return -1;
; 326  : 
; 327  :     /* make sure we haven't already allocated memory */
; 328  :     if (state->size != 0)

  00016	83 79 28 00	 cmp	 DWORD PTR [rcx+40], 0
  0001a	75 17		 jne	 SHORT $LN8@gzbuffer

; 329  :         return -1;
; 330  : 
; 331  :     /* check and set requested size */
; 332  :     if ((size << 1) < size)

  0001c	8d 04 12	 lea	 eax, DWORD PTR [rdx+rdx]
  0001f	3b c2		 cmp	 eax, edx
  00021	72 10		 jb	 SHORT $LN8@gzbuffer

; 334  :     if (size < 2)
; 335  :         size = 2;               /* need two bytes to check magic header */
; 336  :     state->want = size;

  00023	b8 02 00 00 00	 mov	 eax, 2
  00028	3b d0		 cmp	 edx, eax
  0002a	0f 43 c2	 cmovae	 eax, edx
  0002d	89 41 2c	 mov	 DWORD PTR [rcx+44], eax

; 337  :     return 0;

  00030	33 c0		 xor	 eax, eax

; 338  : }

  00032	c3		 ret	 0
$LN8@gzbuffer:

; 333  :         return -1;              /* need to be able to double it */

  00033	b8 ff ff ff ff	 mov	 eax, -1

; 338  : }

  00038	c3		 ret	 0
gzbuffer ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\gzlib.c
;	COMDAT gzrewind
_TEXT	SEGMENT
file$ = 48
gzrewind PROC						; COMDAT

; 343  : {

$LN8:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 344  :     gz_statep state;
; 345  : 
; 346  :     /* get internal structure */
; 347  :     if (file == NULL)

  00009	48 85 c9	 test	 rcx, rcx
  0000c	74 3b		 je	 SHORT $LN4@gzrewind

; 348  :         return -1;
; 349  :     state = (gz_statep)file;
; 350  : 
; 351  :     /* check that we're reading and that there's no error */
; 352  :     if (state->mode != GZ_READ ||

  0000e	81 79 18 4f 1c
	00 00		 cmp	 DWORD PTR [rcx+24], 7247 ; 00001c4fH
  00015	75 32		 jne	 SHORT $LN4@gzrewind
  00017	8b 41 74	 mov	 eax, DWORD PTR [rcx+116]
  0001a	85 c0		 test	 eax, eax
  0001c	74 05		 je	 SHORT $LN3@gzrewind
  0001e	83 f8 fb	 cmp	 eax, -5
  00021	75 26		 jne	 SHORT $LN4@gzrewind
$LN3@gzrewind:

; 355  : 
; 356  :     /* back up and start over */
; 357  :     if (LSEEK(state->fd, state->start, SEEK_SET) == -1)

  00023	48 8b 51 48	 mov	 rdx, QWORD PTR [rcx+72]
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	8b 49 1c	 mov	 ecx, DWORD PTR [rcx+28]
  0002d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00033	48 83 f8 ff	 cmp	 rax, -1
  00037	74 10		 je	 SHORT $LN4@gzrewind

; 358  :         return -1;
; 359  :     gz_reset(state);

  00039	48 8b cb	 mov	 rcx, rbx
  0003c	e8 00 00 00 00	 call	 gz_reset

; 360  :     return 0;

  00041	33 c0		 xor	 eax, eax

; 361  : }

  00043	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00047	5b		 pop	 rbx
  00048	c3		 ret	 0
$LN4@gzrewind:

; 353  :             (state->err != Z_OK && state->err != Z_BUF_ERROR))
; 354  :         return -1;

  00049	b8 ff ff ff ff	 mov	 eax, -1

; 361  : }

  0004e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00052	5b		 pop	 rbx
  00053	c3		 ret	 0
gzrewind ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\gzlib.c
;	COMDAT gzseek64
_TEXT	SEGMENT
file$ = 48
offset$ = 56
whence$ = 64
gzseek64 PROC						; COMDAT

; 368  : {

$LN27:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fa	 mov	 rdi, rdx
  00012	48 8b d9	 mov	 rbx, rcx

; 369  :     unsigned n;
; 370  :     z_off64_t ret;
; 371  :     gz_statep state;
; 372  : 
; 373  :     /* get internal structure and check integrity */
; 374  :     if (file == NULL)

  00015	48 85 c9	 test	 rcx, rcx
  00018	0f 84 23 01 00
	00		 je	 $LN25@gzseek64

; 375  :         return -1;
; 376  :     state = (gz_statep)file;
; 377  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  0001e	8b 51 18	 mov	 edx, DWORD PTR [rcx+24]
  00021	81 fa 4f 1c 00
	00		 cmp	 edx, 7247		; 00001c4fH
  00027	74 0c		 je	 SHORT $LN23@gzseek64
  00029	81 fa b1 79 00
	00		 cmp	 edx, 31153		; 000079b1H
  0002f	0f 85 0c 01 00
	00		 jne	 $LN25@gzseek64
$LN23@gzseek64:

; 378  :         return -1;
; 379  : 
; 380  :     /* check that there's no error */
; 381  :     if (state->err != Z_OK && state->err != Z_BUF_ERROR)

  00035	8b 41 74	 mov	 eax, DWORD PTR [rcx+116]
  00038	85 c0		 test	 eax, eax
  0003a	74 09		 je	 SHORT $LN4@gzseek64
  0003c	83 f8 fb	 cmp	 eax, -5
  0003f	0f 85 fc 00 00
	00		 jne	 $LN25@gzseek64
$LN4@gzseek64:

; 382  :         return -1;
; 383  : 
; 384  :     /* can only seek from start or relative to current position */
; 385  :     if (whence != SEEK_SET && whence != SEEK_CUR)

  00045	45 85 c0	 test	 r8d, r8d
  00048	74 16		 je	 SHORT $LN22@gzseek64
  0004a	41 83 f8 01	 cmp	 r8d, 1
  0004e	0f 85 ed 00 00
	00		 jne	 $LN25@gzseek64

; 391  :     else if (state->seek)

  00054	83 79 70 00	 cmp	 DWORD PTR [rcx+112], 0
  00058	74 0a		 je	 SHORT $LN8@gzseek64

; 392  :         offset += state->skip;

  0005a	48 03 79 68	 add	 rdi, QWORD PTR [rcx+104]
  0005e	eb 04		 jmp	 SHORT $LN8@gzseek64
$LN22@gzseek64:

; 386  :         return -1;
; 387  : 
; 388  :     /* normalize offset to a SEEK_CUR specification */
; 389  :     if (whence == SEEK_SET)
; 390  :         offset -= state->x.pos;

  00060	48 2b 79 10	 sub	 rdi, QWORD PTR [rcx+16]
$LN8@gzseek64:

; 393  :     state->seek = 0;

  00064	33 f6		 xor	 esi, esi
  00066	89 71 70	 mov	 DWORD PTR [rcx+112], esi

; 394  : 
; 395  :     /* if within raw area while reading, just go there */
; 396  :     if (state->mode == GZ_READ && state->how == COPY &&

  00069	81 fa 4f 1c 00
	00		 cmp	 edx, 7247		; 00001c4fH
  0006f	75 65		 jne	 SHORT $LN9@gzseek64
  00071	83 79 44 01	 cmp	 DWORD PTR [rcx+68], 1
  00075	75 5f		 jne	 SHORT $LN9@gzseek64
  00077	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  0007b	48 03 cf	 add	 rcx, rdi
  0007e	78 56		 js	 SHORT $LN9@gzseek64

; 397  :             state->x.pos + offset >= 0) {
; 398  :         ret = LSEEK(state->fd, offset - (z_off64_t)state->x.have, SEEK_CUR);

  00080	8b 03		 mov	 eax, DWORD PTR [rbx]
  00082	44 8d 46 01	 lea	 r8d, QWORD PTR [rsi+1]
  00086	8b 4b 1c	 mov	 ecx, DWORD PTR [rbx+28]
  00089	48 8b d7	 mov	 rdx, rdi
  0008c	48 2b d0	 sub	 rdx, rax
  0008f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64

; 399  :         if (ret == -1)

  00095	48 83 f8 ff	 cmp	 rax, -1
  00099	0f 84 a2 00 00
	00		 je	 $LN25@gzseek64

; 400  :             return -1;
; 401  :         state->x.have = 0;
; 402  :         state->eof = 0;
; 403  :         state->past = 0;
; 404  :         state->seek = 0;
; 405  :         gz_error(state, Z_OK, NULL);

  0009f	45 33 c0	 xor	 r8d, r8d
  000a2	89 33		 mov	 DWORD PTR [rbx], esi
  000a4	33 d2		 xor	 edx, edx
  000a6	48 89 73 50	 mov	 QWORD PTR [rbx+80], rsi
  000aa	48 8b cb	 mov	 rcx, rbx
  000ad	89 73 70	 mov	 DWORD PTR [rbx+112], esi
  000b0	e8 00 00 00 00	 call	 gz_error

; 406  :         state->strm.avail_in = 0;
; 407  :         state->x.pos += offset;

  000b5	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  000b9	48 03 c7	 add	 rax, rdi
  000bc	89 b3 88 00 00
	00		 mov	 DWORD PTR [rbx+136], esi
  000c2	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax

; 438  : }

  000c6	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000cb	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000d0	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d4	5f		 pop	 rdi
  000d5	c3		 ret	 0
$LN9@gzseek64:

; 408  :         return state->x.pos;
; 409  :     }
; 410  : 
; 411  :     /* calculate skip amount, rewinding if needed for back seek when reading */
; 412  :     if (offset < 0) {

  000d6	48 85 ff	 test	 rdi, rdi
  000d9	79 1b		 jns	 SHORT $LN20@gzseek64

; 413  :         if (state->mode != GZ_READ)         /* writing -- can't go backwards */

  000db	81 fa 4f 1c 00
	00		 cmp	 edx, 7247		; 00001c4fH
  000e1	75 5e		 jne	 SHORT $LN25@gzseek64

; 414  :             return -1;
; 415  :         offset += state->x.pos;

  000e3	48 03 7b 10	 add	 rdi, QWORD PTR [rbx+16]

; 416  :         if (offset < 0)                     /* before start of file! */

  000e7	78 58		 js	 SHORT $LN25@gzseek64

; 417  :             return -1;
; 418  :         if (gzrewind(file) == -1)           /* rewind, then skip to offset */

  000e9	48 8b cb	 mov	 rcx, rbx
  000ec	e8 00 00 00 00	 call	 gzrewind
  000f1	83 f8 ff	 cmp	 eax, -1
  000f4	74 4b		 je	 SHORT $LN25@gzseek64
$LN20@gzseek64:

; 419  :             return -1;
; 420  :     }
; 421  : 
; 422  :     /* if reading, skip what's in output buffer (one less gzgetc() check) */
; 423  :     if (state->mode == GZ_READ) {

  000f6	81 7b 18 4f 1c
	00 00		 cmp	 DWORD PTR [rbx+24], 7247 ; 00001c4fH
  000fd	75 1b		 jne	 SHORT $LN24@gzseek64

; 424  :         n = GT_OFF(state->x.have) || (z_off64_t)state->x.have > offset ?

  000ff	8b 0b		 mov	 ecx, DWORD PTR [rbx]

; 425  :             (unsigned)offset : state->x.have;
; 426  :         state->x.have -= n;

  00101	48 3b cf	 cmp	 rcx, rdi
  00104	8b c1		 mov	 eax, ecx
  00106	0f 47 c7	 cmova	 eax, edi
  00109	8b d0		 mov	 edx, eax
  0010b	2b c8		 sub	 ecx, eax

; 427  :         state->x.next += n;

  0010d	48 01 53 08	 add	 QWORD PTR [rbx+8], rdx

; 428  :         state->x.pos += n;

  00111	48 01 53 10	 add	 QWORD PTR [rbx+16], rdx

; 429  :         offset -= n;

  00115	48 2b fa	 sub	 rdi, rdx
  00118	89 0b		 mov	 DWORD PTR [rbx], ecx
$LN24@gzseek64:

; 430  :     }
; 431  : 
; 432  :     /* request skip (if not zero) */
; 433  :     if (offset) {

  0011a	48 85 ff	 test	 rdi, rdi
  0011d	74 0b		 je	 SHORT $LN16@gzseek64

; 434  :         state->seek = 1;

  0011f	c7 43 70 01 00
	00 00		 mov	 DWORD PTR [rbx+112], 1

; 435  :         state->skip = offset;

  00126	48 89 7b 68	 mov	 QWORD PTR [rbx+104], rdi
$LN16@gzseek64:

; 436  :     }
; 437  :     return state->x.pos + offset;

  0012a	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  0012e	48 03 c7	 add	 rax, rdi

; 438  : }

  00131	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00136	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0013b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0013f	5f		 pop	 rdi
  00140	c3		 ret	 0
$LN25@gzseek64:
  00141	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00146	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  0014d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00152	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00156	5f		 pop	 rdi
  00157	c3		 ret	 0
gzseek64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\gzlib.c
;	COMDAT gzseek
_TEXT	SEGMENT
file$ = 48
offset$ = 56
whence$ = 64
gzseek	PROC						; COMDAT

; 445  : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 446  :     z_off64_t ret;
; 447  : 
; 448  :     ret = gzseek64(file, (z_off64_t)offset, whence);

  00004	48 63 d2	 movsxd	 rdx, edx
  00007	e8 00 00 00 00	 call	 gzseek64
  0000c	48 8b d0	 mov	 rdx, rax

; 449  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  0000f	48 63 c8	 movsxd	 rcx, eax
  00012	48 3b d1	 cmp	 rdx, rcx
  00015	b8 ff ff ff ff	 mov	 eax, -1
  0001a	0f 44 c2	 cmove	 eax, edx

; 450  : }

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
gzseek	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\gzlib.c
;	COMDAT gztell64
_TEXT	SEGMENT
file$ = 8
gztell64 PROC						; COMDAT

; 456  :     gz_statep state;
; 457  : 
; 458  :     /* get internal structure and check integrity */
; 459  :     if (file == NULL)

  00000	48 85 c9	 test	 rcx, rcx
  00003	74 2d		 je	 SHORT $LN7@gztell64

; 460  :         return -1;
; 461  :     state = (gz_statep)file;
; 462  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  00005	8b 41 18	 mov	 eax, DWORD PTR [rcx+24]
  00008	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  0000d	74 07		 je	 SHORT $LN3@gztell64
  0000f	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  00014	75 1c		 jne	 SHORT $LN7@gztell64
$LN3@gztell64:

; 464  : 
; 465  :     /* return position */
; 466  :     return state->x.pos + (state->seek ? state->skip : 0);

  00016	83 79 70 00	 cmp	 DWORD PTR [rcx+112], 0
  0001a	74 0c		 je	 SHORT $LN5@gztell64
  0001c	48 8b 51 68	 mov	 rdx, QWORD PTR [rcx+104]
  00020	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  00024	48 03 c2	 add	 rax, rdx

; 467  : }

  00027	c3		 ret	 0
$LN5@gztell64:

; 464  : 
; 465  :     /* return position */
; 466  :     return state->x.pos + (state->seek ? state->skip : 0);

  00028	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  0002c	33 d2		 xor	 edx, edx
  0002e	48 03 c2	 add	 rax, rdx

; 467  : }

  00031	c3		 ret	 0
$LN7@gztell64:

; 463  :         return -1;

  00032	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1

; 467  : }

  00039	c3		 ret	 0
gztell64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\gzlib.c
;	COMDAT gztell
_TEXT	SEGMENT
file$ = 48
gztell	PROC						; COMDAT

; 472  : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 473  :     z_off64_t ret;
; 474  : 
; 475  :     ret = gztell64(file);

  00004	e8 00 00 00 00	 call	 gztell64
  00009	4c 8b c0	 mov	 r8, rax

; 476  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  0000c	48 63 c8	 movsxd	 rcx, eax
  0000f	4c 3b c1	 cmp	 r8, rcx
  00012	b8 ff ff ff ff	 mov	 eax, -1
  00017	41 0f 44 c0	 cmove	 eax, r8d

; 477  : }

  0001b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001f	c3		 ret	 0
gztell	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\gzlib.c
;	COMDAT gzoffset64
_TEXT	SEGMENT
file$ = 48
gzoffset64 PROC						; COMDAT

; 482  : {

$LN9:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 483  :     z_off64_t offset;
; 484  :     gz_statep state;
; 485  : 
; 486  :     /* get internal structure and check integrity */
; 487  :     if (file == NULL)

  00009	48 85 c9	 test	 rcx, rcx
  0000c	74 3e		 je	 SHORT $LN7@gzoffset64

; 488  :         return -1;
; 489  :     state = (gz_statep)file;
; 490  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  0000e	8b 41 18	 mov	 eax, DWORD PTR [rcx+24]
  00011	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00016	74 07		 je	 SHORT $LN3@gzoffset64
  00018	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  0001d	75 2d		 jne	 SHORT $LN7@gzoffset64
$LN3@gzoffset64:

; 491  :         return -1;
; 492  : 
; 493  :     /* compute and return effective offset in file */
; 494  :     offset = LSEEK(state->fd, 0, SEEK_CUR);

  0001f	8b 49 1c	 mov	 ecx, DWORD PTR [rcx+28]
  00022	33 d2		 xor	 edx, edx
  00024	44 8d 42 01	 lea	 r8d, QWORD PTR [rdx+1]
  00028	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64

; 495  :     if (offset == -1)

  0002e	48 83 f8 ff	 cmp	 rax, -1
  00032	74 18		 je	 SHORT $LN7@gzoffset64

; 497  :     if (state->mode == GZ_READ)             /* reading */

  00034	81 7b 18 4f 1c
	00 00		 cmp	 DWORD PTR [rbx+24], 7247 ; 00001c4fH
  0003b	75 16		 jne	 SHORT $LN1@gzoffset64

; 498  :         offset -= state->strm.avail_in;     /* don't count buffered input */

  0003d	8b 8b 88 00 00
	00		 mov	 ecx, DWORD PTR [rbx+136]
  00043	48 2b c1	 sub	 rax, rcx

; 499  :     return offset;
; 500  : }

  00046	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004a	5b		 pop	 rbx
  0004b	c3		 ret	 0
$LN7@gzoffset64:

; 496  :         return -1;

  0004c	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
$LN1@gzoffset64:

; 499  :     return offset;
; 500  : }

  00053	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00057	5b		 pop	 rbx
  00058	c3		 ret	 0
gzoffset64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\gzlib.c
;	COMDAT gzoffset
_TEXT	SEGMENT
file$ = 48
gzoffset PROC						; COMDAT

; 505  : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 506  :     z_off64_t ret;
; 507  : 
; 508  :     ret = gzoffset64(file);

  00004	e8 00 00 00 00	 call	 gzoffset64
  00009	48 8b d0	 mov	 rdx, rax

; 509  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  0000c	48 63 c8	 movsxd	 rcx, eax
  0000f	48 3b d1	 cmp	 rdx, rcx
  00012	b8 ff ff ff ff	 mov	 eax, -1
  00017	0f 44 c2	 cmove	 eax, edx

; 510  : }

  0001a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001e	c3		 ret	 0
gzoffset ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\gzlib.c
;	COMDAT gzeof
_TEXT	SEGMENT
file$ = 8
gzeof	PROC						; COMDAT

; 516  :     gz_statep state;
; 517  : 
; 518  :     /* get internal structure and check integrity */
; 519  :     if (file == NULL)

  00000	48 85 c9	 test	 rcx, rcx
  00003	74 0e		 je	 SHORT $LN8@gzeof

; 520  :         return 0;
; 521  :     state = (gz_statep)file;
; 522  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  00005	8b 41 18	 mov	 eax, DWORD PTR [rcx+24]
  00008	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  0000d	75 04		 jne	 SHORT $LN8@gzeof

; 523  :         return 0;
; 524  : 
; 525  :     /* return end-of-file state */
; 526  :     return state->mode == GZ_READ ? state->past : 0;

  0000f	8b 41 54	 mov	 eax, DWORD PTR [rcx+84]

; 527  : }

  00012	c3		 ret	 0
$LN8@gzeof:
  00013	33 c0		 xor	 eax, eax
  00015	c3		 ret	 0
gzeof	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\gzlib.c
;	COMDAT gzerror
_TEXT	SEGMENT
file$ = 8
errnum$ = 16
gzerror	PROC						; COMDAT

; 534  :     gz_statep state;
; 535  : 
; 536  :     /* get internal structure and check integrity */
; 537  :     if (file == NULL)

  00000	48 85 c9	 test	 rcx, rcx
  00003	74 3c		 je	 SHORT $LN10@gzerror

; 538  :         return NULL;
; 539  :     state = (gz_statep)file;
; 540  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  00005	8b 41 18	 mov	 eax, DWORD PTR [rcx+24]
  00008	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  0000d	74 07		 je	 SHORT $LN3@gzerror
  0000f	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  00014	75 2b		 jne	 SHORT $LN10@gzerror
$LN3@gzerror:

; 542  : 
; 543  :     /* return error information */
; 544  :     if (errnum != NULL)

  00016	48 85 d2	 test	 rdx, rdx
  00019	74 05		 je	 SHORT $LN4@gzerror

; 545  :         *errnum = state->err;

  0001b	8b 41 74	 mov	 eax, DWORD PTR [rcx+116]
  0001e	89 02		 mov	 DWORD PTR [rdx], eax
$LN4@gzerror:

; 546  :     return state->err == Z_MEM_ERROR ? "out of memory" :

  00020	83 79 74 fc	 cmp	 DWORD PTR [rcx+116], -4
  00024	75 08		 jne	 SHORT $LN8@gzerror
  00026	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0O@BNNCBLEN@out?5of?5memory@

; 547  :                                        (state->msg == NULL ? "" : state->msg);
; 548  : }

  0002d	c3		 ret	 0
$LN8@gzerror:

; 546  :     return state->err == Z_MEM_ERROR ? "out of memory" :

  0002e	48 8b 49 78	 mov	 rcx, QWORD PTR [rcx+120]
  00032	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_00CNPNBAHC@@
  00039	48 85 c9	 test	 rcx, rcx
  0003c	48 0f 45 c1	 cmovne	 rax, rcx

; 547  :                                        (state->msg == NULL ? "" : state->msg);
; 548  : }

  00040	c3		 ret	 0
$LN10@gzerror:

; 541  :         return NULL;

  00041	33 c0		 xor	 eax, eax

; 547  :                                        (state->msg == NULL ? "" : state->msg);
; 548  : }

  00043	c3		 ret	 0
gzerror	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\gzlib.c
;	COMDAT gzclearerr
_TEXT	SEGMENT
file$ = 8
gzclearerr PROC						; COMDAT

; 554  :     gz_statep state;
; 555  : 
; 556  :     /* get internal structure and check integrity */
; 557  :     if (file == NULL)

  00000	48 85 c9	 test	 rcx, rcx
  00003	74 2b		 je	 SHORT $LN1@gzclearerr

; 558  :         return;
; 559  :     state = (gz_statep)file;
; 560  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  00005	8b 41 18	 mov	 eax, DWORD PTR [rcx+24]
  00008	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  0000d	74 11		 je	 SHORT $LN6@gzclearerr
  0000f	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  00014	75 1a		 jne	 SHORT $LN1@gzclearerr

; 566  :         state->past = 0;
; 567  :     }
; 568  :     gz_error(state, Z_OK, NULL);

  00016	45 33 c0	 xor	 r8d, r8d
  00019	33 d2		 xor	 edx, edx
  0001b	e9 00 00 00 00	 jmp	 gz_error
$LN6@gzclearerr:

; 561  :         return;
; 562  : 
; 563  :     /* clear error and end-of-file */
; 564  :     if (state->mode == GZ_READ) {
; 565  :         state->eof = 0;

  00020	33 c0		 xor	 eax, eax

; 566  :         state->past = 0;
; 567  :     }
; 568  :     gz_error(state, Z_OK, NULL);

  00022	45 33 c0	 xor	 r8d, r8d
  00025	33 d2		 xor	 edx, edx
  00027	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
  0002b	e9 00 00 00 00	 jmp	 gz_error
$LN1@gzclearerr:

; 569  : }

  00030	c3		 ret	 0
gzclearerr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\gzlib.c
;	COMDAT gz_error
_TEXT	SEGMENT
state$ = 64
err$ = 72
msg$ = 80
gz_error PROC						; COMDAT

; 578  : {

$LN15:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b f9	 mov	 rdi, rcx
  00012	49 8b f0	 mov	 rsi, r8

; 579  :     /* free previously allocated message and clear */
; 580  :     if (state->msg != NULL) {

  00015	48 8b 49 78	 mov	 rcx, QWORD PTR [rcx+120]
  00019	8b da		 mov	 ebx, edx
  0001b	48 85 c9	 test	 rcx, rcx
  0001e	74 14		 je	 SHORT $LN2@gz_error

; 581  :         if (state->err != Z_MEM_ERROR)

  00020	83 7f 74 fc	 cmp	 DWORD PTR [rdi+116], -4
  00024	74 06		 je	 SHORT $LN3@gz_error

; 582  :             free(state->msg);

  00026	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN3@gz_error:

; 583  :         state->msg = NULL;

  0002c	48 c7 47 78 00
	00 00 00	 mov	 QWORD PTR [rdi+120], 0
$LN2@gz_error:

; 584  :     }
; 585  : 
; 586  :     /* if fatal, set state->x.have to 0 so that the gzgetc() macro fails */
; 587  :     if (err != Z_OK && err != Z_BUF_ERROR)

  00034	85 db		 test	 ebx, ebx
  00036	74 0b		 je	 SHORT $LN4@gz_error
  00038	83 fb fb	 cmp	 ebx, -5
  0003b	74 06		 je	 SHORT $LN4@gz_error

; 588  :         state->x.have = 0;

  0003d	c7 07 00 00 00
	00		 mov	 DWORD PTR [rdi], 0
$LN4@gz_error:

; 589  : 
; 590  :     /* set error code, and if no message, then done */
; 591  :     state->err = err;

  00043	89 5f 74	 mov	 DWORD PTR [rdi+116], ebx

; 592  :     if (msg == NULL)

  00046	48 85 f6	 test	 rsi, rsi
  00049	0f 84 9e 00 00
	00		 je	 $LN1@gz_error

; 593  :         return;
; 594  : 
; 595  :     /* for an out of memory error, return literal string when requested */
; 596  :     if (err == Z_MEM_ERROR)

  0004f	83 fb fc	 cmp	 ebx, -4
  00052	0f 84 95 00 00
	00		 je	 $LN1@gz_error

; 597  :         return;
; 598  : 
; 599  :     /* construct error message with path */
; 600  :     if ((state->msg = (char *)malloc(strlen(state->path) + strlen(msg) + 3)) ==

  00058	48 8b 4f 20	 mov	 rcx, QWORD PTR [rdi+32]
  0005c	48 c7 c3 ff ff
	ff ff		 mov	 rbx, -1
  00063	48 8b c3	 mov	 rax, rbx
$LL12@gz_error:
  00066	48 ff c0	 inc	 rax
  00069	80 3c 01 00	 cmp	 BYTE PTR [rcx+rax], 0
  0006d	75 f7		 jne	 SHORT $LL12@gz_error
  0006f	48 8b cb	 mov	 rcx, rbx
$LL11@gz_error:
  00072	48 ff c1	 inc	 rcx
  00075	80 3c 0e 00	 cmp	 BYTE PTR [rsi+rcx], 0
  00079	75 f7		 jne	 SHORT $LL11@gz_error
  0007b	48 83 c0 03	 add	 rax, 3
  0007f	48 03 c8	 add	 rcx, rax
  00082	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00088	48 89 47 78	 mov	 QWORD PTR [rdi+120], rax
  0008c	48 8b c8	 mov	 rcx, rax
  0008f	48 85 c0	 test	 rax, rax
  00092	75 17		 jne	 SHORT $LN7@gz_error

; 601  :             NULL) {
; 602  :         state->err = Z_MEM_ERROR;

  00094	c7 47 74 fc ff
	ff ff		 mov	 DWORD PTR [rdi+116], -4

; 607  :                    "%s%s%s", state->path, ": ", msg);
; 608  : #else
; 609  :     strcpy(state->msg, state->path);
; 610  :     strcat(state->msg, ": ");
; 611  :     strcat(state->msg, msg);
; 612  : #endif
; 613  : }

  0009b	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000a0	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000a5	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000a9	5f		 pop	 rdi
  000aa	c3		 ret	 0
$LN7@gz_error:

; 603  :         return;
; 604  :     }
; 605  : #if !defined(NO_snprintf) && !defined(NO_vsnprintf)
; 606  :     (void)snprintf(state->msg, strlen(state->path) + strlen(msg) + 3,

  000ab	4c 8b 4f 20	 mov	 r9, QWORD PTR [rdi+32]
  000af	48 8b c3	 mov	 rax, rbx
$LL10@gz_error:
  000b2	41 80 7c 01 01
	00		 cmp	 BYTE PTR [r9+rax+1], 0
  000b8	48 8d 40 01	 lea	 rax, QWORD PTR [rax+1]
  000bc	75 f4		 jne	 SHORT $LL10@gz_error
  000be	66 90		 npad	 2
$LL9@gz_error:
  000c0	48 ff c3	 inc	 rbx
  000c3	80 3c 1e 00	 cmp	 BYTE PTR [rsi+rbx], 0
  000c7	75 f7		 jne	 SHORT $LL9@gz_error
  000c9	48 8d 50 03	 lea	 rdx, QWORD PTR [rax+3]
  000cd	48 89 74 24 28	 mov	 QWORD PTR [rsp+40], rsi
  000d2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02LMMGGCAJ@?3?5@
  000d9	48 03 d3	 add	 rdx, rbx
  000dc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06DIJPEION@?$CFs?$CFs?$CFs@
  000e3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000e8	e8 00 00 00 00	 call	 snprintf
$LN1@gz_error:

; 607  :                    "%s%s%s", state->path, ": ", msg);
; 608  : #else
; 609  :     strcpy(state->msg, state->path);
; 610  :     strcat(state->msg, ": ");
; 611  :     strcat(state->msg, msg);
; 612  : #endif
; 613  : }

  000ed	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000f2	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000f7	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000fb	5f		 pop	 rdi
  000fc	c3		 ret	 0
gz_error ENDP
_TEXT	ENDS
END
