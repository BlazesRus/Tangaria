; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30142.1 

include listing.inc

INCLUDELIB OLDNAMES

EXTRN	longest_match:PROC
EXTRN	match_init:PROC
?my_version@?1??deflateInit2_@@9@9 DB '1.2.12.f-BlazesRus', 00H ; `deflateInit2_'::`2'::my_version
	ORG $+13
configuration_table DW 00H
	DW	00H
	DW	00H
	DW	00H
	DQ	FLAT:deflate_stored
	DW	04H
	DW	04H
	DW	08H
	DW	04H
	DQ	FLAT:deflate_fast
	DW	04H
	DW	05H
	DW	010H
	DW	08H
	DQ	FLAT:deflate_fast
	DW	04H
	DW	06H
	DW	020H
	DW	020H
	DQ	FLAT:deflate_fast
	DW	04H
	DW	04H
	DW	010H
	DW	010H
	DQ	FLAT:deflate_slow
	DW	08H
	DW	010H
	DW	020H
	DW	020H
	DQ	FLAT:deflate_slow
	DW	08H
	DW	010H
	DW	080H
	DW	080H
	DQ	FLAT:deflate_slow
	DW	08H
	DW	020H
	DW	080H
	DW	0100H
	DQ	FLAT:deflate_slow
	DW	020H
	DW	080H
	DW	0102H
	DW	0400H
	DQ	FLAT:deflate_slow
	DW	020H
	DW	0102H
	DW	0102H
	DW	01000H
	DQ	FLAT:deflate_slow
PUBLIC	deflateCopy
PUBLIC	deflateBound
PUBLIC	deflateTune
PUBLIC	deflateParams
PUBLIC	deflatePrime
PUBLIC	deflatePending
PUBLIC	deflateSetHeader
PUBLIC	deflateReset
PUBLIC	deflateResetKeep
PUBLIC	deflateGetDictionary
PUBLIC	deflateSetDictionary
PUBLIC	deflateInit2_
PUBLIC	deflateInit_
PUBLIC	deflateEnd
PUBLIC	deflate
;	COMDAT pdata
pdata	SEGMENT
$pdata$deflate_huff DD imagerel deflate_huff
	DD	imagerel deflate_huff+488
	DD	imagerel $unwind$deflate_huff
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deflate_rle DD imagerel deflate_rle
	DD	imagerel deflate_rle+855
	DD	imagerel $unwind$deflate_rle
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deflate_slow DD imagerel deflate_slow
	DD	imagerel deflate_slow+1395
	DD	imagerel $unwind$deflate_slow
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deflate_fast DD imagerel deflate_fast
	DD	imagerel deflate_fast+1119
	DD	imagerel $unwind$deflate_fast
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deflate_stored DD imagerel deflate_stored
	DD	imagerel deflate_stored+17
	DD	imagerel $unwind$deflate_stored
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$deflate_stored DD imagerel deflate_stored+17
	DD	imagerel deflate_stored+25
	DD	imagerel $chain$0$deflate_stored
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$deflate_stored DD imagerel deflate_stored+25
	DD	imagerel deflate_stored+429
	DD	imagerel $chain$3$deflate_stored
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$deflate_stored DD imagerel deflate_stored+429
	DD	imagerel deflate_stored+665
	DD	imagerel $chain$4$deflate_stored
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$deflate_stored DD imagerel deflate_stored+665
	DD	imagerel deflate_stored+1103
	DD	imagerel $chain$5$deflate_stored
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fill_window DD imagerel fill_window
	DD	imagerel fill_window+547
	DD	imagerel $unwind$fill_window
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$lm_init DD imagerel lm_init
	DD	imagerel lm_init+180
	DD	imagerel $unwind$lm_init
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$read_buf DD imagerel read_buf
	DD	imagerel read_buf+160
	DD	imagerel $unwind$read_buf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deflateCopy DD imagerel $LN12
	DD	imagerel $LN12+41
	DD	imagerel $unwind$deflateCopy
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$deflateCopy DD imagerel $LN12+41
	DD	imagerel $LN12+450
	DD	imagerel $chain$1$deflateCopy
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$deflateCopy DD imagerel $LN12+450
	DD	imagerel $LN12+479
	DD	imagerel $chain$3$deflateCopy
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$deflateCopy DD imagerel $LN12+479
	DD	imagerel $LN12+490
	DD	imagerel $chain$4$deflateCopy
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$flush_pending DD imagerel flush_pending
	DD	imagerel flush_pending+105
	DD	imagerel $unwind$flush_pending
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deflateBound DD imagerel $LN30
	DD	imagerel $LN30+274
	DD	imagerel $unwind$deflateBound
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deflateTune DD imagerel $LN5
	DD	imagerel $LN5+71
	DD	imagerel $unwind$deflateTune
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deflateParams DD imagerel $LN22
	DD	imagerel $LN22+376
	DD	imagerel $unwind$deflateParams
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deflatePrime DD imagerel $LN14
	DD	imagerel $LN14+191
	DD	imagerel $unwind$deflatePrime
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deflatePending DD imagerel $LN7
	DD	imagerel $LN7+69
	DD	imagerel $unwind$deflatePending
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deflateSetHeader DD imagerel $LN6
	DD	imagerel $LN6+50
	DD	imagerel $unwind$deflateSetHeader
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deflateReset DD imagerel $LN6
	DD	imagerel $LN6+46
	DD	imagerel $unwind$deflateReset
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deflateResetKeep DD imagerel $LN8
	DD	imagerel $LN8+158
	DD	imagerel $unwind$deflateResetKeep
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deflateGetDictionary DD imagerel $LN8
	DD	imagerel $LN8+122
	DD	imagerel $unwind$deflateGetDictionary
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deflateSetDictionary DD imagerel $LN32
	DD	imagerel $LN32+89
	DD	imagerel $unwind$deflateSetDictionary
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$deflateSetDictionary DD imagerel $LN32+89
	DD	imagerel $LN32+492
	DD	imagerel $chain$2$deflateSetDictionary
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$deflateSetDictionary DD imagerel $LN32+492
	DD	imagerel $LN32+508
	DD	imagerel $chain$3$deflateSetDictionary
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deflateInit2_ DD imagerel $LN24
	DD	imagerel $LN24+73
	DD	imagerel $unwind$deflateInit2_
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$deflateInit2_ DD imagerel $LN24+73
	DD	imagerel $LN24+262
	DD	imagerel $chain$1$deflateInit2_
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$deflateInit2_ DD imagerel $LN24+262
	DD	imagerel $LN24+550
	DD	imagerel $chain$2$deflateInit2_
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$deflateInit2_ DD imagerel $LN24+550
	DD	imagerel $LN24+573
	DD	imagerel $chain$3$deflateInit2_
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$deflateInit2_ DD imagerel $LN24+573
	DD	imagerel $LN24+606
	DD	imagerel $chain$5$deflateInit2_
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$deflateInit2_ DD imagerel $LN24+606
	DD	imagerel $LN24+613
	DD	imagerel $chain$6$deflateInit2_
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$deflateInit2_ DD imagerel $LN24+613
	DD	imagerel $LN24+631
	DD	imagerel $chain$7$deflateInit2_
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slide_hash DD imagerel slide_hash
	DD	imagerel slide_hash+117
	DD	imagerel $unwind$slide_hash
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deflateInit_ DD imagerel $LN4
	DD	imagerel $LN4+50
	DD	imagerel $unwind$deflateInit_
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deflateEnd DD imagerel $LN9
	DD	imagerel $LN9+168
	DD	imagerel $unwind$deflateEnd
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$deflate DD imagerel $LN160
	DD	imagerel $LN160+42
	DD	imagerel $unwind$deflate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$deflate DD imagerel $LN160+42
	DD	imagerel $LN160+278
	DD	imagerel $chain$4$deflate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$deflate DD imagerel $LN160+278
	DD	imagerel $LN160+2307
	DD	imagerel $chain$6$deflate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$deflate DD imagerel $LN160+2307
	DD	imagerel $LN160+2336
	DD	imagerel $chain$7$deflate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$deflate DD imagerel $LN160+2336
	DD	imagerel $LN160+2349
	DD	imagerel $chain$8$deflate
;	COMDAT xdata
xdata	SEGMENT
$chain$8$deflate DD 021H
	DD	imagerel $LN160
	DD	imagerel $LN160+42
	DD	imagerel $unwind$deflate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$deflate DD 020021H
	DD	083400H
	DD	imagerel $LN160
	DD	imagerel $LN160+42
	DD	imagerel $unwind$deflate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$deflate DD 0a0021H
	DD	04f400H
	DD	0be400H
	DD	0a6400H
	DD	095400H
	DD	083400H
	DD	imagerel $LN160
	DD	imagerel $LN160+42
	DD	imagerel $unwind$deflate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$deflate DD 0a4d21H
	DD	04f44dH
	DD	0be448H
	DD	0a6443H
	DD	09543eH
	DD	083405H
	DD	imagerel $LN160
	DD	imagerel $LN160+42
	DD	imagerel $unwind$deflate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deflate DD 030801H
	DD	0c0044208H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deflateEnd DD 042601H
	DD	067426H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deflateInit_ DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slide_hash DD 020501H
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$deflateInit2_ DD 021H
	DD	imagerel $LN24
	DD	imagerel $LN24+73
	DD	imagerel $unwind$deflateInit2_
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$deflateInit2_ DD 040021H
	DD	0cd400H
	DD	0a5400H
	DD	imagerel $LN24
	DD	imagerel $LN24+73
	DD	imagerel $unwind$deflateInit2_
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$deflateInit2_ DD 060021H
	DD	0cd400H
	DD	0b7400H
	DD	0a5400H
	DD	imagerel $LN24
	DD	imagerel $LN24+73
	DD	imagerel $unwind$deflateInit2_
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$deflateInit2_ DD 021H
	DD	imagerel $LN24+73
	DD	imagerel $LN24+262
	DD	imagerel $chain$1$deflateInit2_
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$deflateInit2_ DD 020521H
	DD	0b7405H
	DD	imagerel $LN24+73
	DD	imagerel $LN24+262
	DD	imagerel $chain$1$deflateInit2_
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$deflateInit2_ DD 040a21H
	DD	0cd40aH
	DD	0a5405H
	DD	imagerel $LN24
	DD	imagerel $LN24+73
	DD	imagerel $unwind$deflateInit2_
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deflateInit2_ DD 060d01H
	DD	0f009320dH
	DD	0c005e007H
	DD	030026003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$deflateSetDictionary DD 021H
	DD	imagerel $LN32
	DD	imagerel $LN32+89
	DD	imagerel $unwind$deflateSetDictionary
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$deflateSetDictionary DD 060f21H
	DD	0cf40fH
	DD	0bd40aH
	DD	0ac405H
	DD	imagerel $LN32
	DD	imagerel $LN32+89
	DD	imagerel $unwind$deflateSetDictionary
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deflateSetDictionary DD 060b01H
	DD	0e007320bH
	DD	060047005H
	DD	030025003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deflateGetDictionary DD 042c01H
	DD	06342cH
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deflateResetKeep DD 043501H
	DD	063435H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deflateReset DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deflateSetHeader DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deflatePending DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deflatePrime DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deflateParams DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deflateTune DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deflateBound DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$flush_pending DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$deflateCopy DD 021H
	DD	imagerel $LN12
	DD	imagerel $LN12+41
	DD	imagerel $unwind$deflateCopy
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$deflateCopy DD 040021H
	DD	077400H
	DD	066400H
	DD	imagerel $LN12
	DD	imagerel $LN12+41
	DD	imagerel $unwind$deflateCopy
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$deflateCopy DD 041421H
	DD	077414H
	DD	066405H
	DD	imagerel $LN12
	DD	imagerel $LN12+41
	DD	imagerel $unwind$deflateCopy
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deflateCopy DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$read_buf DD 084701H
	DD	065447H
	DD	08640fH
	DD	07340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lm_init DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fill_window DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$deflate_stored DD 020021H
	DD	0c7400H
	DD	imagerel deflate_stored
	DD	imagerel deflate_stored+17
	DD	imagerel $unwind$deflate_stored
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$deflate_stored DD 020021H
	DD	0c7400H
	DD	imagerel deflate_stored+17
	DD	imagerel deflate_stored+25
	DD	imagerel $chain$0$deflate_stored
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$deflate_stored DD 061d21H
	DD	0c741dH
	DD	0b5414H
	DD	04d405H
	DD	imagerel deflate_stored+17
	DD	imagerel deflate_stored+25
	DD	imagerel $chain$0$deflate_stored
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$deflate_stored DD 020521H
	DD	0dc405H
	DD	imagerel deflate_stored
	DD	imagerel deflate_stored+17
	DD	imagerel $unwind$deflate_stored
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deflate_stored DD 050b01H
	DD	0f007420bH
	DD	06003e005H
	DD	03002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deflate_fast DD 0c1c01H
	DD	0c641cH
	DD	0b541cH
	DD	0a341cH
	DD	0f018321cH
	DD	0d014e016H
	DD	07010c012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deflate_slow DD 0c1c01H
	DD	0c641cH
	DD	0b541cH
	DD	0a341cH
	DD	0f018321cH
	DD	0d014e016H
	DD	07010c012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deflate_rle DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$deflate_huff DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\deflate.c
;	COMDAT deflate
_TEXT	SEGMENT
strm$ = 64
flush$ = 72
deflate	PROC						; COMDAT

; 787  : {

$LN160:
  00000	40 57		 push	 rdi
  00002	41 54		 push	 r12
  00004	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00008	44 8b e2	 mov	 r12d, edx
  0000b	48 8b f9	 mov	 rdi, rcx

; 788  :     int old_flush; /* value of flush param for previous deflate call */
; 789  :     deflate_state *s;
; 790  : 
; 791  :     if (deflateStateCheck(strm) || flush > Z_BLOCK || flush < 0) {

  0000e	e8 00 00 00 00	 call	 deflateStateCheck
  00013	85 c0		 test	 eax, eax
  00015	0f 85 05 09 00
	00		 jne	 $LN32@deflate
  0001b	41 83 fc 05	 cmp	 r12d, 5
  0001f	0f 87 fb 08 00
	00		 ja	 $LN32@deflate

; 793  :     }
; 794  :     s = strm->state;
; 795  : 
; 796  :     if (strm->next_out == Z_NULL ||
; 797  :         (strm->avail_in != 0 && strm->next_in == Z_NULL) ||

  00025	48 83 7f 10 00	 cmp	 QWORD PTR [rdi+16], 0
  0002a	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  0002f	48 8b 5f 28	 mov	 rbx, QWORD PTR [rdi+40]
  00033	0f 84 ca 08 00
	00		 je	 $LN34@deflate
  00039	39 47 08	 cmp	 DWORD PTR [rdi+8], eax
  0003c	74 0a		 je	 SHORT $LN35@deflate
  0003e	48 83 3f 00	 cmp	 QWORD PTR [rdi], 0
  00042	0f 84 bb 08 00
	00		 je	 $LN34@deflate
$LN35@deflate:
  00048	44 8b 4b 08	 mov	 r9d, DWORD PTR [rbx+8]
  0004c	41 81 f9 9a 02
	00 00		 cmp	 r9d, 666		; 0000029aH
  00053	75 0a		 jne	 SHORT $LN33@deflate
  00055	41 83 fc 04	 cmp	 r12d, 4
  00059	0f 85 a4 08 00
	00		 jne	 $LN34@deflate
$LN33@deflate:

; 800  :     }
; 801  :     if (strm->avail_out == 0) ERR_RETURN(strm, Z_BUF_ERROR);

  0005f	83 7f 18 00	 cmp	 DWORD PTR [rdi+24], 0
  00063	48 89 6c 24 48	 mov	 QWORD PTR [rsp+72], rbp
  00068	48 89 74 24 50	 mov	 QWORD PTR [rsp+80], rsi
  0006d	4c 89 74 24 58	 mov	 QWORD PTR [rsp+88], r14
  00072	4c 89 7c 24 20	 mov	 QWORD PTR [rsp+32], r15
  00077	74 6c		 je	 SHORT $LN150@deflate

; 802  : 
; 803  :     old_flush = s->last_flush;

  00079	8b 53 40	 mov	 edx, DWORD PTR [rbx+64]

; 804  :     s->last_flush = flush;
; 805  : 
; 806  :     /* Flush as much pending output as possible */
; 807  :     if (s->pending != 0) {

  0007c	33 f6		 xor	 esi, esi
  0007e	44 89 63 40	 mov	 DWORD PTR [rbx+64], r12d
  00082	39 73 28	 cmp	 DWORD PTR [rbx+40], esi
  00085	74 17		 je	 SHORT $LN37@deflate

; 808  :         flush_pending(strm);

  00087	48 8b cf	 mov	 rcx, rdi
  0008a	e8 00 00 00 00	 call	 flush_pending

; 809  :         if (strm->avail_out == 0) {

  0008f	39 77 18	 cmp	 DWORD PTR [rdi+24], esi
  00092	0f 84 5d 08 00
	00		 je	 $LN149@deflate

; 810  :             /* Since avail_out is 0, deflate will be called again with
; 811  :              * more output space, but possibly with both pending and
; 812  :              * avail_in equal to zero. There won't be anything to do,
; 813  :              * but this is not an error situation so make sure we
; 814  :              * return OK instead of BUF_ERROR at next call of deflate:
; 815  :              */
; 816  :             s->last_flush = -1;
; 817  :             return Z_OK;
; 818  :         }

  00098	44 8b 43 08	 mov	 r8d, DWORD PTR [rbx+8]
  0009c	eb 35		 jmp	 SHORT $LN40@deflate
$LN37@deflate:

; 819  : 
; 820  :     /* Make sure there is something to do and avoid duplicate consecutive
; 821  :      * flushes. For repeated and useless calls with Z_FINISH, we keep
; 822  :      * returning Z_STREAM_END instead of Z_BUF_ERROR.
; 823  :      */
; 824  :     } else if (strm->avail_in == 0 && RANK(flush) <= RANK(old_flush) &&

  0009e	45 8b c1	 mov	 r8d, r9d
  000a1	39 77 08	 cmp	 DWORD PTR [rdi+8], esi
  000a4	75 2d		 jne	 SHORT $LN40@deflate
  000a6	83 fa 04	 cmp	 edx, 4
  000a9	41 ba 09 00 00
	00		 mov	 r10d, 9
  000af	8b c6		 mov	 eax, esi
  000b1	8b ce		 mov	 ecx, esi
  000b3	41 0f 4f c2	 cmovg	 eax, r10d
  000b7	03 d2		 add	 edx, edx
  000b9	2b d0		 sub	 edx, eax
  000bb	43 8d 04 24	 lea	 eax, DWORD PTR [r12+r12]
  000bf	41 83 fc 04	 cmp	 r12d, 4
  000c3	41 0f 4f ca	 cmovg	 ecx, r10d
  000c7	2b c1		 sub	 eax, ecx
  000c9	3b c2		 cmp	 eax, edx
  000cb	7f 06		 jg	 SHORT $LN40@deflate
  000cd	41 83 fc 04	 cmp	 r12d, 4
  000d1	75 12		 jne	 SHORT $LN150@deflate
$LN40@deflate:

; 825  :                flush != Z_FINISH) {
; 826  :         ERR_RETURN(strm, Z_BUF_ERROR);
; 827  :     }
; 828  : 
; 829  :     /* User must not provide more input after the first FINISH: */
; 830  :     if (s->status == FINISH_STATE && strm->avail_in != 0) {

  000d3	41 81 f8 9a 02
	00 00		 cmp	 r8d, 666		; 0000029aH
  000da	75 3a		 jne	 SHORT $LN41@deflate
  000dc	39 77 08	 cmp	 DWORD PTR [rdi+8], esi
  000df	0f 84 01 01 00
	00		 je	 $LN128@deflate
$LN150@deflate:

; 831  :         ERR_RETURN(strm, Z_BUF_ERROR);

  000e5	48 8b 05 38 00
	00 00		 mov	 rax, QWORD PTR z_errmsg+56
  000ec	48 89 47 20	 mov	 QWORD PTR [rdi+32], rax
  000f0	b8 fb ff ff ff	 mov	 eax, -5
$LN157@deflate:
  000f5	4c 8b 74 24 58	 mov	 r14, QWORD PTR [rsp+88]
  000fa	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  000ff	48 8b 6c 24 48	 mov	 rbp, QWORD PTR [rsp+72]
  00104	4c 8b 7c 24 20	 mov	 r15, QWORD PTR [rsp+32]
  00109	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 1096 : }

  0010e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00112	41 5c		 pop	 r12
  00114	5f		 pop	 rdi
  00115	c3		 ret	 0
$LN41@deflate:

; 832  :     }
; 833  : 
; 834  :     /* Write the header */
; 835  :     if (s->status == INIT_STATE && s->wrap == 0)

  00116	41 83 f8 2a	 cmp	 r8d, 42			; 0000002aH
  0011a	0f 85 c6 00 00
	00		 jne	 $LN128@deflate
  00120	39 73 2c	 cmp	 DWORD PTR [rbx+44], esi
  00123	75 0c		 jne	 SHORT $LN138@deflate

; 836  :         s->status = BUSY_STATE;

  00125	c7 43 08 71 00
	00 00		 mov	 DWORD PTR [rbx+8], 113	; 00000071H

; 837  :     if (s->status == INIT_STATE) {

  0012c	e9 b5 00 00 00	 jmp	 $LN128@deflate
$LN138@deflate:

; 838  :         /* zlib header */
; 839  :         uInt header = (Z_DEFLATED + ((s->w_bits-8)<<4)) << 8;

  00131	8b 53 48	 mov	 edx, DWORD PTR [rbx+72]
  00134	c1 e2 0c	 shl	 edx, 12
  00137	81 c2 00 88 ff
	ff		 add	 edx, -30720		; ffff8800H

; 840  :         uInt level_flags;
; 841  : 
; 842  :         if (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2)

  0013d	83 bb b0 00 00
	00 02		 cmp	 DWORD PTR [rbx+176], 2
  00144	7d 30		 jge	 SHORT $LN140@deflate
  00146	8b 83 ac 00 00
	00		 mov	 eax, DWORD PTR [rbx+172]
  0014c	83 f8 02	 cmp	 eax, 2
  0014f	7c 25		 jl	 SHORT $LN140@deflate

; 844  :         else if (s->level < 6)

  00151	83 f8 06	 cmp	 eax, 6
  00154	7d 0a		 jge	 SHORT $LN47@deflate

; 845  :             level_flags = 1;

  00156	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0015b	8d 48 20	 lea	 ecx, QWORD PTR [rax+32]
  0015e	eb 1d		 jmp	 SHORT $LN50@deflate
$LN47@deflate:

; 846  :         else if (s->level == 6)

  00160	75 0a		 jne	 SHORT $LN49@deflate

; 847  :             level_flags = 2;

  00162	b8 80 00 00 00	 mov	 eax, 128		; 00000080H
  00167	8d 48 20	 lea	 ecx, QWORD PTR [rax+32]
  0016a	eb 11		 jmp	 SHORT $LN50@deflate
$LN49@deflate:

; 848  :         else
; 849  :             level_flags = 3;

  0016c	b8 c0 00 00 00	 mov	 eax, 192		; 000000c0H
  00171	8d 48 20	 lea	 ecx, QWORD PTR [rax+32]
  00174	eb 07		 jmp	 SHORT $LN50@deflate
$LN140@deflate:

; 843  :             level_flags = 0;

  00176	8b c6		 mov	 eax, esi
  00178	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
$LN50@deflate:

; 850  :         header |= (level_flags << 6);
; 851  :         if (s->strstart != 0) header |= PRESET_DICT;
; 852  :         header += 31 - (header % 31);

  0017d	39 b3 94 00 00
	00		 cmp	 DWORD PTR [rbx+148], esi
  00183	0f 44 c8	 cmove	 ecx, eax
  00186	b8 85 10 42 08	 mov	 eax, 138547333		; 08421085H
  0018b	0b ca		 or	 ecx, edx
  0018d	f7 e1		 mul	 ecx
  0018f	2b ca		 sub	 ecx, edx
  00191	d1 e9		 shr	 ecx, 1
  00193	03 ca		 add	 ecx, edx
  00195	c1 e9 04	 shr	 ecx, 4
  00198	ff c1		 inc	 ecx
  0019a	6b d1 1f	 imul	 edx, ecx, 31

; 853  : 
; 854  :         putShortMSB(s, header);

  0019d	48 8b cb	 mov	 rcx, rbx
  001a0	e8 00 00 00 00	 call	 putShortMSB

; 855  : 
; 856  :         /* Save the adler32 of the preset dictionary: */
; 857  :         if (s->strstart != 0) {

  001a5	39 b3 94 00 00
	00		 cmp	 DWORD PTR [rbx+148], esi
  001ab	74 12		 je	 SHORT $LN52@deflate

; 858  :             putShortMSB(s, (uInt)(strm->adler >> 16));

  001ad	0f b7 57 4e	 movzx	 edx, WORD PTR [rdi+78]
  001b1	e8 00 00 00 00	 call	 putShortMSB

; 859  :             putShortMSB(s, (uInt)(strm->adler & 0xffff));

  001b6	0f b7 57 4c	 movzx	 edx, WORD PTR [rdi+76]
  001ba	e8 00 00 00 00	 call	 putShortMSB
$LN52@deflate:

; 860  :         }
; 861  :         strm->adler = adler32(0L, Z_NULL, 0);

  001bf	45 33 c0	 xor	 r8d, r8d
  001c2	33 d2		 xor	 edx, edx
  001c4	33 c9		 xor	 ecx, ecx
  001c6	e8 00 00 00 00	 call	 adler32
  001cb	89 47 4c	 mov	 DWORD PTR [rdi+76], eax

; 862  :         s->status = BUSY_STATE;
; 863  : 
; 864  :         /* Compression must start with an empty pending buffer */
; 865  :         flush_pending(strm);

  001ce	48 8b cf	 mov	 rcx, rdi
  001d1	c7 43 08 71 00
	00 00		 mov	 DWORD PTR [rbx+8], 113	; 00000071H
  001d8	e8 00 00 00 00	 call	 flush_pending

; 866  :         if (s->pending != 0) {

  001dd	39 73 28	 cmp	 DWORD PTR [rbx+40], esi
  001e0	0f 85 0f 07 00
	00		 jne	 $LN149@deflate
$LN128@deflate:

; 867  :             s->last_flush = -1;
; 868  :             return Z_OK;
; 869  :         }
; 870  :     }
; 871  : #ifdef GZIP
; 872  :     if (s->status == GZIP_STATE) {

  001e6	8b 43 08	 mov	 eax, DWORD PTR [rbx+8]
  001e9	83 f8 39	 cmp	 eax, 57			; 00000039H
  001ec	0f 85 e8 00 00
	00		 jne	 $LN56@deflate

; 873  :         /* gzip header */
; 874  :         strm->adler = crc32(0L, Z_NULL, 0);

  001f2	45 33 c0	 xor	 r8d, r8d
  001f5	33 d2		 xor	 edx, edx
  001f7	33 c9		 xor	 ecx, ecx
  001f9	e8 00 00 00 00	 call	 crc32
  001fe	89 47 4c	 mov	 DWORD PTR [rdi+76], eax

; 875  :         put_byte(s, 31);

  00201	8b 4b 28	 mov	 ecx, DWORD PTR [rbx+40]
  00204	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  00208	c6 04 01 1f	 mov	 BYTE PTR [rcx+rax], 31
  0020c	ff 43 28	 inc	 DWORD PTR [rbx+40]
  0020f	8b 4b 28	 mov	 ecx, DWORD PTR [rbx+40]

; 876  :         put_byte(s, 139);

  00212	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  00216	c6 04 01 8b	 mov	 BYTE PTR [rcx+rax], 139	; 0000008bH
  0021a	ff 43 28	 inc	 DWORD PTR [rbx+40]
  0021d	8b 4b 28	 mov	 ecx, DWORD PTR [rbx+40]

; 877  :         put_byte(s, 8);

  00220	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  00224	c6 04 01 08	 mov	 BYTE PTR [rcx+rax], 8
  00228	ff 43 28	 inc	 DWORD PTR [rbx+40]

; 878  :         if (s->gzhead == Z_NULL) {

  0022b	4c 8b 43 30	 mov	 r8, QWORD PTR [rbx+48]
  0022f	44 8b 4b 28	 mov	 r9d, DWORD PTR [rbx+40]
  00233	4d 85 c0	 test	 r8, r8
  00236	0f 85 96 01 00
	00		 jne	 $LN55@deflate

; 879  :             put_byte(s, 0);

  0023c	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  00240	41 88 34 01	 mov	 BYTE PTR [r9+rax], sil
  00244	ff 43 28	 inc	 DWORD PTR [rbx+40]
  00247	8b 4b 28	 mov	 ecx, DWORD PTR [rbx+40]

; 880  :             put_byte(s, 0);

  0024a	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  0024e	40 88 34 01	 mov	 BYTE PTR [rcx+rax], sil
  00252	ff 43 28	 inc	 DWORD PTR [rbx+40]
  00255	8b 4b 28	 mov	 ecx, DWORD PTR [rbx+40]

; 881  :             put_byte(s, 0);

  00258	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  0025c	40 88 34 01	 mov	 BYTE PTR [rcx+rax], sil
  00260	ff 43 28	 inc	 DWORD PTR [rbx+40]
  00263	8b 4b 28	 mov	 ecx, DWORD PTR [rbx+40]

; 882  :             put_byte(s, 0);

  00266	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  0026a	40 88 34 01	 mov	 BYTE PTR [rcx+rax], sil
  0026e	ff 43 28	 inc	 DWORD PTR [rbx+40]
  00271	8b 4b 28	 mov	 ecx, DWORD PTR [rbx+40]

; 883  :             put_byte(s, 0);

  00274	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  00278	40 88 34 01	 mov	 BYTE PTR [rcx+rax], sil
  0027c	8b 4b 28	 mov	 ecx, DWORD PTR [rbx+40]

; 884  :             put_byte(s, s->level == 9 ? 2 :

  0027f	8b 83 ac 00 00
	00		 mov	 eax, DWORD PTR [rbx+172]
  00285	ff c1		 inc	 ecx
  00287	89 4b 28	 mov	 DWORD PTR [rbx+40], ecx
  0028a	83 f8 09	 cmp	 eax, 9
  0028d	75 04		 jne	 SHORT $LN104@deflate
  0028f	b2 02		 mov	 dl, 2
  00291	eb 14		 jmp	 SHORT $LN103@deflate
$LN104@deflate:
  00293	83 bb b0 00 00
	00 02		 cmp	 DWORD PTR [rbx+176], 2
  0029a	7d 09		 jge	 SHORT $LN102@deflate
  0029c	83 f8 02	 cmp	 eax, 2
  0029f	7c 04		 jl	 SHORT $LN102@deflate
  002a1	32 d2		 xor	 dl, dl
  002a3	eb 02		 jmp	 SHORT $LN103@deflate
$LN102@deflate:
  002a5	b2 04		 mov	 dl, 4
$LN103@deflate:
  002a7	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  002ab	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  002ae	ff 43 28	 inc	 DWORD PTR [rbx+40]
  002b1	8b 4b 28	 mov	 ecx, DWORD PTR [rbx+40]

; 885  :                      (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
; 886  :                       4 : 0));
; 887  :             put_byte(s, OS_CODE);

  002b4	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  002b8	c6 04 01 0a	 mov	 BYTE PTR [rcx+rax], 10

; 888  :             s->status = BUSY_STATE;
; 889  : 
; 890  :             /* Compression must start with an empty pending buffer */
; 891  :             flush_pending(strm);

  002bc	48 8b cf	 mov	 rcx, rdi
  002bf	ff 43 28	 inc	 DWORD PTR [rbx+40]
  002c2	c7 43 08 71 00
	00 00		 mov	 DWORD PTR [rbx+8], 113	; 00000071H
  002c9	e8 00 00 00 00	 call	 flush_pending

; 892  :             if (s->pending != 0) {

  002ce	39 73 28	 cmp	 DWORD PTR [rbx+40], esi
  002d1	0f 85 1e 06 00
	00		 jne	 $LN149@deflate

; 893  :                 s->last_flush = -1;
; 894  :                 return Z_OK;
; 895  :             }
; 896  :         }

  002d7	8b 43 08	 mov	 eax, DWORD PTR [rbx+8]
$LN56@deflate:

; 921  :         }
; 922  :     }
; 923  :     if (s->status == EXTRA_STATE) {

  002da	83 f8 45	 cmp	 eax, 69			; 00000045H
  002dd	0f 85 33 02 00
	00		 jne	 $LN143@deflate
$LN148@deflate:

; 924  :         if (s->gzhead->extra != Z_NULL) {

  002e3	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  002e7	48 39 71 10	 cmp	 QWORD PTR [rcx+16], rsi
  002eb	0f 84 d5 00 00
	00		 je	 $LN141@deflate

; 925  :             ulg beg = s->pending;   /* start of bytes to update crc */
; 926  :             uInt left = (s->gzhead->extra_len & 0xffff) - s->gzindex;

  002f1	8b 53 38	 mov	 edx, DWORD PTR [rbx+56]
  002f4	44 0f b7 79 18	 movzx	 r15d, WORD PTR [rcx+24]
  002f9	44 8b 73 28	 mov	 r14d, DWORD PTR [rbx+40]
  002fd	44 2b fa	 sub	 r15d, edx

; 927  :             while (s->pending + left > s->pending_buf_size) {

  00300	8b 6b 18	 mov	 ebp, DWORD PTR [rbx+24]
  00303	43 8d 04 3e	 lea	 eax, DWORD PTR [r14+r15]
  00307	3b c5		 cmp	 eax, ebp
  00309	76 74		 jbe	 SHORT $LN3@deflate
  0030b	41 8b ce	 mov	 ecx, r14d
  0030e	66 90		 npad	 2
$LL2@deflate:

; 928  :                 uInt copy = s->pending_buf_size - s->pending;
; 929  :                 zmemcpy(s->pending_buf + s->pending,

  00310	48 8b 43 30	 mov	 rax, QWORD PTR [rbx+48]
  00314	2b e9		 sub	 ebp, ecx
  00316	8b 53 38	 mov	 edx, DWORD PTR [rbx+56]
  00319	48 03 4b 10	 add	 rcx, QWORD PTR [rbx+16]
  0031d	44 8b c5	 mov	 r8d, ebp
  00320	48 03 50 10	 add	 rdx, QWORD PTR [rax+16]
  00324	e8 00 00 00 00	 call	 memcpy

; 930  :                         s->gzhead->extra + s->gzindex, copy);
; 931  :                 s->pending = s->pending_buf_size;
; 932  :                 HCRC_UPDATE(beg);

  00329	48 8b 43 30	 mov	 rax, QWORD PTR [rbx+48]
  0032d	44 8b 43 18	 mov	 r8d, DWORD PTR [rbx+24]
  00331	44 89 43 28	 mov	 DWORD PTR [rbx+40], r8d
  00335	39 70 3c	 cmp	 DWORD PTR [rax+60], esi
  00338	74 1a		 je	 SHORT $LN4@deflate
  0033a	45 3b c6	 cmp	 r8d, r14d
  0033d	76 15		 jbe	 SHORT $LN4@deflate
  0033f	8b 4f 4c	 mov	 ecx, DWORD PTR [rdi+76]
  00342	45 2b c6	 sub	 r8d, r14d
  00345	41 8b d6	 mov	 edx, r14d
  00348	48 03 53 10	 add	 rdx, QWORD PTR [rbx+16]
  0034c	e8 00 00 00 00	 call	 crc32
  00351	89 47 4c	 mov	 DWORD PTR [rdi+76], eax
$LN4@deflate:

; 933  :                 s->gzindex += copy;

  00354	01 6b 38	 add	 DWORD PTR [rbx+56], ebp

; 934  :                 flush_pending(strm);

  00357	48 8b cf	 mov	 rcx, rdi
  0035a	e8 00 00 00 00	 call	 flush_pending

; 935  :                 if (s->pending != 0) {

  0035f	39 73 28	 cmp	 DWORD PTR [rbx+40], esi
  00362	0f 85 8d 05 00
	00		 jne	 $LN149@deflate

; 936  :                     s->last_flush = -1;
; 937  :                     return Z_OK;
; 938  :                 }
; 939  :                 beg = 0;
; 940  :                 left -= copy;

  00368	44 2b fd	 sub	 r15d, ebp
  0036b	8b ce		 mov	 ecx, esi
  0036d	8b 6b 18	 mov	 ebp, DWORD PTR [rbx+24]
  00370	44 8b f6	 mov	 r14d, esi
  00373	44 3b fd	 cmp	 r15d, ebp
  00376	77 98		 ja	 SHORT $LL2@deflate

; 988  :             } while (val != 0);

  00378	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  0037c	8b 53 38	 mov	 edx, DWORD PTR [rbx+56]
$LN3@deflate:

; 941  :             }
; 942  :             zmemcpy(s->pending_buf + s->pending,

  0037f	48 03 51 10	 add	 rdx, QWORD PTR [rcx+16]
  00383	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00387	41 8b ee	 mov	 ebp, r14d
  0038a	48 03 cd	 add	 rcx, rbp
  0038d	45 8b c7	 mov	 r8d, r15d
  00390	e8 00 00 00 00	 call	 memcpy

; 943  :                     s->gzhead->extra + s->gzindex, left);
; 944  :             s->pending += left;

  00395	44 8b 43 28	 mov	 r8d, DWORD PTR [rbx+40]

; 945  :             HCRC_UPDATE(beg);

  00399	48 8b 43 30	 mov	 rax, QWORD PTR [rbx+48]
  0039d	45 03 c7	 add	 r8d, r15d
  003a0	44 89 43 28	 mov	 DWORD PTR [rbx+40], r8d
  003a4	39 70 3c	 cmp	 DWORD PTR [rax+60], esi
  003a7	74 1a		 je	 SHORT $LN7@deflate
  003a9	45 3b c6	 cmp	 r8d, r14d
  003ac	76 15		 jbe	 SHORT $LN7@deflate
  003ae	48 8b 53 10	 mov	 rdx, QWORD PTR [rbx+16]
  003b2	45 2b c6	 sub	 r8d, r14d
  003b5	8b 4f 4c	 mov	 ecx, DWORD PTR [rdi+76]
  003b8	48 03 d5	 add	 rdx, rbp
  003bb	e8 00 00 00 00	 call	 crc32
  003c0	89 47 4c	 mov	 DWORD PTR [rdi+76], eax
$LN7@deflate:

; 946  :             s->gzindex = 0;

  003c3	89 73 38	 mov	 DWORD PTR [rbx+56], esi
$LN141@deflate:

; 947  :         }
; 948  :         s->status = NAME_STATE;

  003c6	c7 43 08 49 00
	00 00		 mov	 DWORD PTR [rbx+8], 73	; 00000049H
  003cd	e9 4d 01 00 00	 jmp	 $LN147@deflate
$LN55@deflate:

; 897  :         else {
; 898  :             put_byte(s, (s->gzhead->text ? 1 : 0) +

  003d2	49 8b 40 30	 mov	 rax, QWORD PTR [r8+48]
  003d6	48 f7 d8	 neg	 rax
  003d9	41 8b 40 3c	 mov	 eax, DWORD PTR [r8+60]
  003dd	1a d2		 sbb	 dl, dl
  003df	80 e2 10	 and	 dl, 16
  003e2	f7 d8		 neg	 eax
  003e4	49 8b 40 20	 mov	 rax, QWORD PTR [r8+32]
  003e8	1a c9		 sbb	 cl, cl
  003ea	80 e1 02	 and	 cl, 2
  003ed	02 d1		 add	 dl, cl
  003ef	48 f7 d8	 neg	 rax
  003f2	49 8b 40 10	 mov	 rax, QWORD PTR [r8+16]
  003f6	1a c9		 sbb	 cl, cl
  003f8	80 e1 08	 and	 cl, 8
  003fb	02 d1		 add	 dl, cl
  003fd	48 f7 d8	 neg	 rax
  00400	1a c9		 sbb	 cl, cl
  00402	80 e1 04	 and	 cl, 4
  00405	02 d1		 add	 dl, cl
  00407	41 39 30	 cmp	 DWORD PTR [r8], esi
  0040a	0f 95 c0	 setne	 al
  0040d	02 d0		 add	 dl, al
  0040f	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  00413	41 88 14 01	 mov	 BYTE PTR [r9+rax], dl
  00417	ff 43 28	 inc	 DWORD PTR [rbx+40]
  0041a	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]

; 899  :                      (s->gzhead->hcrc ? 2 : 0) +
; 900  :                      (s->gzhead->extra == Z_NULL ? 0 : 4) +
; 901  :                      (s->gzhead->name == Z_NULL ? 0 : 8) +
; 902  :                      (s->gzhead->comment == Z_NULL ? 0 : 16)
; 903  :                      );
; 904  :             put_byte(s, (Byte)(s->gzhead->time & 0xff));

  0041d	48 8b 43 30	 mov	 rax, QWORD PTR [rbx+48]
  00421	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00425	0f b6 40 04	 movzx	 eax, BYTE PTR [rax+4]
  00429	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  0042c	ff 43 28	 inc	 DWORD PTR [rbx+40]
  0042f	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]

; 905  :             put_byte(s, (Byte)((s->gzhead->time >> 8) & 0xff));

  00432	48 8b 43 30	 mov	 rax, QWORD PTR [rbx+48]
  00436	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  0043a	0f b6 40 05	 movzx	 eax, BYTE PTR [rax+5]
  0043e	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00441	ff 43 28	 inc	 DWORD PTR [rbx+40]
  00444	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]

; 906  :             put_byte(s, (Byte)((s->gzhead->time >> 16) & 0xff));

  00447	48 8b 43 30	 mov	 rax, QWORD PTR [rbx+48]
  0044b	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  0044f	0f b6 40 06	 movzx	 eax, BYTE PTR [rax+6]
  00453	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00456	ff 43 28	 inc	 DWORD PTR [rbx+40]

; 907  :             put_byte(s, (Byte)((s->gzhead->time >> 24) & 0xff));

  00459	48 8b 43 30	 mov	 rax, QWORD PTR [rbx+48]
  0045d	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]
  00460	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00464	0f b6 40 07	 movzx	 eax, BYTE PTR [rax+7]
  00468	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  0046b	8b 4b 28	 mov	 ecx, DWORD PTR [rbx+40]

; 908  :             put_byte(s, s->level == 9 ? 2 :

  0046e	8b 83 ac 00 00
	00		 mov	 eax, DWORD PTR [rbx+172]
  00474	ff c1		 inc	 ecx
  00476	89 4b 28	 mov	 DWORD PTR [rbx+40], ecx
  00479	83 f8 09	 cmp	 eax, 9
  0047c	75 04		 jne	 SHORT $LN108@deflate
  0047e	b2 02		 mov	 dl, 2
  00480	eb 14		 jmp	 SHORT $LN107@deflate
$LN108@deflate:
  00482	83 bb b0 00 00
	00 02		 cmp	 DWORD PTR [rbx+176], 2
  00489	7d 09		 jge	 SHORT $LN106@deflate
  0048b	83 f8 02	 cmp	 eax, 2
  0048e	7c 04		 jl	 SHORT $LN106@deflate
  00490	32 d2		 xor	 dl, dl
  00492	eb 02		 jmp	 SHORT $LN107@deflate
$LN106@deflate:
  00494	b2 04		 mov	 dl, 4
$LN107@deflate:
  00496	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  0049a	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  0049d	ff 43 28	 inc	 DWORD PTR [rbx+40]

; 909  :                      (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
; 910  :                       4 : 0));
; 911  :             put_byte(s, s->gzhead->os & 0xff);

  004a0	48 8b 43 30	 mov	 rax, QWORD PTR [rbx+48]
  004a4	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]
  004a7	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  004ab	0f b6 40 0c	 movzx	 eax, BYTE PTR [rax+12]
  004af	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  004b2	8b 4b 28	 mov	 ecx, DWORD PTR [rbx+40]

; 912  :             if (s->gzhead->extra != Z_NULL) {

  004b5	48 8b 43 30	 mov	 rax, QWORD PTR [rbx+48]
  004b9	ff c1		 inc	 ecx
  004bb	89 4b 28	 mov	 DWORD PTR [rbx+40], ecx
  004be	48 39 70 10	 cmp	 QWORD PTR [rax+16], rsi
  004c2	74 2c		 je	 SHORT $LN58@deflate

; 913  :                 put_byte(s, s->gzhead->extra_len & 0xff);

  004c4	0f b6 40 18	 movzx	 eax, BYTE PTR [rax+24]
  004c8	8b d1		 mov	 edx, ecx
  004ca	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  004ce	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  004d1	ff 43 28	 inc	 DWORD PTR [rbx+40]

; 914  :                 put_byte(s, (s->gzhead->extra_len >> 8) & 0xff);

  004d4	48 8b 43 30	 mov	 rax, QWORD PTR [rbx+48]
  004d8	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]
  004db	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  004df	0f b6 40 19	 movzx	 eax, BYTE PTR [rax+25]
  004e3	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  004e6	ff 43 28	 inc	 DWORD PTR [rbx+40]
  004e9	8b 4b 28	 mov	 ecx, DWORD PTR [rbx+40]
  004ec	48 8b 43 30	 mov	 rax, QWORD PTR [rbx+48]
$LN58@deflate:

; 915  :             }
; 916  :             if (s->gzhead->hcrc)

  004f0	39 70 3c	 cmp	 DWORD PTR [rax+60], esi
  004f3	74 12		 je	 SHORT $LN59@deflate

; 917  :                 strm->adler = crc32(strm->adler, s->pending_buf,

  004f5	48 8b 53 10	 mov	 rdx, QWORD PTR [rbx+16]
  004f9	44 8b c1	 mov	 r8d, ecx
  004fc	8b 4f 4c	 mov	 ecx, DWORD PTR [rdi+76]
  004ff	e8 00 00 00 00	 call	 crc32
  00504	89 47 4c	 mov	 DWORD PTR [rdi+76], eax
$LN59@deflate:

; 918  :                                     s->pending);
; 919  :             s->gzindex = 0;

  00507	89 73 38	 mov	 DWORD PTR [rbx+56], esi

; 920  :             s->status = EXTRA_STATE;

  0050a	c7 43 08 45 00
	00 00		 mov	 DWORD PTR [rbx+8], 69	; 00000045H

; 992  :     }
; 993  :     if (s->status == HCRC_STATE) {

  00511	e9 cd fd ff ff	 jmp	 $LN148@deflate
$LN143@deflate:

; 949  :     }
; 950  :     if (s->status == NAME_STATE) {

  00516	83 f8 49	 cmp	 eax, 73			; 00000049H
  00519	0f 85 b2 00 00
	00		 jne	 $LN144@deflate
$LN147@deflate:

; 951  :         if (s->gzhead->name != Z_NULL) {

  0051f	48 8b 43 30	 mov	 rax, QWORD PTR [rbx+48]
  00523	48 39 70 20	 cmp	 QWORD PTR [rax+32], rsi
  00527	0f 84 9b 00 00
	00		 je	 $LN142@deflate

; 952  :             ulg beg = s->pending;   /* start of bytes to update crc */

  0052d	44 8b 4b 28	 mov	 r9d, DWORD PTR [rbx+40]
  00531	45 8b c1	 mov	 r8d, r9d
$LL12@deflate:

; 953  :             int val;
; 954  :             do {
; 955  :                 if (s->pending == s->pending_buf_size) {

  00534	44 3b 43 18	 cmp	 r8d, DWORD PTR [rbx+24]
  00538	75 3a		 jne	 SHORT $LN67@deflate

; 956  :                     HCRC_UPDATE(beg);

  0053a	48 8b 43 30	 mov	 rax, QWORD PTR [rbx+48]
  0053e	39 70 3c	 cmp	 DWORD PTR [rax+60], esi
  00541	74 1a		 je	 SHORT $LN13@deflate
  00543	45 3b c1	 cmp	 r8d, r9d
  00546	76 15		 jbe	 SHORT $LN13@deflate
  00548	8b 4f 4c	 mov	 ecx, DWORD PTR [rdi+76]
  0054b	45 2b c1	 sub	 r8d, r9d
  0054e	41 8b d1	 mov	 edx, r9d
  00551	48 03 53 10	 add	 rdx, QWORD PTR [rbx+16]
  00555	e8 00 00 00 00	 call	 crc32
  0055a	89 47 4c	 mov	 DWORD PTR [rdi+76], eax
$LN13@deflate:

; 957  :                     flush_pending(strm);

  0055d	48 8b cf	 mov	 rcx, rdi
  00560	e8 00 00 00 00	 call	 flush_pending

; 958  :                     if (s->pending != 0) {

  00565	39 73 28	 cmp	 DWORD PTR [rbx+40], esi
  00568	0f 85 87 03 00
	00		 jne	 $LN149@deflate

; 959  :                         s->last_flush = -1;
; 960  :                         return Z_OK;
; 961  :                     }
; 962  :                     beg = 0;

  0056e	44 8b ce	 mov	 r9d, esi
  00571	44 8b c6	 mov	 r8d, esi
$LN67@deflate:

; 963  :                 }
; 964  :                 val = s->gzhead->name[s->gzindex++];

  00574	8b 4b 38	 mov	 ecx, DWORD PTR [rbx+56]
  00577	48 8b 43 30	 mov	 rax, QWORD PTR [rbx+48]
  0057b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0057f	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00583	8d 41 01	 lea	 eax, DWORD PTR [rcx+1]

; 965  :                 put_byte(s, val);

  00586	41 8b c8	 mov	 ecx, r8d
  00589	89 43 38	 mov	 DWORD PTR [rbx+56], eax
  0058c	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  00590	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00593	44 8b 43 28	 mov	 r8d, DWORD PTR [rbx+40]
  00597	41 ff c0	 inc	 r8d
  0059a	44 89 43 28	 mov	 DWORD PTR [rbx+40], r8d

; 966  :             } while (val != 0);

  0059e	84 d2		 test	 dl, dl
  005a0	75 92		 jne	 SHORT $LL12@deflate

; 967  :             HCRC_UPDATE(beg);

  005a2	48 8b 43 30	 mov	 rax, QWORD PTR [rbx+48]
  005a6	39 70 3c	 cmp	 DWORD PTR [rax+60], esi
  005a9	74 1a		 je	 SHORT $LN16@deflate
  005ab	45 3b c1	 cmp	 r8d, r9d
  005ae	76 15		 jbe	 SHORT $LN16@deflate
  005b0	8b 4f 4c	 mov	 ecx, DWORD PTR [rdi+76]
  005b3	45 2b c1	 sub	 r8d, r9d
  005b6	41 8b d1	 mov	 edx, r9d
  005b9	48 03 53 10	 add	 rdx, QWORD PTR [rbx+16]
  005bd	e8 00 00 00 00	 call	 crc32
  005c2	89 47 4c	 mov	 DWORD PTR [rdi+76], eax
$LN16@deflate:

; 968  :             s->gzindex = 0;

  005c5	89 73 38	 mov	 DWORD PTR [rbx+56], esi
$LN142@deflate:

; 969  :         }
; 970  :         s->status = COMMENT_STATE;

  005c8	c7 43 08 5b 00
	00 00		 mov	 DWORD PTR [rbx+8], 91	; 0000005bH
  005cf	eb 09		 jmp	 SHORT $LN146@deflate
$LN144@deflate:

; 971  :     }
; 972  :     if (s->status == COMMENT_STATE) {

  005d1	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  005d4	0f 85 b0 00 00
	00		 jne	 $LN71@deflate
$LN146@deflate:

; 973  :         if (s->gzhead->comment != Z_NULL) {

  005da	48 8b 43 30	 mov	 rax, QWORD PTR [rbx+48]
  005de	48 39 70 30	 cmp	 QWORD PTR [rax+48], rsi
  005e2	0f 84 99 00 00
	00		 je	 $LN26@deflate

; 974  :             ulg beg = s->pending;   /* start of bytes to update crc */

  005e8	44 8b 4b 28	 mov	 r9d, DWORD PTR [rbx+40]
  005ec	45 8b c1	 mov	 r8d, r9d
  005ef	90		 npad	 1
$LL21@deflate:

; 975  :             int val;
; 976  :             do {
; 977  :                 if (s->pending == s->pending_buf_size) {

  005f0	44 3b 43 18	 cmp	 r8d, DWORD PTR [rbx+24]
  005f4	75 3a		 jne	 SHORT $LN73@deflate

; 978  :                     HCRC_UPDATE(beg);

  005f6	48 8b 43 30	 mov	 rax, QWORD PTR [rbx+48]
  005fa	39 70 3c	 cmp	 DWORD PTR [rax+60], esi
  005fd	74 1a		 je	 SHORT $LN22@deflate
  005ff	45 3b c1	 cmp	 r8d, r9d
  00602	76 15		 jbe	 SHORT $LN22@deflate
  00604	8b 4f 4c	 mov	 ecx, DWORD PTR [rdi+76]
  00607	45 2b c1	 sub	 r8d, r9d
  0060a	41 8b d1	 mov	 edx, r9d
  0060d	48 03 53 10	 add	 rdx, QWORD PTR [rbx+16]
  00611	e8 00 00 00 00	 call	 crc32
  00616	89 47 4c	 mov	 DWORD PTR [rdi+76], eax
$LN22@deflate:

; 979  :                     flush_pending(strm);

  00619	48 8b cf	 mov	 rcx, rdi
  0061c	e8 00 00 00 00	 call	 flush_pending

; 980  :                     if (s->pending != 0) {

  00621	39 73 28	 cmp	 DWORD PTR [rbx+40], esi
  00624	0f 85 cb 02 00
	00		 jne	 $LN149@deflate

; 981  :                         s->last_flush = -1;
; 982  :                         return Z_OK;
; 983  :                     }
; 984  :                     beg = 0;

  0062a	44 8b ce	 mov	 r9d, esi
  0062d	44 8b c6	 mov	 r8d, esi
$LN73@deflate:

; 985  :                 }
; 986  :                 val = s->gzhead->comment[s->gzindex++];

  00630	8b 4b 38	 mov	 ecx, DWORD PTR [rbx+56]
  00633	48 8b 43 30	 mov	 rax, QWORD PTR [rbx+48]
  00637	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  0063b	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  0063f	8d 41 01	 lea	 eax, DWORD PTR [rcx+1]

; 987  :                 put_byte(s, val);

  00642	41 8b c8	 mov	 ecx, r8d
  00645	89 43 38	 mov	 DWORD PTR [rbx+56], eax
  00648	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  0064c	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  0064f	44 8b 43 28	 mov	 r8d, DWORD PTR [rbx+40]
  00653	41 ff c0	 inc	 r8d
  00656	44 89 43 28	 mov	 DWORD PTR [rbx+40], r8d

; 988  :             } while (val != 0);

  0065a	84 d2		 test	 dl, dl
  0065c	75 92		 jne	 SHORT $LL21@deflate

; 989  :             HCRC_UPDATE(beg);

  0065e	48 8b 43 30	 mov	 rax, QWORD PTR [rbx+48]
  00662	39 70 3c	 cmp	 DWORD PTR [rax+60], esi
  00665	74 1a		 je	 SHORT $LN26@deflate
  00667	45 3b c1	 cmp	 r8d, r9d
  0066a	76 15		 jbe	 SHORT $LN26@deflate
  0066c	8b 4f 4c	 mov	 ecx, DWORD PTR [rdi+76]
  0066f	45 2b c1	 sub	 r8d, r9d
  00672	41 8b d1	 mov	 edx, r9d
  00675	48 03 53 10	 add	 rdx, QWORD PTR [rbx+16]
  00679	e8 00 00 00 00	 call	 crc32
  0067e	89 47 4c	 mov	 DWORD PTR [rdi+76], eax
$LN26@deflate:

; 990  :         }
; 991  :         s->status = HCRC_STATE;

  00681	c7 43 08 67 00
	00 00		 mov	 DWORD PTR [rbx+8], 103	; 00000067H

; 992  :     }
; 993  :     if (s->status == HCRC_STATE) {

  00688	eb 05		 jmp	 SHORT $LN139@deflate
$LN71@deflate:
  0068a	83 f8 67	 cmp	 eax, 103		; 00000067H
  0068d	75 6f		 jne	 SHORT $LN134@deflate
$LN139@deflate:

; 994  :         if (s->gzhead->hcrc) {

  0068f	48 8b 43 30	 mov	 rax, QWORD PTR [rbx+48]
  00693	39 70 3c	 cmp	 DWORD PTR [rax+60], esi
  00696	74 4e		 je	 SHORT $LN78@deflate

; 995  :             if (s->pending + 2 > s->pending_buf_size) {

  00698	8b 4b 28	 mov	 ecx, DWORD PTR [rbx+40]
  0069b	8d 41 02	 lea	 eax, DWORD PTR [rcx+2]
  0069e	3b 43 18	 cmp	 eax, DWORD PTR [rbx+24]
  006a1	76 13		 jbe	 SHORT $LN133@deflate

; 996  :                 flush_pending(strm);

  006a3	48 8b cf	 mov	 rcx, rdi
  006a6	e8 00 00 00 00	 call	 flush_pending

; 997  :                 if (s->pending != 0) {

  006ab	8b 4b 28	 mov	 ecx, DWORD PTR [rbx+40]
  006ae	85 c9		 test	 ecx, ecx
  006b0	0f 85 3f 02 00
	00		 jne	 $LN149@deflate
$LN133@deflate:

; 998  :                     s->last_flush = -1;
; 999  :                     return Z_OK;
; 1000 :                 }
; 1001 :             }
; 1002 :             put_byte(s, (Byte)(strm->adler & 0xff));

  006b6	0f b6 47 4c	 movzx	 eax, BYTE PTR [rdi+76]

; 1003 :             put_byte(s, (Byte)((strm->adler >> 8) & 0xff));
; 1004 :             strm->adler = crc32(0L, Z_NULL, 0);

  006ba	45 33 c0	 xor	 r8d, r8d
  006bd	8b d1		 mov	 edx, ecx
  006bf	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  006c3	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  006c6	ff 43 28	 inc	 DWORD PTR [rbx+40]
  006c9	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]
  006cc	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  006d0	0f b6 47 4d	 movzx	 eax, BYTE PTR [rdi+77]
  006d4	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  006d7	33 d2		 xor	 edx, edx
  006d9	ff 43 28	 inc	 DWORD PTR [rbx+40]
  006dc	33 c9		 xor	 ecx, ecx
  006de	e8 00 00 00 00	 call	 crc32
  006e3	89 47 4c	 mov	 DWORD PTR [rdi+76], eax
$LN78@deflate:

; 1005 :         }
; 1006 :         s->status = BUSY_STATE;
; 1007 : 
; 1008 :         /* Compression must start with an empty pending buffer */
; 1009 :         flush_pending(strm);

  006e6	48 8b cf	 mov	 rcx, rdi
  006e9	c7 43 08 71 00
	00 00		 mov	 DWORD PTR [rbx+8], 113	; 00000071H
  006f0	e8 00 00 00 00	 call	 flush_pending

; 1010 :         if (s->pending != 0) {

  006f5	39 73 28	 cmp	 DWORD PTR [rbx+40], esi
  006f8	0f 85 f7 01 00
	00		 jne	 $LN149@deflate
$LN134@deflate:

; 1011 :             s->last_flush = -1;
; 1012 :             return Z_OK;
; 1013 :         }
; 1014 :     }
; 1015 : #endif
; 1016 : 
; 1017 :     /* Start a new block or continue the current one.
; 1018 :      */
; 1019 :     if (strm->avail_in != 0 || s->lookahead != 0 ||

  006fe	39 77 08	 cmp	 DWORD PTR [rdi+8], esi
  00701	75 1e		 jne	 SHORT $LN83@deflate
  00703	39 b3 9c 00 00
	00		 cmp	 DWORD PTR [rbx+156], esi
  00709	75 16		 jne	 SHORT $LN83@deflate
  0070b	45 85 e4	 test	 r12d, r12d
  0070e	0f 84 e8 01 00
	00		 je	 $LN88@deflate
  00714	81 7b 08 9a 02
	00 00		 cmp	 DWORD PTR [rbx+8], 666	; 0000029aH
  0071b	0f 84 ea 00 00
	00		 je	 $LN95@deflate
$LN83@deflate:

; 1020 :         (flush != Z_NO_FLUSH && s->status != FINISH_STATE)) {
; 1021 :         block_state bstate;
; 1022 : 
; 1023 :         bstate = s->level == 0 ? deflate_stored(s, flush) :

  00721	48 63 8b ac 00
	00 00		 movsxd	 rcx, DWORD PTR [rbx+172]
  00728	41 8b d4	 mov	 edx, r12d
  0072b	85 c9		 test	 ecx, ecx
  0072d	75 0a		 jne	 SHORT $LN114@deflate
  0072f	48 8b cb	 mov	 rcx, rbx
  00732	e8 00 00 00 00	 call	 deflate_stored
  00737	eb 38		 jmp	 SHORT $LN158@deflate
$LN114@deflate:
  00739	8b 83 b0 00 00
	00		 mov	 eax, DWORD PTR [rbx+176]
  0073f	83 f8 02	 cmp	 eax, 2
  00742	75 0a		 jne	 SHORT $LN112@deflate
  00744	48 8b cb	 mov	 rcx, rbx
  00747	e8 00 00 00 00	 call	 deflate_huff
  0074c	eb 23		 jmp	 SHORT $LN158@deflate
$LN112@deflate:
  0074e	83 f8 03	 cmp	 eax, 3
  00751	75 0a		 jne	 SHORT $LN110@deflate
  00753	48 8b cb	 mov	 rcx, rbx
  00756	e8 00 00 00 00	 call	 deflate_rle
  0075b	eb 14		 jmp	 SHORT $LN158@deflate
$LN110@deflate:
  0075d	48 8b c1	 mov	 rax, rcx
  00760	4c 8d 05 08 00
	00 00		 lea	 r8, OFFSET FLAT:configuration_table+8
  00767	48 03 c0	 add	 rax, rax
  0076a	48 8b cb	 mov	 rcx, rbx
  0076d	41 ff 14 c0	 call	 QWORD PTR [r8+rax*8]
$LN158@deflate:

; 1024 :                  s->strategy == Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :
; 1025 :                  s->strategy == Z_RLE ? deflate_rle(s, flush) :
; 1026 :                  (*(configuration_table[s->level].func))(s, flush);
; 1027 : 
; 1028 :         if (bstate == finish_started || bstate == finish_done) {

  00771	8b c8		 mov	 ecx, eax
  00773	8d 40 fe	 lea	 eax, DWORD PTR [rax-2]
  00776	83 f8 01	 cmp	 eax, 1
  00779	77 07		 ja	 SHORT $LN84@deflate

; 1029 :             s->status = FINISH_STATE;

  0077b	c7 43 08 9a 02
	00 00		 mov	 DWORD PTR [rbx+8], 666	; 0000029aH
$LN84@deflate:

; 1030 :         }
; 1031 :         if (bstate == need_more || bstate == finish_started) {

  00782	f7 c1 fd ff ff
	ff		 test	 ecx, -3			; fffffffdH
  00788	0f 84 62 01 00
	00		 je	 $LN87@deflate

; 1036 :             /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
; 1037 :              * of deflate should use the same flush parameter to make sure
; 1038 :              * that the flush is complete. So we don't have to output an
; 1039 :              * empty block here, this will be done at next call. This also
; 1040 :              * ensures that for a very small output buffer, we emit at most
; 1041 :              * one empty block.
; 1042 :              */
; 1043 :         }
; 1044 :         if (bstate == block_done) {

  0078e	83 f9 01	 cmp	 ecx, 1
  00791	75 78		 jne	 SHORT $LN95@deflate

; 1045 :             if (flush == Z_PARTIAL_FLUSH) {

  00793	44 3b e1	 cmp	 r12d, ecx
  00796	75 0a		 jne	 SHORT $LN90@deflate

; 1046 :                 _tr_align(s);

  00798	48 8b cb	 mov	 rcx, rbx
  0079b	e8 00 00 00 00	 call	 _tr_align
  007a0	eb 58		 jmp	 SHORT $LN94@deflate
$LN90@deflate:

; 1047 :             } else if (flush != Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

  007a2	41 83 fc 05	 cmp	 r12d, 5
  007a6	74 52		 je	 SHORT $LN94@deflate

; 1048 :                 _tr_stored_block(s, (char*)0, 0L, 0);

  007a8	45 33 c9	 xor	 r9d, r9d
  007ab	45 33 c0	 xor	 r8d, r8d
  007ae	33 d2		 xor	 edx, edx
  007b0	48 8b cb	 mov	 rcx, rbx
  007b3	e8 00 00 00 00	 call	 _tr_stored_block

; 1049 :                 /* For a full flush, this empty block will be recognized
; 1050 :                  * as a special marker by inflate_sync().
; 1051 :                  */
; 1052 :                 if (flush == Z_FULL_FLUSH) {

  007b8	41 83 fc 03	 cmp	 r12d, 3
  007bc	75 3c		 jne	 SHORT $LN94@deflate

; 1053 :                     CLEAR_HASH(s);             /* forget history */

  007be	8b 4b 74	 mov	 ecx, DWORD PTR [rbx+116]
  007c1	33 d2		 xor	 edx, edx
  007c3	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]
  007c7	ff c9		 dec	 ecx
  007c9	66 89 34 48	 mov	 WORD PTR [rax+rcx*2], si
  007cd	44 8b 43 74	 mov	 r8d, DWORD PTR [rbx+116]
  007d1	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  007d5	41 ff c8	 dec	 r8d
  007d8	4d 03 c0	 add	 r8, r8
  007db	e8 00 00 00 00	 call	 memset

; 1054 :                     if (s->lookahead == 0) {

  007e0	39 b3 9c 00 00
	00		 cmp	 DWORD PTR [rbx+156], esi
  007e6	75 12		 jne	 SHORT $LN94@deflate

; 1055 :                         s->strstart = 0;

  007e8	89 b3 94 00 00
	00		 mov	 DWORD PTR [rbx+148], esi

; 1056 :                         s->block_start = 0L;

  007ee	89 b3 84 00 00
	00		 mov	 DWORD PTR [rbx+132], esi

; 1057 :                         s->insert = 0;

  007f4	89 b3 08 17 00
	00		 mov	 DWORD PTR [rbx+5896], esi
$LN94@deflate:

; 1058 :                     }
; 1059 :                 }
; 1060 :             }
; 1061 :             flush_pending(strm);

  007fa	48 8b cf	 mov	 rcx, rdi
  007fd	e8 00 00 00 00	 call	 flush_pending

; 1062 :             if (strm->avail_out == 0) {

  00802	39 77 18	 cmp	 DWORD PTR [rdi+24], esi
  00805	0f 84 ea 00 00
	00		 je	 $LN149@deflate
$LN95@deflate:

; 1063 :               s->last_flush = -1; /* avoid BUF_ERROR at next call, see above */
; 1064 :               return Z_OK;
; 1065 :             }
; 1066 :         }
; 1067 :     }
; 1068 : 
; 1069 :     if (flush != Z_FINISH) return Z_OK;

  0080b	41 83 fc 04	 cmp	 r12d, 4
  0080f	0f 85 e7 00 00
	00		 jne	 $LN88@deflate

; 1070 :     if (s->wrap <= 0) return Z_STREAM_END;

  00815	8b 43 2c	 mov	 eax, DWORD PTR [rbx+44]
  00818	85 c0		 test	 eax, eax
  0081a	7f 0a		 jg	 SHORT $LN97@deflate
  0081c	41 8d 44 24 fd	 lea	 eax, QWORD PTR [r12-3]
  00821	e9 cf f8 ff ff	 jmp	 $LN157@deflate
$LN97@deflate:

; 1071 : 
; 1072 :     /* Write the trailer */
; 1073 : #ifdef GZIP
; 1074 :     if (s->wrap == 2) {

  00826	83 f8 02	 cmp	 eax, 2
  00829	0f 85 8a 00 00
	00		 jne	 $LN98@deflate

; 1075 :         put_byte(s, (Byte)(strm->adler & 0xff));

  0082f	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]
  00832	0f b6 47 4c	 movzx	 eax, BYTE PTR [rdi+76]
  00836	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  0083a	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  0083d	ff 43 28	 inc	 DWORD PTR [rbx+40]
  00840	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]

; 1076 :         put_byte(s, (Byte)((strm->adler >> 8) & 0xff));

  00843	0f b6 47 4d	 movzx	 eax, BYTE PTR [rdi+77]
  00847	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  0084b	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  0084e	ff 43 28	 inc	 DWORD PTR [rbx+40]
  00851	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]

; 1077 :         put_byte(s, (Byte)((strm->adler >> 16) & 0xff));

  00854	0f b6 47 4e	 movzx	 eax, BYTE PTR [rdi+78]
  00858	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  0085c	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  0085f	ff 43 28	 inc	 DWORD PTR [rbx+40]
  00862	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]

; 1078 :         put_byte(s, (Byte)((strm->adler >> 24) & 0xff));

  00865	0f b6 47 4f	 movzx	 eax, BYTE PTR [rdi+79]
  00869	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  0086d	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00870	ff 43 28	 inc	 DWORD PTR [rbx+40]
  00873	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]

; 1079 :         put_byte(s, (Byte)(strm->total_in & 0xff));

  00876	0f b6 47 0c	 movzx	 eax, BYTE PTR [rdi+12]
  0087a	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  0087e	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00881	ff 43 28	 inc	 DWORD PTR [rbx+40]
  00884	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]

; 1080 :         put_byte(s, (Byte)((strm->total_in >> 8) & 0xff));

  00887	0f b6 47 0d	 movzx	 eax, BYTE PTR [rdi+13]
  0088b	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  0088f	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00892	ff 43 28	 inc	 DWORD PTR [rbx+40]
  00895	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]

; 1081 :         put_byte(s, (Byte)((strm->total_in >> 16) & 0xff));

  00898	0f b6 47 0e	 movzx	 eax, BYTE PTR [rdi+14]
  0089c	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  008a0	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  008a3	ff 43 28	 inc	 DWORD PTR [rbx+40]
  008a6	8b 53 28	 mov	 edx, DWORD PTR [rbx+40]

; 1082 :         put_byte(s, (Byte)((strm->total_in >> 24) & 0xff));

  008a9	0f b6 47 0f	 movzx	 eax, BYTE PTR [rdi+15]
  008ad	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  008b1	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  008b4	ff 43 28	 inc	 DWORD PTR [rbx+40]

; 1083 :     }

  008b7	eb 15		 jmp	 SHORT $LN99@deflate
$LN98@deflate:

; 1084 :     else
; 1085 : #endif
; 1086 :     {
; 1087 :         putShortMSB(s, (uInt)(strm->adler >> 16));

  008b9	0f b7 57 4e	 movzx	 edx, WORD PTR [rdi+78]
  008bd	48 8b cb	 mov	 rcx, rbx
  008c0	e8 00 00 00 00	 call	 putShortMSB

; 1088 :         putShortMSB(s, (uInt)(strm->adler & 0xffff));

  008c5	0f b7 57 4c	 movzx	 edx, WORD PTR [rdi+76]
  008c9	e8 00 00 00 00	 call	 putShortMSB
$LN99@deflate:

; 1089 :     }
; 1090 :     flush_pending(strm);

  008ce	48 8b cf	 mov	 rcx, rdi
  008d1	e8 00 00 00 00	 call	 flush_pending

; 1091 :     /* If avail_out is zero, the application will call deflate again
; 1092 :      * to flush the rest.
; 1093 :      */
; 1094 :     if (s->wrap > 0) s->wrap = -s->wrap; /* write the trailer only once! */

  008d6	8b 43 2c	 mov	 eax, DWORD PTR [rbx+44]
  008d9	85 c0		 test	 eax, eax
  008db	7e 05		 jle	 SHORT $LN100@deflate
  008dd	f7 d8		 neg	 eax
  008df	89 43 2c	 mov	 DWORD PTR [rbx+44], eax
$LN100@deflate:

; 1095 :     return s->pending != 0 ? Z_OK : Z_STREAM_END;

  008e2	39 73 28	 cmp	 DWORD PTR [rbx+40], esi
  008e5	40 0f 94 c6	 sete	 sil
  008e9	8b c6		 mov	 eax, esi
  008eb	e9 05 f8 ff ff	 jmp	 $LN157@deflate
$LN87@deflate:

; 1032 :             if (strm->avail_out == 0) {

  008f0	39 77 18	 cmp	 DWORD PTR [rdi+24], esi
  008f3	75 07		 jne	 SHORT $LN88@deflate
$LN149@deflate:

; 1033 :                 s->last_flush = -1; /* avoid BUF_ERROR next call, see above */

  008f5	c7 43 40 ff ff
	ff ff		 mov	 DWORD PTR [rbx+64], -1
$LN88@deflate:

; 1034 :             }
; 1035 :             return Z_OK;

  008fc	33 c0		 xor	 eax, eax
  008fe	e9 f2 f7 ff ff	 jmp	 $LN157@deflate
$LN34@deflate:

; 798  :         (s->status == FINISH_STATE && flush != Z_FINISH)) {
; 799  :         ERR_RETURN(strm, Z_STREAM_ERROR);

  00903	48 8b 05 20 00
	00 00		 mov	 rax, QWORD PTR z_errmsg+32
  0090a	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0090f	48 89 47 20	 mov	 QWORD PTR [rdi+32], rax
  00913	b8 fe ff ff ff	 mov	 eax, -2

; 1096 : }

  00918	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0091c	41 5c		 pop	 r12
  0091e	5f		 pop	 rdi
  0091f	c3		 ret	 0
$LN32@deflate:

; 792  :         return Z_STREAM_ERROR;

  00920	b8 fe ff ff ff	 mov	 eax, -2

; 1096 : }

  00925	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00929	41 5c		 pop	 r12
  0092b	5f		 pop	 rdi
  0092c	c3		 ret	 0
deflate	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\deflate.c
;	COMDAT deflateEnd
_TEXT	SEGMENT
strm$ = 48
deflateEnd PROC						; COMDAT

; 1101 : {

$LN9:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 1102 :     int status;
; 1103 : 
; 1104 :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00009	e8 00 00 00 00	 call	 deflateStateCheck
  0000e	85 c0		 test	 eax, eax
  00010	74 0b		 je	 SHORT $LN2@deflateEnd
  00012	b8 fe ff ff ff	 mov	 eax, -2

; 1118 : }

  00017	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001b	5b		 pop	 rbx
  0001c	c3		 ret	 0
$LN2@deflateEnd:

; 1105 : 
; 1106 :     status = strm->state->status;

  0001d	48 8b 53 28	 mov	 rdx, QWORD PTR [rbx+40]
  00021	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi

; 1107 : 
; 1108 :     /* Deallocate in reverse order of allocations: */
; 1109 :     TRY_FREE(strm, strm->state->pending_buf);

  00026	48 8b 42 10	 mov	 rax, QWORD PTR [rdx+16]
  0002a	8b 7a 08	 mov	 edi, DWORD PTR [rdx+8]
  0002d	48 85 c0	 test	 rax, rax
  00030	74 0e		 je	 SHORT $LN3@deflateEnd
  00032	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00036	48 8b d0	 mov	 rdx, rax
  00039	ff 53 38	 call	 QWORD PTR [rbx+56]
  0003c	48 8b 53 28	 mov	 rdx, QWORD PTR [rbx+40]
$LN3@deflateEnd:

; 1110 :     TRY_FREE(strm, strm->state->head);

  00040	48 8b 42 68	 mov	 rax, QWORD PTR [rdx+104]
  00044	48 85 c0	 test	 rax, rax
  00047	74 0e		 je	 SHORT $LN4@deflateEnd
  00049	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  0004d	48 8b d0	 mov	 rdx, rax
  00050	ff 53 38	 call	 QWORD PTR [rbx+56]
  00053	48 8b 53 28	 mov	 rdx, QWORD PTR [rbx+40]
$LN4@deflateEnd:

; 1111 :     TRY_FREE(strm, strm->state->prev);

  00057	48 8b 42 60	 mov	 rax, QWORD PTR [rdx+96]
  0005b	48 85 c0	 test	 rax, rax
  0005e	74 0e		 je	 SHORT $LN5@deflateEnd
  00060	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00064	48 8b d0	 mov	 rdx, rax
  00067	ff 53 38	 call	 QWORD PTR [rbx+56]
  0006a	48 8b 53 28	 mov	 rdx, QWORD PTR [rbx+40]
$LN5@deflateEnd:

; 1112 :     TRY_FREE(strm, strm->state->window);

  0006e	48 8b 42 50	 mov	 rax, QWORD PTR [rdx+80]
  00072	48 85 c0	 test	 rax, rax
  00075	74 0e		 je	 SHORT $LN6@deflateEnd
  00077	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  0007b	48 8b d0	 mov	 rdx, rax
  0007e	ff 53 38	 call	 QWORD PTR [rbx+56]
  00081	48 8b 53 28	 mov	 rdx, QWORD PTR [rbx+40]
$LN6@deflateEnd:

; 1113 : 
; 1114 :     ZFREE(strm, strm->state);

  00085	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00089	ff 53 38	 call	 QWORD PTR [rbx+56]

; 1115 :     strm->state = Z_NULL;

  0008c	33 c0		 xor	 eax, eax

; 1116 : 
; 1117 :     return status == BUSY_STATE ? Z_DATA_ERROR : Z_OK;

  0008e	b9 fd ff ff ff	 mov	 ecx, -3
  00093	83 ff 71	 cmp	 edi, 113		; 00000071H
  00096	48 89 43 28	 mov	 QWORD PTR [rbx+40], rax
  0009a	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]
  0009f	0f 44 c1	 cmove	 eax, ecx

; 1118 : }

  000a2	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a6	5b		 pop	 rbx
  000a7	c3		 ret	 0
deflateEnd ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\deflate.c
;	COMDAT deflateInit_
_TEXT	SEGMENT
strm$ = 80
level$ = 88
version$ = 96
stream_size$ = 104
deflateInit_ PROC					; COMDAT

; 231  : {

$LN4:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 232  :     return deflateInit2_(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL,

  00004	44 89 4c 24 38	 mov	 DWORD PTR [rsp+56], r9d
  00009	41 b9 0f 00 00
	00		 mov	 r9d, 15
  0000f	4c 89 44 24 30	 mov	 QWORD PTR [rsp+48], r8
  00014	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  0001c	c7 44 24 20 08
	00 00 00	 mov	 DWORD PTR [rsp+32], 8
  00024	45 8d 41 f9	 lea	 r8d, QWORD PTR [r9-7]
  00028	e8 00 00 00 00	 call	 deflateInit2_

; 233  :                          Z_DEFAULT_STRATEGY, version, stream_size);
; 234  :     /* To do: ignore strm->next_in if we use it as window */
; 235  : }

  0002d	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00031	c3		 ret	 0
deflateInit_ ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\deflate.c
;	COMDAT slide_hash
_TEXT	SEGMENT
s$ = 8
slide_hash PROC						; COMDAT

; 205  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx

; 206  :     unsigned n, m;
; 207  :     Posf *p;
; 208  :     uInt wsize = s->w_size;
; 209  : 
; 210  :     n = s->hash_size;

  00005	44 8b 51 74	 mov	 r10d, DWORD PTR [rcx+116]

; 211  :     p = &s->head[n];

  00009	33 db		 xor	 ebx, ebx
  0000b	48 8b 41 68	 mov	 rax, QWORD PTR [rcx+104]
  0000f	44 8b 41 44	 mov	 r8d, DWORD PTR [rcx+68]
  00013	4e 8d 0c 50	 lea	 r9, QWORD PTR [rax+r10*2]
  00017	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL4@slide_hash:

; 212  :     do {
; 213  :         m = *--p;

  00020	41 0f b7 51 fe	 movzx	 edx, WORD PTR [r9-2]
  00025	4d 8d 49 fe	 lea	 r9, QWORD PTR [r9-2]

; 214  :         *p = (Pos)(m >= wsize ? m - wsize : NIL);

  00029	0f b7 c2	 movzx	 eax, dx
  0002c	66 41 2b c0	 sub	 ax, r8w
  00030	41 3b d0	 cmp	 edx, r8d
  00033	66 0f 42 c3	 cmovb	 ax, bx
  00037	66 41 89 01	 mov	 WORD PTR [r9], ax

; 215  :     } while (--n);

  0003b	41 83 c2 ff	 add	 r10d, -1		; ffffffffH
  0003f	75 df		 jne	 SHORT $LL4@slide_hash

; 216  :     n = wsize;
; 217  : #ifndef FASTEST
; 218  :     p = &s->prev[n];

  00041	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]
  00045	45 8b c8	 mov	 r9d, r8d
  00048	4a 8d 14 40	 lea	 rdx, QWORD PTR [rax+r8*2]
  0004c	0f 1f 40 00	 npad	 4
$LL7@slide_hash:

; 219  :     do {
; 220  :         m = *--p;

  00050	0f b7 4a fe	 movzx	 ecx, WORD PTR [rdx-2]
  00054	48 8d 52 fe	 lea	 rdx, QWORD PTR [rdx-2]

; 221  :         *p = (Pos)(m >= wsize ? m - wsize : NIL);

  00058	0f b7 c1	 movzx	 eax, cx
  0005b	66 41 2b c0	 sub	 ax, r8w
  0005f	41 3b c8	 cmp	 ecx, r8d
  00062	66 0f 42 c3	 cmovb	 ax, bx
  00066	66 89 02	 mov	 WORD PTR [rdx], ax

; 222  :         /* If n is not on any hash chain, prev[n] is garbage but
; 223  :          * its value will never be used.
; 224  :          */
; 225  :     } while (--n);

  00069	41 83 c1 ff	 add	 r9d, -1			; ffffffffH
  0006d	75 e1		 jne	 SHORT $LL7@slide_hash

; 226  : #endif
; 227  : }

  0006f	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  00074	c3		 ret	 0
slide_hash ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\deflate.c
;	COMDAT deflateInit2_
_TEXT	SEGMENT
strm$ = 80
level$ = 88
method$ = 96
windowBits$ = 104
memLevel$ = 112
strategy$ = 120
version$ = 128
stream_size$ = 136
deflateInit2_ PROC					; COMDAT

; 240  : {

$LN24:
  00000	40 53		 push	 rbx
  00002	56		 push	 rsi
  00003	41 54		 push	 r12
  00005	41 56		 push	 r14
  00007	41 57		 push	 r15
  00009	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 241  :     deflate_state *s;
; 242  :     int wrap = 1;
; 243  :     static const char my_version[] = ZLIB_VERSION;
; 244  : 
; 245  :     if (version == Z_NULL || version[0] != my_version[0] ||

  0000d	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR version$[rsp]
  00015	41 bf 01 00 00
	00		 mov	 r15d, 1
  0001b	44 8b 64 24 78	 mov	 r12d, DWORD PTR strategy$[rsp]
  00020	41 8b f1	 mov	 esi, r9d
  00023	48 8b d9	 mov	 rbx, rcx
  00026	45 8b f7	 mov	 r14d, r15d
  00029	48 85 c0	 test	 rax, rax
  0002c	0f 84 33 02 00
	00		 je	 $LN3@deflateIni
  00032	80 38 31	 cmp	 BYTE PTR [rax], 49	; 00000031H
  00035	0f 85 2a 02 00
	00		 jne	 $LN3@deflateIni
  0003b	83 bc 24 88 00
	00 00 58	 cmp	 DWORD PTR stream_size$[rsp], 88 ; 00000058H
  00043	0f 85 1c 02 00
	00		 jne	 $LN3@deflateIni

; 248  :     }
; 249  :     if (strm == Z_NULL) return Z_STREAM_ERROR;

  00049	48 89 6c 24 50	 mov	 QWORD PTR [rsp+80], rbp
  0004e	4c 89 6c 24 60	 mov	 QWORD PTR [rsp+96], r13
  00053	48 85 c9	 test	 rcx, rcx
  00056	0f 84 02 02 00
	00		 je	 $LN12@deflateIni

; 250  : 
; 251  :     strm->msg = Z_NULL;

  0005c	33 c9		 xor	 ecx, ecx
  0005e	48 89 4b 20	 mov	 QWORD PTR [rbx+32], rcx

; 252  :     if (strm->zalloc == (alloc_func)0) {

  00062	48 39 4b 30	 cmp	 QWORD PTR [rbx+48], rcx
  00066	75 0f		 jne	 SHORT $LN5@deflateIni

; 253  : #ifdef Z_SOLO
; 254  :         return Z_STREAM_ERROR;
; 255  : #else
; 256  :         strm->zalloc = zcalloc;

  00068	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:zcalloc

; 257  :         strm->opaque = (voidpf)0;

  0006f	48 89 4b 40	 mov	 QWORD PTR [rbx+64], rcx
  00073	48 89 43 30	 mov	 QWORD PTR [rbx+48], rax
$LN5@deflateIni:

; 258  : #endif
; 259  :     }
; 260  :     if (strm->zfree == (free_func)0)

  00077	48 39 4b 38	 cmp	 QWORD PTR [rbx+56], rcx
  0007b	75 0b		 jne	 SHORT $LN6@deflateIni

; 261  : #ifdef Z_SOLO
; 262  :         return Z_STREAM_ERROR;
; 263  : #else
; 264  :         strm->zfree = zcfree;

  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:zcfree
  00084	48 89 43 38	 mov	 QWORD PTR [rbx+56], rax
$LN6@deflateIni:

; 265  : #endif
; 266  : 
; 267  : #ifdef FASTEST
; 268  :     if (level != 0) level = 1;
; 269  : #else
; 270  :     if (level == Z_DEFAULT_COMPRESSION) level = 6;
; 271  : #endif
; 272  : 
; 273  :     if (windowBits < 0) { /* suppress zlib wrapper */

  00088	83 fa ff	 cmp	 edx, -1
  0008b	bd 06 00 00 00	 mov	 ebp, 6
  00090	0f 45 ea	 cmovne	 ebp, edx
  00093	85 f6		 test	 esi, esi
  00095	79 07		 jns	 SHORT $LN8@deflateIni

; 274  :         wrap = 0;

  00097	44 8b f1	 mov	 r14d, ecx

; 275  :         windowBits = -windowBits;

  0009a	f7 de		 neg	 esi

; 276  :     }

  0009c	eb 0e		 jmp	 SHORT $LN10@deflateIni
$LN8@deflateIni:

; 277  : #ifdef GZIP
; 278  :     else if (windowBits > 15) {

  0009e	83 fe 0f	 cmp	 esi, 15
  000a1	7e 09		 jle	 SHORT $LN10@deflateIni

; 279  :         wrap = 2;       /* write gzip wrapper instead */

  000a3	41 be 02 00 00
	00		 mov	 r14d, 2

; 280  :         windowBits -= 16;

  000a9	83 ee 10	 sub	 esi, 16
$LN10@deflateIni:

; 281  :     }
; 282  : #endif
; 283  :     if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method != Z_DEFLATED ||
; 284  :         windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
; 285  :         strategy < 0 || strategy > Z_FIXED || (windowBits == 8 && wrap != 1)) {

  000ac	44 8b 6c 24 70	 mov	 r13d, DWORD PTR memLevel$[rsp]
  000b1	41 8d 45 ff	 lea	 eax, DWORD PTR [r13-1]
  000b5	83 f8 08	 cmp	 eax, 8
  000b8	0f 87 a0 01 00
	00		 ja	 $LN12@deflateIni
  000be	41 83 f8 08	 cmp	 r8d, 8
  000c2	0f 85 96 01 00
	00		 jne	 $LN12@deflateIni
  000c8	8d 46 f8	 lea	 eax, DWORD PTR [rsi-8]
  000cb	83 f8 07	 cmp	 eax, 7
  000ce	0f 87 8a 01 00
	00		 ja	 $LN12@deflateIni
  000d4	83 fd 09	 cmp	 ebp, 9
  000d7	0f 87 81 01 00
	00		 ja	 $LN12@deflateIni
  000dd	41 83 fc 04	 cmp	 r12d, 4
  000e1	0f 87 77 01 00
	00		 ja	 $LN12@deflateIni
  000e7	41 3b f0	 cmp	 esi, r8d
  000ea	75 0d		 jne	 SHORT $LN13@deflateIni
  000ec	45 3b f7	 cmp	 r14d, r15d
  000ef	0f 85 69 01 00
	00		 jne	 $LN12@deflateIni

; 287  :     }
; 288  :     if (windowBits == 8) windowBits = 9;  /* until 256-byte window bug fixed */

  000f5	41 8d 70 01	 lea	 esi, QWORD PTR [r8+1]
$LN13@deflateIni:

; 289  :     s = (deflate_state *) ZALLOC(strm, 1, sizeof(deflate_state));

  000f9	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  000fd	41 b8 18 17 00
	00		 mov	 r8d, 5912		; 00001718H
  00103	41 8b d7	 mov	 edx, r15d
  00106	48 89 7c 24 58	 mov	 QWORD PTR [rsp+88], rdi
  0010b	ff 53 30	 call	 QWORD PTR [rbx+48]
  0010e	48 8b f8	 mov	 rdi, rax

; 290  :     if (s == Z_NULL) return Z_MEM_ERROR;

  00111	48 85 c0	 test	 rax, rax
  00114	0f 84 3d 01 00
	00		 je	 $LN22@deflateIni

; 291  :     strm->state = (struct internal_state FAR *)s;

  0011a	48 89 43 28	 mov	 QWORD PTR [rbx+40], rax

; 292  :     s->strm = strm;
; 293  :     s->status = INIT_STATE;     /* to pass state test in deflateReset() */
; 294  : 
; 295  :     s->wrap = wrap;
; 296  :     s->gzhead = Z_NULL;
; 297  :     s->w_bits = (uInt)windowBits;
; 298  :     s->w_size = 1 << s->w_bits;

  0011e	8b ce		 mov	 ecx, esi
  00120	44 89 70 2c	 mov	 DWORD PTR [rax+44], r14d
  00124	45 8b cf	 mov	 r9d, r15d
  00127	41 d3 e1	 shl	 r9d, cl
  0012a	45 33 f6	 xor	 r14d, r14d
  0012d	48 89 18	 mov	 QWORD PTR [rax], rbx

; 299  :     s->w_mask = s->w_size - 1;
; 300  : 
; 301  :     s->hash_bits = (uInt)memLevel + 7;

  00130	41 8d 4d 07	 lea	 ecx, DWORD PTR [r13+7]
  00134	c7 40 08 2a 00
	00 00		 mov	 DWORD PTR [rax+8], 42	; 0000002aH
  0013b	4c 89 70 30	 mov	 QWORD PTR [rax+48], r14
  0013f	89 70 48	 mov	 DWORD PTR [rax+72], esi

; 302  :     s->hash_size = 1 << s->hash_bits;
; 303  :     s->hash_mask = s->hash_size - 1;
; 304  :     s->hash_shift =  ((s->hash_bits+MIN_MATCH-1)/MIN_MATCH);
; 305  : 
; 306  :     s->window = (Bytef *) ZALLOC(strm, s->w_size, 2*sizeof(Byte));

  00142	45 8d 46 02	 lea	 r8d, QWORD PTR [r14+2]
  00146	44 89 48 44	 mov	 DWORD PTR [rax+68], r9d
  0014a	41 8d 41 ff	 lea	 eax, DWORD PTR [r9-1]
  0014e	89 47 4c	 mov	 DWORD PTR [rdi+76], eax
  00151	41 8b c7	 mov	 eax, r15d
  00154	d3 e0		 shl	 eax, cl
  00156	89 47 74	 mov	 DWORD PTR [rdi+116], eax
  00159	ff c8		 dec	 eax
  0015b	89 47 7c	 mov	 DWORD PTR [rdi+124], eax
  0015e	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  00163	89 4f 78	 mov	 DWORD PTR [rdi+120], ecx
  00166	83 c1 02	 add	 ecx, 2
  00169	f7 e1		 mul	 ecx
  0016b	d1 ea		 shr	 edx, 1
  0016d	89 97 80 00 00
	00		 mov	 DWORD PTR [rdi+128], edx
  00173	41 8b d1	 mov	 edx, r9d
  00176	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  0017a	ff 53 30	 call	 QWORD PTR [rbx+48]

; 307  :     s->prev   = (Posf *)  ZALLOC(strm, s->w_size, sizeof(Pos));

  0017d	8b 57 44	 mov	 edx, DWORD PTR [rdi+68]
  00180	45 8d 46 02	 lea	 r8d, QWORD PTR [r14+2]
  00184	48 89 47 50	 mov	 QWORD PTR [rdi+80], rax
  00188	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  0018c	ff 53 30	 call	 QWORD PTR [rbx+48]

; 308  :     s->head   = (Posf *)  ZALLOC(strm, s->hash_size, sizeof(Pos));

  0018f	8b 57 74	 mov	 edx, DWORD PTR [rdi+116]
  00192	45 8d 46 02	 lea	 r8d, QWORD PTR [r14+2]
  00196	48 89 47 60	 mov	 QWORD PTR [rdi+96], rax
  0019a	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  0019e	ff 53 30	 call	 QWORD PTR [rbx+48]

; 309  : 
; 310  :     s->high_water = 0;      /* nothing written to s->window yet */
; 311  : 
; 312  :     s->lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  001a1	41 8d 4d 06	 lea	 ecx, DWORD PTR [r13+6]
  001a5	44 89 b7 14 17
	00 00		 mov	 DWORD PTR [rdi+5908], r14d
  001ac	41 d3 e7	 shl	 r15d, cl

; 313  : 
; 314  :     /* We overlay pending_buf and sym_buf. This works since the average size
; 315  :      * for length/distance pairs over any compressed block is assured to be 31
; 316  :      * bits or less.
; 317  :      *
; 318  :      * Analysis: The longest fixed codes are a length code of 8 bits plus 5
; 319  :      * extra bits, for lengths 131 to 257. The longest fixed distance codes are
; 320  :      * 5 bits plus 13 extra bits, for distances 16385 to 32768. The longest
; 321  :      * possible fixed-codes length/distance pair is then 31 bits total.
; 322  :      *
; 323  :      * sym_buf starts one-fourth of the way into pending_buf. So there are
; 324  :      * three bytes in sym_buf for every four bytes in pending_buf. Each symbol
; 325  :      * in sym_buf is three bytes -- two for the distance and one for the
; 326  :      * literal/length. As each symbol is consumed, the pointer to the next
; 327  :      * sym_buf value to read moves forward three bytes. From that symbol, up to
; 328  :      * 31 bits are written to pending_buf. The closest the written pending_buf
; 329  :      * bits gets to the next sym_buf symbol to read is just before the last
; 330  :      * code is written. At that time, 31*(n-2) bits have been written, just
; 331  :      * after 24*(n-2) bits have been consumed from sym_buf. sym_buf starts at
; 332  :      * 8*n bits into pending_buf. (Note that the symbol buffer fills when n-1
; 333  :      * symbols are written.) The closest the writing gets to what is unread is
; 334  :      * then n+14 bits. Here n is lit_bufsize, which is 16384 by default, and
; 335  :      * can range from 128 to 32768.
; 336  :      *
; 337  :      * Therefore, at a minimum, there are 142 bits of space between what is
; 338  :      * written and what is read in the overlain buffers, so the symbols cannot
; 339  :      * be overwritten by the compressed data. That space is actually 139 bits,
; 340  :      * due to the three-bit fixed-code block header.
; 341  :      *
; 342  :      * That covers the case where either Z_FIXED is specified, forcing fixed
; 343  :      * codes, or when the use of fixed codes is chosen, because that choice
; 344  :      * results in a smaller compressed block than dynamic codes. That latter
; 345  :      * condition then assures that the above analysis also covers all dynamic
; 346  :      * blocks. A dynamic-code block will only be chosen to be emitted if it has
; 347  :      * fewer bits than a fixed-code block would for the same set of symbols.
; 348  :      * Therefore its average symbol length is assured to be less than 31. So
; 349  :      * the compressed data for a dynamic block also cannot overwrite the
; 350  :      * symbols from which it is being constructed.
; 351  :      */
; 352  : 
; 353  :     s->pending_buf = (uchf *) ZALLOC(strm, s->lit_bufsize, 4);

  001af	45 8d 46 04	 lea	 r8d, QWORD PTR [r14+4]
  001b3	44 89 bf f0 16
	00 00		 mov	 DWORD PTR [rdi+5872], r15d
  001ba	41 8b d7	 mov	 edx, r15d
  001bd	48 89 47 68	 mov	 QWORD PTR [rdi+104], rax
  001c1	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  001c5	ff 53 30	 call	 QWORD PTR [rbx+48]

; 354  :     s->pending_buf_size = (ulg)s->lit_bufsize * 4;

  001c8	8b 97 f0 16 00
	00		 mov	 edx, DWORD PTR [rdi+5872]
  001ce	48 89 47 10	 mov	 QWORD PTR [rdi+16], rax
  001d2	8d 0c 95 00 00
	00 00		 lea	 ecx, DWORD PTR [rdx*4]
  001d9	89 4f 18	 mov	 DWORD PTR [rdi+24], ecx

; 355  : 
; 356  :     if (s->window == Z_NULL || s->prev == Z_NULL || s->head == Z_NULL ||

  001dc	4c 39 77 50	 cmp	 QWORD PTR [rdi+80], r14
  001e0	74 5b		 je	 SHORT $LN16@deflateIni
  001e2	4c 39 77 60	 cmp	 QWORD PTR [rdi+96], r14
  001e6	74 55		 je	 SHORT $LN16@deflateIni
  001e8	4c 39 77 68	 cmp	 QWORD PTR [rdi+104], r14
  001ec	74 4f		 je	 SHORT $LN16@deflateIni
  001ee	48 85 c0	 test	 rax, rax
  001f1	74 4a		 je	 SHORT $LN16@deflateIni

; 362  :     }
; 363  :     s->sym_buf = s->pending_buf + s->lit_bufsize;

  001f3	48 03 c2	 add	 rax, rdx

; 364  :     s->sym_end = (s->lit_bufsize - 1) * 3;
; 365  :     /* We avoid equality with lit_bufsize*3 because of wraparound at 64K
; 366  :      * on 16 bit machines and because stored blocks are restricted to
; 367  :      * 64K-1 bytes.
; 368  :      */
; 369  : 
; 370  :     s->level = level;

  001f6	89 af ac 00 00
	00		 mov	 DWORD PTR [rdi+172], ebp
  001fc	ff ca		 dec	 edx
  001fe	48 89 87 e8 16
	00 00		 mov	 QWORD PTR [rdi+5864], rax

; 371  :     s->strategy = strategy;
; 372  :     s->method = (Byte)method;
; 373  : 
; 374  :     return deflateReset(strm);

  00205	48 8b cb	 mov	 rcx, rbx
  00208	44 89 a7 b0 00
	00 00		 mov	 DWORD PTR [rdi+176], r12d
  0020f	c6 47 3c 08	 mov	 BYTE PTR [rdi+60], 8
  00213	8d 04 52	 lea	 eax, DWORD PTR [rdx+rdx*2]
  00216	89 87 f8 16 00
	00		 mov	 DWORD PTR [rdi+5880], eax
  0021c	e8 00 00 00 00	 call	 deflateReset
$LN21@deflateIni:
  00221	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
$LN20@deflateIni:
  00226	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  0022b	4c 8b 6c 24 60	 mov	 r13, QWORD PTR [rsp+96]

; 375  : }

  00230	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00234	41 5f		 pop	 r15
  00236	41 5e		 pop	 r14
  00238	41 5c		 pop	 r12
  0023a	5e		 pop	 rsi
  0023b	5b		 pop	 rbx
  0023c	c3		 ret	 0
$LN16@deflateIni:

; 357  :         s->pending_buf == Z_NULL) {
; 358  :         s->status = FINISH_STATE;
; 359  :         strm->msg = ERR_MSG(Z_MEM_ERROR);

  0023d	48 8b 05 30 00
	00 00		 mov	 rax, QWORD PTR z_errmsg+48

; 360  :         deflateEnd (strm);

  00244	48 8b cb	 mov	 rcx, rbx
  00247	c7 47 08 9a 02
	00 00		 mov	 DWORD PTR [rdi+8], 666	; 0000029aH
  0024e	48 89 43 20	 mov	 QWORD PTR [rbx+32], rax
  00252	e8 00 00 00 00	 call	 deflateEnd
$LN22@deflateIni:

; 361  :         return Z_MEM_ERROR;

  00257	b8 fc ff ff ff	 mov	 eax, -4
  0025c	eb c3		 jmp	 SHORT $LN21@deflateIni
$LN12@deflateIni:

; 286  :         return Z_STREAM_ERROR;

  0025e	b8 fe ff ff ff	 mov	 eax, -2
  00263	eb c1		 jmp	 SHORT $LN20@deflateIni
$LN3@deflateIni:

; 246  :         stream_size != sizeof(z_stream)) {
; 247  :         return Z_VERSION_ERROR;

  00265	b8 fa ff ff ff	 mov	 eax, -6

; 375  : }

  0026a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0026e	41 5f		 pop	 r15
  00270	41 5e		 pop	 r14
  00272	41 5c		 pop	 r12
  00274	5e		 pop	 rsi
  00275	5b		 pop	 rbx
  00276	c3		 ret	 0
deflateInit2_ ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\deflate.c
;	COMDAT deflateStateCheck
_TEXT	SEGMENT
strm$ = 8
deflateStateCheck PROC					; COMDAT

; 383  :     deflate_state *s;
; 384  :     if (strm == Z_NULL ||
; 385  :         strm->zalloc == (alloc_func)0 || strm->zfree == (free_func)0)

  00000	48 85 c9	 test	 rcx, rcx
  00003	74 47		 je	 SHORT $LN3@deflateSta
  00005	48 83 79 30 00	 cmp	 QWORD PTR [rcx+48], 0
  0000a	74 40		 je	 SHORT $LN3@deflateSta
  0000c	48 83 79 38 00	 cmp	 QWORD PTR [rcx+56], 0
  00011	74 39		 je	 SHORT $LN3@deflateSta

; 387  :     s = strm->state;

  00013	48 8b 41 28	 mov	 rax, QWORD PTR [rcx+40]

; 388  :     if (s == Z_NULL || s->strm != strm || (s->status != INIT_STATE &&

  00017	48 85 c0	 test	 rax, rax
  0001a	74 30		 je	 SHORT $LN3@deflateSta
  0001c	48 39 08	 cmp	 QWORD PTR [rax], rcx
  0001f	75 2b		 jne	 SHORT $LN3@deflateSta
  00021	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  00024	8d 41 d6	 lea	 eax, DWORD PTR [rcx-42]
  00027	83 f8 3d	 cmp	 eax, 61			; 0000003dH
  0002a	77 10		 ja	 SHORT $LN7@deflateSta
  0002c	48 ba 01 80 00
	88 00 00 02 20	 mov	 rdx, 2306405961448849409 ; 2002000088008001H
  00036	48 0f a3 c2	 bt	 rdx, rax
  0003a	72 0d		 jb	 SHORT $LN4@deflateSta
$LN7@deflateSta:
  0003c	83 f9 71	 cmp	 ecx, 113		; 00000071H
  0003f	74 08		 je	 SHORT $LN4@deflateSta
  00041	81 f9 9a 02 00
	00		 cmp	 ecx, 666		; 0000029aH
  00047	75 03		 jne	 SHORT $LN3@deflateSta
$LN4@deflateSta:

; 389  : #ifdef GZIP
; 390  :                                            s->status != GZIP_STATE &&
; 391  : #endif
; 392  :                                            s->status != EXTRA_STATE &&
; 393  :                                            s->status != NAME_STATE &&
; 394  :                                            s->status != COMMENT_STATE &&
; 395  :                                            s->status != HCRC_STATE &&
; 396  :                                            s->status != BUSY_STATE &&
; 397  :                                            s->status != FINISH_STATE))
; 398  :         return 1;
; 399  :     return 0;

  00049	33 c0		 xor	 eax, eax

; 400  : }

  0004b	c3		 ret	 0
$LN3@deflateSta:

; 386  :         return 1;

  0004c	b8 01 00 00 00	 mov	 eax, 1

; 400  : }

  00051	c3		 ret	 0
deflateStateCheck ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\deflate.c
;	COMDAT deflateSetDictionary
_TEXT	SEGMENT
strm$ = 80
dictionary$ = 88
dictLength$ = 96
deflateSetDictionary PROC				; COMDAT

; 404  : {

$LN32:
  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	56		 push	 rsi
  00004	57		 push	 rdi
  00005	41 56		 push	 r14
  00007	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000b	41 8b f8	 mov	 edi, r8d
  0000e	48 8b ea	 mov	 rbp, rdx
  00011	48 8b f1	 mov	 rsi, rcx

; 405  :     deflate_state *s;
; 406  :     uInt str, n;
; 407  :     int wrap;
; 408  :     unsigned avail;
; 409  :     z_const unsigned char *next;
; 410  : 
; 411  :     if (deflateStateCheck(strm) || dictionary == Z_NULL)

  00014	e8 00 00 00 00	 call	 deflateStateCheck
  00019	85 c0		 test	 eax, eax
  0001b	0f 85 cb 01 00
	00		 jne	 $LN11@deflateSet
  00021	48 85 ed	 test	 rbp, rbp
  00024	0f 84 c2 01 00
	00		 je	 $LN11@deflateSet

; 413  :     s = strm->state;

  0002a	48 8b 5e 28	 mov	 rbx, QWORD PTR [rsi+40]

; 414  :     wrap = s->wrap;

  0002e	44 8b 73 2c	 mov	 r14d, DWORD PTR [rbx+44]

; 415  :     if (wrap == 2 || (wrap == 1 && s->status != INIT_STATE) || s->lookahead)

  00032	41 83 fe 02	 cmp	 r14d, 2
  00036	0f 84 b0 01 00
	00		 je	 $LN11@deflateSet
  0003c	41 83 fe 01	 cmp	 r14d, 1
  00040	75 0a		 jne	 SHORT $LN14@deflateSet
  00042	83 7b 08 2a	 cmp	 DWORD PTR [rbx+8], 42	; 0000002aH
  00046	0f 85 a0 01 00
	00		 jne	 $LN11@deflateSet
$LN14@deflateSet:
  0004c	83 bb 9c 00 00
	00 00		 cmp	 DWORD PTR [rbx+156], 0
  00053	0f 85 93 01 00
	00		 jne	 $LN11@deflateSet

; 416  :         return Z_STREAM_ERROR;
; 417  : 
; 418  :     /* when using zlib wrappers, compute Adler-32 for provided dictionary */
; 419  :     if (wrap == 1)

  00059	4c 89 64 24 50	 mov	 QWORD PTR [rsp+80], r12
  0005e	4c 89 6c 24 58	 mov	 QWORD PTR [rsp+88], r13
  00063	4c 89 7c 24 60	 mov	 QWORD PTR [rsp+96], r15
  00068	41 83 fe 01	 cmp	 r14d, 1
  0006c	75 0e		 jne	 SHORT $LN15@deflateSet

; 420  :         strm->adler = adler32(strm->adler, dictionary, dictLength);

  0006e	8b 4e 4c	 mov	 ecx, DWORD PTR [rsi+76]
  00071	48 8b d5	 mov	 rdx, rbp
  00074	e8 00 00 00 00	 call	 adler32
  00079	89 46 4c	 mov	 DWORD PTR [rsi+76], eax
$LN15@deflateSet:

; 421  :     s->wrap = 0;                    /* avoid computing Adler-32 in read_buf */
; 422  : 
; 423  :     /* if dictionary would fill window, just replace the history */
; 424  :     if (dictLength >= s->w_size) {

  0007c	8b 4b 44	 mov	 ecx, DWORD PTR [rbx+68]
  0007f	45 33 ed	 xor	 r13d, r13d
  00082	44 89 6b 2c	 mov	 DWORD PTR [rbx+44], r13d
  00086	3b f9		 cmp	 edi, ecx
  00088	72 49		 jb	 SHORT $LN30@deflateSet

; 425  :         if (wrap == 0) {            /* already empty otherwise */

  0008a	45 85 f6	 test	 r14d, r14d
  0008d	75 3b		 jne	 SHORT $LN29@deflateSet

; 426  :             CLEAR_HASH(s);

  0008f	8b 4b 74	 mov	 ecx, DWORD PTR [rbx+116]
  00092	33 d2		 xor	 edx, edx
  00094	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]
  00098	ff c9		 dec	 ecx
  0009a	66 44 89 2c 48	 mov	 WORD PTR [rax+rcx*2], r13w
  0009f	44 8b 43 74	 mov	 r8d, DWORD PTR [rbx+116]
  000a3	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  000a7	41 ff c8	 dec	 r8d
  000aa	4d 03 c0	 add	 r8, r8
  000ad	e8 00 00 00 00	 call	 memset

; 427  :             s->strstart = 0;
; 428  :             s->block_start = 0L;
; 429  :             s->insert = 0;

  000b2	8b 4b 44	 mov	 ecx, DWORD PTR [rbx+68]
  000b5	44 89 ab 94 00
	00 00		 mov	 DWORD PTR [rbx+148], r13d
  000bc	44 89 ab 84 00
	00 00		 mov	 DWORD PTR [rbx+132], r13d
  000c3	44 89 ab 08 17
	00 00		 mov	 DWORD PTR [rbx+5896], r13d
$LN29@deflateSet:

; 430  :         }
; 431  :         dictionary += dictLength - s->w_size;  /* use the tail */

  000ca	2b f9		 sub	 edi, ecx
  000cc	8b c7		 mov	 eax, edi

; 432  :         dictLength = s->w_size;

  000ce	8b f9		 mov	 edi, ecx
  000d0	48 03 e8	 add	 rbp, rax
$LN30@deflateSet:

; 433  :     }
; 434  : 
; 435  :     /* insert dictionary into window and hash */
; 436  :     avail = strm->avail_in;

  000d3	44 8b 7e 08	 mov	 r15d, DWORD PTR [rsi+8]

; 437  :     next = strm->next_in;
; 438  :     strm->avail_in = dictLength;
; 439  :     strm->next_in = (z_const Bytef *)dictionary;
; 440  :     fill_window(s);

  000d7	48 8b cb	 mov	 rcx, rbx
  000da	4c 8b 26	 mov	 r12, QWORD PTR [rsi]
  000dd	89 7e 08	 mov	 DWORD PTR [rsi+8], edi
  000e0	48 89 2e	 mov	 QWORD PTR [rsi], rbp
  000e3	e8 00 00 00 00	 call	 fill_window

; 441  :     while (s->lookahead >= MIN_MATCH) {

  000e8	8b 8b 9c 00 00
	00		 mov	 ecx, DWORD PTR [rbx+156]
  000ee	83 f9 03	 cmp	 ecx, 3
  000f1	0f 82 94 00 00
	00		 jb	 $LN6@deflateSet
  000f7	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL5@deflateSet:

; 442  :         str = s->strstart;

  00100	44 8b 93 94 00
	00 00		 mov	 r10d, DWORD PTR [rbx+148]

; 443  :         n = s->lookahead - (MIN_MATCH-1);

  00107	8d 79 fe	 lea	 edi, DWORD PTR [rcx-2]
  0010a	45 8d 5a 02	 lea	 r11d, DWORD PTR [r10+2]
  0010e	66 90		 npad	 2
$LL9@deflateSet:

; 444  :         do {
; 445  :             UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]);

  00110	48 8b 43 50	 mov	 rax, QWORD PTR [rbx+80]
  00114	8b 8b 80 00 00
	00		 mov	 ecx, DWORD PTR [rbx+128]

; 446  : #ifndef FASTEST
; 447  :             s->prev[str & s->w_mask] = s->head[s->ins_h];

  0011a	48 8b 53 68	 mov	 rdx, QWORD PTR [rbx+104]
  0011e	44 8b 43 4c	 mov	 r8d, DWORD PTR [rbx+76]
  00122	45 0f b6 0c 03	 movzx	 r9d, BYTE PTR [r11+rax]

; 448  : #endif
; 449  :             s->head[s->ins_h] = (Pos)str;
; 450  :             ++str;

  00127	45 8d 5b 01	 lea	 r11d, DWORD PTR [r11+1]
  0012b	8b 43 70	 mov	 eax, DWORD PTR [rbx+112]
  0012e	d3 e0		 shl	 eax, cl
  00130	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00134	44 33 c8	 xor	 r9d, eax
  00137	44 23 4b 7c	 and	 r9d, DWORD PTR [rbx+124]
  0013b	41 8b c2	 mov	 eax, r10d
  0013e	4c 23 c0	 and	 r8, rax
  00141	44 89 4b 70	 mov	 DWORD PTR [rbx+112], r9d
  00145	42 0f b7 04 4a	 movzx	 eax, WORD PTR [rdx+r9*2]
  0014a	66 42 89 04 41	 mov	 WORD PTR [rcx+r8*2], ax
  0014f	8b 4b 70	 mov	 ecx, DWORD PTR [rbx+112]
  00152	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]
  00156	66 44 89 14 48	 mov	 WORD PTR [rax+rcx*2], r10w
  0015b	41 ff c2	 inc	 r10d

; 451  :         } while (--n);

  0015e	83 c7 ff	 add	 edi, -1			; ffffffffH
  00161	75 ad		 jne	 SHORT $LL9@deflateSet

; 452  :         s->strstart = str;
; 453  :         s->lookahead = MIN_MATCH-1;
; 454  :         fill_window(s);

  00163	48 8b cb	 mov	 rcx, rbx
  00166	44 89 93 94 00
	00 00		 mov	 DWORD PTR [rbx+148], r10d
  0016d	c7 83 9c 00 00
	00 02 00 00 00	 mov	 DWORD PTR [rbx+156], 2
  00177	e8 00 00 00 00	 call	 fill_window
  0017c	8b 8b 9c 00 00
	00		 mov	 ecx, DWORD PTR [rbx+156]
  00182	83 f9 03	 cmp	 ecx, 3
  00185	0f 83 75 ff ff
	ff		 jae	 $LL5@deflateSet
$LN6@deflateSet:

; 455  :     }
; 456  :     s->strstart += s->lookahead;

  0018b	01 8b 94 00 00
	00		 add	 DWORD PTR [rbx+148], ecx
  00191	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [rbx+148]

; 457  :     s->block_start = (long)s->strstart;

  00197	89 83 84 00 00
	00		 mov	 DWORD PTR [rbx+132], eax

; 458  :     s->insert = s->lookahead;
; 459  :     s->lookahead = 0;
; 460  :     s->match_length = s->prev_length = MIN_MATCH-1;
; 461  :     s->match_available = 0;
; 462  :     strm->next_in = next;
; 463  :     strm->avail_in = avail;
; 464  :     s->wrap = wrap;
; 465  :     return Z_OK;

  0019d	33 c0		 xor	 eax, eax
  0019f	44 89 ab 9c 00
	00 00		 mov	 DWORD PTR [rbx+156], r13d
  001a6	44 89 ab 90 00
	00 00		 mov	 DWORD PTR [rbx+144], r13d
  001ad	4c 8b 6c 24 58	 mov	 r13, QWORD PTR [rsp+88]
  001b2	89 8b 08 17 00
	00		 mov	 DWORD PTR [rbx+5896], ecx
  001b8	c7 83 a0 00 00
	00 02 00 00 00	 mov	 DWORD PTR [rbx+160], 2
  001c2	c7 83 88 00 00
	00 02 00 00 00	 mov	 DWORD PTR [rbx+136], 2
  001cc	4c 89 26	 mov	 QWORD PTR [rsi], r12
  001cf	4c 8b 64 24 50	 mov	 r12, QWORD PTR [rsp+80]
  001d4	44 89 7e 08	 mov	 DWORD PTR [rsi+8], r15d
  001d8	4c 8b 7c 24 60	 mov	 r15, QWORD PTR [rsp+96]
  001dd	44 89 73 2c	 mov	 DWORD PTR [rbx+44], r14d

; 466  : }

  001e1	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001e5	41 5e		 pop	 r14
  001e7	5f		 pop	 rdi
  001e8	5e		 pop	 rsi
  001e9	5d		 pop	 rbp
  001ea	5b		 pop	 rbx
  001eb	c3		 ret	 0
$LN11@deflateSet:

; 412  :         return Z_STREAM_ERROR;

  001ec	b8 fe ff ff ff	 mov	 eax, -2

; 466  : }

  001f1	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001f5	41 5e		 pop	 r14
  001f7	5f		 pop	 rdi
  001f8	5e		 pop	 rsi
  001f9	5d		 pop	 rbp
  001fa	5b		 pop	 rbx
  001fb	c3		 ret	 0
deflateSetDictionary ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\deflate.c
;	COMDAT deflateGetDictionary
_TEXT	SEGMENT
strm$ = 48
dictionary$ = 56
dictLength$ = 64
deflateGetDictionary PROC				; COMDAT

; 470  : {

$LN8:
  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	49 8b f8	 mov	 rdi, r8
  00009	4c 8b ca	 mov	 r9, rdx
  0000c	4c 8b c1	 mov	 r8, rcx

; 471  :     deflate_state *s;
; 472  :     uInt len;
; 473  : 
; 474  :     if (deflateStateCheck(strm))

  0000f	e8 00 00 00 00	 call	 deflateStateCheck
  00014	85 c0		 test	 eax, eax
  00016	74 0b		 je	 SHORT $LN2@deflateGet

; 475  :         return Z_STREAM_ERROR;

  00018	b8 fe ff ff ff	 mov	 eax, -2

; 485  : }

  0001d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00021	5f		 pop	 rdi
  00022	c3		 ret	 0
$LN2@deflateGet:

; 476  :     s = strm->state;

  00023	49 8b 50 28	 mov	 rdx, QWORD PTR [r8+40]
  00027	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx

; 477  :     len = s->strstart + s->lookahead;
; 478  :     if (len > s->w_size)

  0002c	8b 5a 44	 mov	 ebx, DWORD PTR [rdx+68]
  0002f	8b 8a 9c 00 00
	00		 mov	 ecx, DWORD PTR [rdx+156]
  00035	44 8b 92 94 00
	00 00		 mov	 r10d, DWORD PTR [rdx+148]
  0003c	41 8d 04 0a	 lea	 eax, DWORD PTR [r10+rcx]

; 479  :         len = s->w_size;
; 480  :     if (dictionary != Z_NULL && len)

  00040	3b c3		 cmp	 eax, ebx
  00042	0f 46 d8	 cmovbe	 ebx, eax
  00045	4d 85 c9	 test	 r9, r9
  00048	74 1c		 je	 SHORT $LN4@deflateGet
  0004a	85 db		 test	 ebx, ebx
  0004c	74 18		 je	 SHORT $LN4@deflateGet

; 481  :         zmemcpy(dictionary, s->window + s->strstart + s->lookahead - len, len);

  0004e	48 8b 52 50	 mov	 rdx, QWORD PTR [rdx+80]
  00052	44 8b c3	 mov	 r8d, ebx
  00055	49 2b d0	 sub	 rdx, r8
  00058	49 03 d2	 add	 rdx, r10
  0005b	48 03 d1	 add	 rdx, rcx
  0005e	49 8b c9	 mov	 rcx, r9
  00061	e8 00 00 00 00	 call	 memcpy
$LN4@deflateGet:

; 482  :     if (dictLength != Z_NULL)

  00066	48 85 ff	 test	 rdi, rdi
  00069	74 02		 je	 SHORT $LN5@deflateGet

; 483  :         *dictLength = len;

  0006b	89 1f		 mov	 DWORD PTR [rdi], ebx
$LN5@deflateGet:

; 484  :     return Z_OK;

  0006d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00072	33 c0		 xor	 eax, eax

; 485  : }

  00074	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00078	5f		 pop	 rdi
  00079	c3		 ret	 0
deflateGetDictionary ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\deflate.c
;	COMDAT deflateResetKeep
_TEXT	SEGMENT
strm$ = 48
deflateResetKeep PROC					; COMDAT

; 490  : {

$LN8:
  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b f9	 mov	 rdi, rcx

; 491  :     deflate_state *s;
; 492  : 
; 493  :     if (deflateStateCheck(strm)) {

  00009	e8 00 00 00 00	 call	 deflateStateCheck
  0000e	85 c0		 test	 eax, eax
  00010	74 0b		 je	 SHORT $LN2@deflateRes

; 494  :         return Z_STREAM_ERROR;

  00012	b8 fe ff ff ff	 mov	 eax, -2

; 523  : }

  00017	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001b	5f		 pop	 rdi
  0001c	c3		 ret	 0
$LN2@deflateRes:

; 495  :     }
; 496  : 
; 497  :     strm->total_in = strm->total_out = 0;

  0001d	33 c0		 xor	 eax, eax

; 498  :     strm->msg = Z_NULL; /* use zfree if we ever allocate msg dynamically */
; 499  :     strm->data_type = Z_UNKNOWN;

  0001f	c7 47 48 02 00
	00 00		 mov	 DWORD PTR [rdi+72], 2
  00026	89 47 1c	 mov	 DWORD PTR [rdi+28], eax
  00029	89 47 0c	 mov	 DWORD PTR [rdi+12], eax
  0002c	48 89 47 20	 mov	 QWORD PTR [rdi+32], rax
  00030	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx

; 500  : 
; 501  :     s = (deflate_state *)strm->state;

  00035	48 8b 5f 28	 mov	 rbx, QWORD PTR [rdi+40]

; 502  :     s->pending = 0;
; 503  :     s->pending_out = s->pending_buf;
; 504  : 
; 505  :     if (s->wrap < 0) {

  00039	8b 4b 2c	 mov	 ecx, DWORD PTR [rbx+44]
  0003c	89 43 28	 mov	 DWORD PTR [rbx+40], eax
  0003f	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  00043	48 89 43 20	 mov	 QWORD PTR [rbx+32], rax
  00047	85 c9		 test	 ecx, ecx
  00049	79 05		 jns	 SHORT $LN3@deflateRes

; 506  :         s->wrap = -s->wrap; /* was made negative by deflate(..., Z_FINISH); */

  0004b	f7 d9		 neg	 ecx
  0004d	89 4b 2c	 mov	 DWORD PTR [rbx+44], ecx
$LN3@deflateRes:

; 507  :     }
; 508  :     s->status =

  00050	83 f9 02	 cmp	 ecx, 2
  00053	b8 2a 00 00 00	 mov	 eax, 42			; 0000002aH
  00058	ba 39 00 00 00	 mov	 edx, 57			; 00000039H
  0005d	0f 44 c2	 cmove	 eax, edx
  00060	89 43 08	 mov	 DWORD PTR [rbx+8], eax

; 509  : #ifdef GZIP
; 510  :         s->wrap == 2 ? GZIP_STATE :
; 511  : #endif
; 512  :         INIT_STATE;
; 513  :     strm->adler =

  00063	75 0e		 jne	 SHORT $LN5@deflateRes
  00065	45 33 c0	 xor	 r8d, r8d
  00068	33 d2		 xor	 edx, edx
  0006a	33 c9		 xor	 ecx, ecx
  0006c	e8 00 00 00 00	 call	 crc32
  00071	eb 0c		 jmp	 SHORT $LN6@deflateRes
$LN5@deflateRes:
  00073	45 33 c0	 xor	 r8d, r8d
  00076	33 d2		 xor	 edx, edx
  00078	33 c9		 xor	 ecx, ecx
  0007a	e8 00 00 00 00	 call	 adler32
$LN6@deflateRes:
  0007f	89 47 4c	 mov	 DWORD PTR [rdi+76], eax

; 514  : #ifdef GZIP
; 515  :         s->wrap == 2 ? crc32(0L, Z_NULL, 0) :
; 516  : #endif
; 517  :         adler32(0L, Z_NULL, 0);
; 518  :     s->last_flush = -2;
; 519  : 
; 520  :     _tr_init(s);

  00082	48 8b cb	 mov	 rcx, rbx
  00085	c7 43 40 fe ff
	ff ff		 mov	 DWORD PTR [rbx+64], -2
  0008c	e8 00 00 00 00	 call	 _tr_init

; 521  : 
; 522  :     return Z_OK;

  00091	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00096	33 c0		 xor	 eax, eax

; 523  : }

  00098	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009c	5f		 pop	 rdi
  0009d	c3		 ret	 0
deflateResetKeep ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\deflate.c
;	COMDAT deflateReset
_TEXT	SEGMENT
strm$ = 48
deflateReset PROC					; COMDAT

; 527  : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b f9	 mov	 rdi, rcx

; 528  :     int ret;
; 529  : 
; 530  :     ret = deflateResetKeep(strm);

  0000d	e8 00 00 00 00	 call	 deflateResetKeep
  00012	8b d8		 mov	 ebx, eax

; 531  :     if (ret == Z_OK)

  00014	85 c0		 test	 eax, eax
  00016	75 0b		 jne	 SHORT $LN2@deflateRes

; 532  :         lm_init(strm->state);

  00018	48 8b 4f 28	 mov	 rcx, QWORD PTR [rdi+40]
  0001c	e8 00 00 00 00	 call	 lm_init

; 533  :     return ret;

  00021	8b c3		 mov	 eax, ebx
$LN2@deflateRes:

; 534  : }

  00023	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5f		 pop	 rdi
  0002d	c3		 ret	 0
deflateReset ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\deflate.c
;	COMDAT deflateSetHeader
_TEXT	SEGMENT
strm$ = 48
head$ = 56
deflateSetHeader PROC					; COMDAT

; 540  : {

$LN6:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	4c 8b ca	 mov	 r9, rdx
  00007	4c 8b c1	 mov	 r8, rcx

; 541  :     if (deflateStateCheck(strm) || strm->state->wrap != 2)

  0000a	e8 00 00 00 00	 call	 deflateStateCheck
  0000f	85 c0		 test	 eax, eax
  00011	75 15		 jne	 SHORT $LN3@deflateSet
  00013	49 8b 40 28	 mov	 rax, QWORD PTR [r8+40]
  00017	83 78 2c 02	 cmp	 DWORD PTR [rax+44], 2
  0001b	75 0b		 jne	 SHORT $LN3@deflateSet

; 543  :     strm->state->gzhead = head;

  0001d	4c 89 48 30	 mov	 QWORD PTR [rax+48], r9

; 544  :     return Z_OK;

  00021	33 c0		 xor	 eax, eax

; 545  : }

  00023	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00027	c3		 ret	 0
$LN3@deflateSet:

; 542  :         return Z_STREAM_ERROR;

  00028	b8 fe ff ff ff	 mov	 eax, -2

; 545  : }

  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	c3		 ret	 0
deflateSetHeader ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\deflate.c
;	COMDAT deflatePending
_TEXT	SEGMENT
strm$ = 48
pending$ = 56
bits$ = 64
deflatePending PROC					; COMDAT

; 552  : {

$LN7:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	4c 8b d2	 mov	 r10, rdx
  00007	4c 8b c9	 mov	 r9, rcx

; 553  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  0000a	e8 00 00 00 00	 call	 deflateStateCheck
  0000f	85 c0		 test	 eax, eax
  00011	74 0a		 je	 SHORT $LN2@deflatePen
  00013	b8 fe ff ff ff	 mov	 eax, -2

; 559  : }

  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
$LN2@deflatePen:

; 554  :     if (pending != Z_NULL)

  0001d	4d 85 d2	 test	 r10, r10
  00020	74 0a		 je	 SHORT $LN3@deflatePen

; 555  :         *pending = strm->state->pending;

  00022	49 8b 41 28	 mov	 rax, QWORD PTR [r9+40]
  00026	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00029	41 89 0a	 mov	 DWORD PTR [r10], ecx
$LN3@deflatePen:

; 556  :     if (bits != Z_NULL)

  0002c	4d 85 c0	 test	 r8, r8
  0002f	74 0d		 je	 SHORT $LN4@deflatePen

; 557  :         *bits = strm->state->bi_valid;

  00031	49 8b 41 28	 mov	 rax, QWORD PTR [r9+40]
  00035	8b 88 10 17 00
	00		 mov	 ecx, DWORD PTR [rax+5904]
  0003b	41 89 08	 mov	 DWORD PTR [r8], ecx
$LN4@deflatePen:

; 558  :     return Z_OK;

  0003e	33 c0		 xor	 eax, eax

; 559  : }

  00040	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00044	c3		 ret	 0
deflatePending ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\deflate.c
;	COMDAT deflatePrime
_TEXT	SEGMENT
strm$ = 48
bits$ = 56
value$ = 64
deflatePrime PROC					; COMDAT

; 566  : {

$LN14:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	41 8b f8	 mov	 edi, r8d
  0000d	8b da		 mov	 ebx, edx
  0000f	4c 8b d9	 mov	 r11, rcx

; 567  :     deflate_state *s;
; 568  :     int put;
; 569  : 
; 570  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00012	e8 00 00 00 00	 call	 deflateStateCheck
  00017	85 c0		 test	 eax, eax
  00019	74 10		 je	 SHORT $LN5@deflatePri
  0001b	b8 fe ff ff ff	 mov	 eax, -2

; 586  : }

  00020	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00025	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00029	5f		 pop	 rdi
  0002a	c3		 ret	 0
$LN5@deflatePri:

; 571  :     s = strm->state;
; 572  :     if (bits < 0 || bits > 16 ||

  0002b	83 fb 10	 cmp	 ebx, 16
  0002e	77 7f		 ja	 SHORT $LN7@deflatePri
  00030	4d 8b 5b 28	 mov	 r11, QWORD PTR [r11+40]
  00034	49 8b 43 20	 mov	 rax, QWORD PTR [r11+32]
  00038	48 83 c0 02	 add	 rax, 2
  0003c	49 39 83 e8 16
	00 00		 cmp	 QWORD PTR [r11+5864], rax
  00043	72 6a		 jb	 SHORT $LN7@deflatePri
  00045	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL4@deflatePri:

; 573  :         s->sym_buf < s->pending_out + ((Buf_size + 7) >> 3))
; 574  :         return Z_BUF_ERROR;
; 575  :     do {
; 576  :         put = Buf_size - s->bi_valid;

  00050	41 8b 93 10 17
	00 00		 mov	 edx, DWORD PTR [r11+5904]
  00057	b8 10 00 00 00	 mov	 eax, 16
  0005c	2b c2		 sub	 eax, edx

; 577  :         if (put > bits)
; 578  :             put = bits;
; 579  :         s->bi_buf |= (ush)((value & ((1 << put) - 1)) << s->bi_valid);

  0005e	44 8b d3	 mov	 r10d, ebx
  00061	3b c3		 cmp	 eax, ebx
  00063	44 0f 4e d0	 cmovle	 r10d, eax
  00067	b8 01 00 00 00	 mov	 eax, 1
  0006c	41 8b ca	 mov	 ecx, r10d
  0006f	66 d3 e0	 shl	 ax, cl
  00072	8b ca		 mov	 ecx, edx
  00074	66 ff c8	 dec	 ax
  00077	66 23 c7	 and	 ax, di
  0007a	66 d3 e0	 shl	 ax, cl

; 580  :         s->bi_valid += put;
; 581  :         _tr_flush_bits(s);

  0007d	49 8b cb	 mov	 rcx, r11
  00080	66 41 09 83 0c
	17 00 00	 or	 WORD PTR [r11+5900], ax
  00088	41 8d 04 12	 lea	 eax, DWORD PTR [r10+rdx]
  0008c	41 89 83 10 17
	00 00		 mov	 DWORD PTR [r11+5904], eax
  00093	e8 00 00 00 00	 call	 _tr_flush_bits

; 582  :         value >>= put;

  00098	41 8b ca	 mov	 ecx, r10d
  0009b	d3 ff		 sar	 edi, cl

; 583  :         bits -= put;

  0009d	41 2b da	 sub	 ebx, r10d

; 584  :     } while (bits);

  000a0	75 ae		 jne	 SHORT $LL4@deflatePri

; 585  :     return Z_OK;

  000a2	33 c0		 xor	 eax, eax

; 586  : }

  000a4	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000a9	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ad	5f		 pop	 rdi
  000ae	c3		 ret	 0
$LN7@deflatePri:
  000af	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000b4	b8 fb ff ff ff	 mov	 eax, -5
  000b9	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000bd	5f		 pop	 rdi
  000be	c3		 ret	 0
deflatePrime ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\deflate.c
;	COMDAT deflateParams
_TEXT	SEGMENT
strm$ = 48
level$ = 56
strategy$ = 64
deflateParams PROC					; COMDAT

; 593  : {

$LN22:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 56		 push	 r14
  00016	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0001a	41 8b e8	 mov	 ebp, r8d
  0001d	48 8b f1	 mov	 rsi, rcx
  00020	44 8b c2	 mov	 r8d, edx

; 594  :     deflate_state *s;
; 595  :     compress_func func;
; 596  : 
; 597  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00023	e8 00 00 00 00	 call	 deflateStateCheck
  00028	85 c0		 test	 eax, eax
  0002a	0f 85 28 01 00
	00		 jne	 $LN8@deflatePar

; 598  :     s = strm->state;

  00030	48 8b 5e 28	 mov	 rbx, QWORD PTR [rsi+40]

; 599  : 
; 600  : #ifdef FASTEST
; 601  :     if (level != 0) level = 1;
; 602  : #else
; 603  :     if (level == Z_DEFAULT_COMPRESSION) level = 6;
; 604  : #endif
; 605  :     if (level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {

  00034	41 83 f8 ff	 cmp	 r8d, -1
  00038	bf 06 00 00 00	 mov	 edi, 6
  0003d	41 0f 45 f8	 cmovne	 edi, r8d
  00041	83 ff 09	 cmp	 edi, 9
  00044	0f 87 0e 01 00
	00		 ja	 $LN8@deflatePar
  0004a	83 fd 04	 cmp	 ebp, 4
  0004d	0f 87 05 01 00
	00		 ja	 $LN8@deflatePar

; 607  :     }
; 608  :     func = configuration_table[s->level].func;
; 609  : 
; 610  :     if ((strategy != s->strategy || func != configuration_table[level].func) &&

  00053	4c 8d 35 00 00
	00 00		 lea	 r14, OFFSET FLAT:configuration_table
  0005a	3b ab b0 00 00
	00		 cmp	 ebp, DWORD PTR [rbx+176]
  00060	75 1c		 jne	 SHORT $LN20@deflatePar
  00062	48 63 8b ac 00
	00 00		 movsxd	 rcx, DWORD PTR [rbx+172]
  00069	48 63 c7	 movsxd	 rax, edi
  0006c	48 03 c9	 add	 rcx, rcx
  0006f	48 03 c0	 add	 rax, rax
  00072	49 8b 44 c6 08	 mov	 rax, QWORD PTR [r14+rax*8+8]
  00077	49 39 44 ce 08	 cmp	 QWORD PTR [r14+rcx*8+8], rax
  0007c	74 40		 je	 SHORT $LN12@deflatePar
$LN20@deflatePar:
  0007e	83 7b 40 fe	 cmp	 DWORD PTR [rbx+64], -2
  00082	74 3a		 je	 SHORT $LN12@deflatePar

; 611  :         s->last_flush != -2) {
; 612  :         /* Flush the last buffer: */
; 613  :         int err = deflate(strm, Z_BLOCK);

  00084	ba 05 00 00 00	 mov	 edx, 5
  00089	48 8b ce	 mov	 rcx, rsi
  0008c	e8 00 00 00 00	 call	 deflate

; 614  :         if (err == Z_STREAM_ERROR)

  00091	83 f8 fe	 cmp	 eax, -2
  00094	0f 84 be 00 00
	00		 je	 $LN8@deflatePar

; 615  :             return err;
; 616  :         if (strm->avail_in || (s->strstart - s->block_start) + s->lookahead)

  0009a	83 7e 08 00	 cmp	 DWORD PTR [rsi+8], 0
  0009e	75 14		 jne	 SHORT $LN13@deflatePar
  000a0	8b 83 9c 00 00
	00		 mov	 eax, DWORD PTR [rbx+156]
  000a6	2b 83 84 00 00
	00		 sub	 eax, DWORD PTR [rbx+132]
  000ac	03 83 94 00 00
	00		 add	 eax, DWORD PTR [rbx+148]
  000b2	74 0a		 je	 SHORT $LN12@deflatePar
$LN13@deflatePar:

; 617  :             return Z_BUF_ERROR;

  000b4	b8 fb ff ff ff	 mov	 eax, -5
  000b9	e9 9f 00 00 00	 jmp	 $LN1@deflatePar
$LN12@deflatePar:

; 618  :     }
; 619  :     if (s->level != level) {

  000be	8b 83 ac 00 00
	00		 mov	 eax, DWORD PTR [rbx+172]
  000c4	3b c7		 cmp	 eax, edi
  000c6	0f 84 82 00 00
	00		 je	 $LN14@deflatePar

; 620  :         if (s->level == 0 && s->matches != 0) {

  000cc	85 c0		 test	 eax, eax
  000ce	75 43		 jne	 SHORT $LN15@deflatePar
  000d0	8b 83 04 17 00
	00		 mov	 eax, DWORD PTR [rbx+5892]
  000d6	85 c0		 test	 eax, eax
  000d8	74 39		 je	 SHORT $LN15@deflatePar

; 621  :             if (s->matches == 1)

  000da	33 f6		 xor	 esi, esi
  000dc	83 f8 01	 cmp	 eax, 1
  000df	75 0a		 jne	 SHORT $LN4@deflatePar

; 622  :                 slide_hash(s);

  000e1	48 8b cb	 mov	 rcx, rbx
  000e4	e8 00 00 00 00	 call	 slide_hash
  000e9	eb 22		 jmp	 SHORT $LN3@deflatePar
$LN4@deflatePar:

; 623  :             else
; 624  :                 CLEAR_HASH(s);

  000eb	8b 4b 74	 mov	 ecx, DWORD PTR [rbx+116]
  000ee	33 d2		 xor	 edx, edx
  000f0	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]
  000f4	ff c9		 dec	 ecx
  000f6	66 89 34 48	 mov	 WORD PTR [rax+rcx*2], si
  000fa	44 8b 43 74	 mov	 r8d, DWORD PTR [rbx+116]
  000fe	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00102	41 ff c8	 dec	 r8d
  00105	4d 03 c0	 add	 r8, r8
  00108	e8 00 00 00 00	 call	 memset
$LN3@deflatePar:

; 625  :             s->matches = 0;

  0010d	89 b3 04 17 00
	00		 mov	 DWORD PTR [rbx+5892], esi
$LN15@deflatePar:

; 626  :         }
; 627  :         s->level = level;

  00113	89 bb ac 00 00
	00		 mov	 DWORD PTR [rbx+172], edi

; 628  :         s->max_lazy_match   = configuration_table[level].max_lazy;

  00119	48 63 cf	 movsxd	 rcx, edi
  0011c	48 03 c9	 add	 rcx, rcx
  0011f	41 0f b7 44 ce
	02		 movzx	 eax, WORD PTR [r14+rcx*8+2]
  00125	89 83 a8 00 00
	00		 mov	 DWORD PTR [rbx+168], eax

; 629  :         s->good_match       = configuration_table[level].good_length;

  0012b	41 0f b7 04 ce	 movzx	 eax, WORD PTR [r14+rcx*8]
  00130	89 83 b4 00 00
	00		 mov	 DWORD PTR [rbx+180], eax

; 630  :         s->nice_match       = configuration_table[level].nice_length;

  00136	41 0f b7 44 ce
	04		 movzx	 eax, WORD PTR [r14+rcx*8+4]
  0013c	89 83 b8 00 00
	00		 mov	 DWORD PTR [rbx+184], eax

; 631  :         s->max_chain_length = configuration_table[level].max_chain;

  00142	41 0f b7 44 ce
	06		 movzx	 eax, WORD PTR [r14+rcx*8+6]
  00148	89 83 a4 00 00
	00		 mov	 DWORD PTR [rbx+164], eax
$LN14@deflatePar:

; 632  :     }
; 633  :     s->strategy = strategy;

  0014e	89 ab b0 00 00
	00		 mov	 DWORD PTR [rbx+176], ebp

; 634  :     return Z_OK;

  00154	33 c0		 xor	 eax, eax
  00156	eb 05		 jmp	 SHORT $LN1@deflatePar
$LN8@deflatePar:

; 606  :         return Z_STREAM_ERROR;

  00158	b8 fe ff ff ff	 mov	 eax, -2
$LN1@deflatePar:

; 635  : }

  0015d	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00162	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00167	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0016c	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  00171	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00175	41 5e		 pop	 r14
  00177	c3		 ret	 0
deflateParams ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\deflate.c
;	COMDAT deflateTune
_TEXT	SEGMENT
strm$ = 48
good_length$ = 56
max_lazy$ = 64
nice_length$ = 72
max_chain$ = 80
deflateTune PROC					; COMDAT

; 644  : {

$LN5:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	44 8b da	 mov	 r11d, edx
  00007	4c 8b d1	 mov	 r10, rcx

; 645  :     deflate_state *s;
; 646  : 
; 647  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  0000a	e8 00 00 00 00	 call	 deflateStateCheck
  0000f	85 c0		 test	 eax, eax
  00011	74 0a		 je	 SHORT $LN2@deflateTun
  00013	b8 fe ff ff ff	 mov	 eax, -2

; 654  : }

  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
$LN2@deflateTun:

; 648  :     s = strm->state;

  0001d	49 8b 4a 28	 mov	 rcx, QWORD PTR [r10+40]

; 649  :     s->good_match = (uInt)good_length;
; 650  :     s->max_lazy_match = (uInt)max_lazy;
; 651  :     s->nice_match = nice_length;
; 652  :     s->max_chain_length = (uInt)max_chain;

  00021	8b 44 24 50	 mov	 eax, DWORD PTR max_chain$[rsp]
  00025	89 81 a4 00 00
	00		 mov	 DWORD PTR [rcx+164], eax

; 653  :     return Z_OK;

  0002b	33 c0		 xor	 eax, eax
  0002d	44 89 99 b4 00
	00 00		 mov	 DWORD PTR [rcx+180], r11d
  00034	44 89 81 a8 00
	00 00		 mov	 DWORD PTR [rcx+168], r8d
  0003b	44 89 89 b8 00
	00 00		 mov	 DWORD PTR [rcx+184], r9d

; 654  : }

  00042	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00046	c3		 ret	 0
deflateTune ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\deflate.c
;	COMDAT deflateBound
_TEXT	SEGMENT
strm$ = 48
sourceLen$ = 56
deflateBound PROC					; COMDAT

; 676  : {

$LN30:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 677  :     deflate_state *s;
; 678  :     uLong complen, wraplen;
; 679  : 
; 680  :     /* conservative upper bound for compressed data */
; 681  :     complen = sourceLen +

  00004	44 8d 5a 3f	 lea	 r11d, DWORD PTR [rdx+63]
  00008	44 8b ca	 mov	 r9d, edx
  0000b	44 8d 42 07	 lea	 r8d, DWORD PTR [rdx+7]
  0000f	41 c1 eb 06	 shr	 r11d, 6
  00013	44 03 da	 add	 r11d, edx
  00016	41 c1 e8 03	 shr	 r8d, 3
  0001a	41 83 c0 05	 add	 r8d, 5
  0001e	4c 8b d1	 mov	 r10, rcx
  00021	45 03 d8	 add	 r11d, r8d

; 682  :               ((sourceLen + 7) >> 3) + ((sourceLen + 63) >> 6) + 5;
; 683  : 
; 684  :     /* if can't get parameters, return conservative bound plus zlib wrapper */
; 685  :     if (deflateStateCheck(strm))

  00024	e8 00 00 00 00	 call	 deflateStateCheck
  00029	85 c0		 test	 eax, eax
  0002b	74 09		 je	 SHORT $LN10@deflateBou

; 686  :         return complen + 6;

  0002d	41 8d 43 06	 lea	 eax, DWORD PTR [r11+6]

; 729  :            (sourceLen >> 25) + 13 - 6 + wraplen;
; 730  : }

  00031	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00035	c3		 ret	 0
$LN10@deflateBou:

; 687  : 
; 688  :     /* compute wrapper length */
; 689  :     s = strm->state;

  00036	49 8b 52 28	 mov	 rdx, QWORD PTR [r10+40]

; 690  :     switch (s->wrap) {

  0003a	8b 4a 2c	 mov	 ecx, DWORD PTR [rdx+44]
  0003d	85 c9		 test	 ecx, ecx
  0003f	0f 84 91 00 00
	00		 je	 $LN11@deflateBou
  00045	83 e9 01	 sub	 ecx, 1
  00048	74 74		 je	 SHORT $LN12@deflateBou
  0004a	83 f9 01	 cmp	 ecx, 1
  0004d	74 0b		 je	 SHORT $LN13@deflateBou

; 718  : #endif
; 719  :     default:                                /* for compiler happiness */
; 720  :         wraplen = 6;

  0004f	41 b8 06 00 00
	00		 mov	 r8d, 6
  00055	e9 7f 00 00 00	 jmp	 $LN2@deflateBou
$LN13@deflateBou:

; 697  : #ifdef GZIP
; 698  :     case 2:                                 /* gzip wrapper */
; 699  :         wraplen = 18;
; 700  :         if (s->gzhead != Z_NULL) {          /* user-supplied gzip header */

  0005a	48 8b 42 30	 mov	 rax, QWORD PTR [rdx+48]
  0005e	41 b8 12 00 00
	00		 mov	 r8d, 18
  00064	48 85 c0	 test	 rax, rax
  00067	74 70		 je	 SHORT $LN2@deflateBou

; 701  :             Bytef *str;
; 702  :             if (s->gzhead->extra != Z_NULL)

  00069	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  0006e	74 08		 je	 SHORT $LN15@deflateBou

; 703  :                 wraplen += 2 + s->gzhead->extra_len;

  00070	44 8b 40 18	 mov	 r8d, DWORD PTR [rax+24]
  00074	41 83 c0 14	 add	 r8d, 20
$LN15@deflateBou:

; 704  :             str = s->gzhead->name;

  00078	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]

; 705  :             if (str != Z_NULL)

  0007c	48 85 c9	 test	 rcx, rcx
  0007f	74 12		 je	 SHORT $LN5@deflateBou
$LL6@deflateBou:

; 706  :                 do {
; 707  :                     ++wraplen;
; 708  :                 } while (*str++);

  00081	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  00084	48 8d 49 01	 lea	 rcx, QWORD PTR [rcx+1]
  00088	41 ff c0	 inc	 r8d
  0008b	84 c0		 test	 al, al
  0008d	75 f2		 jne	 SHORT $LL6@deflateBou
  0008f	48 8b 42 30	 mov	 rax, QWORD PTR [rdx+48]
$LN5@deflateBou:

; 709  :             str = s->gzhead->comment;

  00093	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]

; 710  :             if (str != Z_NULL)

  00097	48 85 c9	 test	 rcx, rcx
  0009a	74 16		 je	 SHORT $LN8@deflateBou
  0009c	0f 1f 40 00	 npad	 4
$LL9@deflateBou:

; 711  :                 do {
; 712  :                     ++wraplen;
; 713  :                 } while (*str++);

  000a0	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  000a3	48 8d 49 01	 lea	 rcx, QWORD PTR [rcx+1]
  000a7	41 ff c0	 inc	 r8d
  000aa	84 c0		 test	 al, al
  000ac	75 f2		 jne	 SHORT $LL9@deflateBou
  000ae	48 8b 42 30	 mov	 rax, QWORD PTR [rdx+48]
$LN8@deflateBou:

; 714  :             if (s->gzhead->hcrc)

  000b2	83 78 3c 00	 cmp	 DWORD PTR [rax+60], 0
  000b6	74 21		 je	 SHORT $LN2@deflateBou

; 715  :                 wraplen += 2;

  000b8	41 83 c0 02	 add	 r8d, 2

; 716  :         }
; 717  :         break;

  000bc	eb 1b		 jmp	 SHORT $LN2@deflateBou
$LN12@deflateBou:

; 693  :         break;
; 694  :     case 1:                                 /* zlib wrapper */
; 695  :         wraplen = 6 + (s->strstart ? 4 : 0);

  000be	83 ba 94 00 00
	00 00		 cmp	 DWORD PTR [rdx+148], 0
  000c5	b8 0a 00 00 00	 mov	 eax, 10
  000ca	41 b8 06 00 00
	00		 mov	 r8d, 6
  000d0	44 0f 45 c0	 cmovne	 r8d, eax

; 696  :         break;

  000d4	eb 03		 jmp	 SHORT $LN2@deflateBou
$LN11@deflateBou:

; 691  :     case 0:                                 /* raw deflate */
; 692  :         wraplen = 0;

  000d6	45 33 c0	 xor	 r8d, r8d
$LN2@deflateBou:

; 721  :     }
; 722  : 
; 723  :     /* if not default parameters, return conservative bound */
; 724  :     if (s->w_bits != 15 || s->hash_bits != 8 + 7)

  000d9	83 7a 48 0f	 cmp	 DWORD PTR [rdx+72], 15
  000dd	75 2a		 jne	 SHORT $LN21@deflateBou
  000df	83 7a 78 0f	 cmp	 DWORD PTR [rdx+120], 15
  000e3	75 24		 jne	 SHORT $LN21@deflateBou

; 726  : 
; 727  :     /* default settings: return tight bound for that case */
; 728  :     return sourceLen + (sourceLen >> 12) + (sourceLen >> 14) +

  000e5	41 8b d1	 mov	 edx, r9d
  000e8	41 8b c9	 mov	 ecx, r9d
  000eb	c1 ea 0e	 shr	 edx, 14
  000ee	41 8b c1	 mov	 eax, r9d
  000f1	c1 e8 0c	 shr	 eax, 12
  000f4	41 03 d0	 add	 edx, r8d
  000f7	c1 e9 19	 shr	 ecx, 25
  000fa	83 c0 07	 add	 eax, 7
  000fd	03 d1		 add	 edx, ecx
  000ff	03 c2		 add	 eax, edx
  00101	41 03 c1	 add	 eax, r9d

; 729  :            (sourceLen >> 25) + 13 - 6 + wraplen;
; 730  : }

  00104	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00108	c3		 ret	 0
$LN21@deflateBou:

; 725  :         return complen + wraplen;

  00109	43 8d 04 18	 lea	 eax, DWORD PTR [r8+r11]

; 729  :            (sourceLen >> 25) + 13 - 6 + wraplen;
; 730  : }

  0010d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00111	c3		 ret	 0
deflateBound ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\deflate.c
;	COMDAT putShortMSB
_TEXT	SEGMENT
s$ = 8
b$ = 16
putShortMSB PROC					; COMDAT

; 741  :     put_byte(s, (Byte)(b >> 8));

  00000	44 8b 41 28	 mov	 r8d, DWORD PTR [rcx+40]
  00004	44 8b ca	 mov	 r9d, edx
  00007	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  0000b	41 c1 e9 08	 shr	 r9d, 8
  0000f	45 88 0c 00	 mov	 BYTE PTR [r8+rax], r9b
  00013	ff 41 28	 inc	 DWORD PTR [rcx+40]
  00016	44 8b 41 28	 mov	 r8d, DWORD PTR [rcx+40]

; 742  :     put_byte(s, (Byte)(b & 0xff));

  0001a	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  0001e	41 88 14 00	 mov	 BYTE PTR [r8+rax], dl
  00022	ff 41 28	 inc	 DWORD PTR [rcx+40]

; 743  : }

  00025	c3		 ret	 0
putShortMSB ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\deflate.c
;	COMDAT flush_pending
_TEXT	SEGMENT
strm$ = 48
flush_pending PROC					; COMDAT

; 753  : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 754  :     unsigned len;
; 755  :     deflate_state *s = strm->state;

  0000f	48 8b 59 28	 mov	 rbx, QWORD PTR [rcx+40]
  00013	48 8b f1	 mov	 rsi, rcx

; 756  : 
; 757  :     _tr_flush_bits(s);

  00016	48 8b cb	 mov	 rcx, rbx
  00019	e8 00 00 00 00	 call	 _tr_flush_bits

; 758  :     len = s->pending;
; 759  :     if (len > strm->avail_out) len = strm->avail_out;

  0001e	8b 7e 18	 mov	 edi, DWORD PTR [rsi+24]

; 760  :     if (len == 0) return;

  00021	39 7b 28	 cmp	 DWORD PTR [rbx+40], edi
  00024	0f 46 7b 28	 cmovbe	 edi, DWORD PTR [rbx+40]
  00028	85 ff		 test	 edi, edi
  0002a	74 2d		 je	 SHORT $LN4@flush_pend

; 761  : 
; 762  :     zmemcpy(strm->next_out, s->pending_out, len);

  0002c	48 8b 53 20	 mov	 rdx, QWORD PTR [rbx+32]
  00030	48 8b 4e 10	 mov	 rcx, QWORD PTR [rsi+16]
  00034	44 8b c7	 mov	 r8d, edi
  00037	e8 00 00 00 00	 call	 memcpy

; 763  :     strm->next_out  += len;

  0003c	8b c7		 mov	 eax, edi
  0003e	48 01 46 10	 add	 QWORD PTR [rsi+16], rax

; 764  :     s->pending_out  += len;

  00042	48 01 43 20	 add	 QWORD PTR [rbx+32], rax

; 765  :     strm->total_out += len;

  00046	01 7e 1c	 add	 DWORD PTR [rsi+28], edi

; 766  :     strm->avail_out -= len;

  00049	29 7e 18	 sub	 DWORD PTR [rsi+24], edi

; 767  :     s->pending      -= len;

  0004c	29 7b 28	 sub	 DWORD PTR [rbx+40], edi

; 768  :     if (s->pending == 0) {

  0004f	75 08		 jne	 SHORT $LN4@flush_pend

; 769  :         s->pending_out = s->pending_buf;

  00051	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  00055	48 89 43 20	 mov	 QWORD PTR [rbx+32], rax
$LN4@flush_pend:

; 770  :     }
; 771  : }

  00059	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005e	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00063	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00067	5f		 pop	 rdi
  00068	c3		 ret	 0
flush_pending ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\deflate.c
;	COMDAT deflateCopy
_TEXT	SEGMENT
dest$ = 48
source$ = 56
deflateCopy PROC					; COMDAT

; 1128 : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx
  00009	4c 8b c2	 mov	 r8, rdx

; 1129 : #ifdef MAXSEG_64K
; 1130 :     return Z_STREAM_ERROR;
; 1131 : #else
; 1132 :     deflate_state *ds;
; 1133 :     deflate_state *ss;
; 1134 : 
; 1135 : 
; 1136 :     if (deflateStateCheck(source) || dest == Z_NULL) {

  0000c	48 8b ca	 mov	 rcx, rdx
  0000f	e8 00 00 00 00	 call	 deflateStateCheck
  00014	85 c0		 test	 eax, eax
  00016	0f 85 c3 01 00
	00		 jne	 $LN3@deflateCop
  0001c	48 85 db	 test	 rbx, rbx
  0001f	0f 84 ba 01 00
	00		 je	 $LN3@deflateCop

; 1138 :     }
; 1139 : 
; 1140 :     ss = source->state;
; 1141 : 
; 1142 :     zmemcpy((voidpf)dest, (voidpf)source, sizeof(z_stream));

  00025	41 0f 10 00	 movups	 xmm0, XMMWORD PTR [r8]
  00029	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi

; 1143 : 
; 1144 :     ds = (deflate_state *) ZALLOC(dest, 1, sizeof(deflate_state));

  0002e	8d 50 01	 lea	 edx, QWORD PTR [rax+1]
  00031	49 8b 70 28	 mov	 rsi, QWORD PTR [r8+40]
  00035	0f 11 03	 movups	 XMMWORD PTR [rbx], xmm0
  00038	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi
  0003d	41 0f 10 48 10	 movups	 xmm1, XMMWORD PTR [r8+16]
  00042	0f 11 4b 10	 movups	 XMMWORD PTR [rbx+16], xmm1
  00046	41 0f 10 40 20	 movups	 xmm0, XMMWORD PTR [r8+32]
  0004b	0f 11 43 20	 movups	 XMMWORD PTR [rbx+32], xmm0
  0004f	41 0f 10 48 30	 movups	 xmm1, XMMWORD PTR [r8+48]
  00054	0f 11 4b 30	 movups	 XMMWORD PTR [rbx+48], xmm1
  00058	41 0f 10 40 40	 movups	 xmm0, XMMWORD PTR [r8+64]
  0005d	0f 11 43 40	 movups	 XMMWORD PTR [rbx+64], xmm0
  00061	f2 41 0f 10 48
	50		 movsd	 xmm1, QWORD PTR [r8+80]
  00067	41 b8 18 17 00
	00		 mov	 r8d, 5912		; 00001718H
  0006d	f2 0f 11 4b 50	 movsd	 QWORD PTR [rbx+80], xmm1
  00072	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  00076	ff 53 30	 call	 QWORD PTR [rbx+48]
  00079	48 8b f8	 mov	 rdi, rax

; 1145 :     if (ds == Z_NULL) return Z_MEM_ERROR;

  0007c	48 85 c0	 test	 rax, rax
  0007f	0f 84 45 01 00
	00		 je	 $LN10@deflateCop

; 1146 :     dest->state = (struct internal_state FAR *) ds;
; 1147 :     zmemcpy((voidpf)ds, (voidpf)ss, sizeof(deflate_state));

  00085	41 b8 18 17 00
	00		 mov	 r8d, 5912		; 00001718H
  0008b	48 89 43 28	 mov	 QWORD PTR [rbx+40], rax
  0008f	48 8b d6	 mov	 rdx, rsi
  00092	48 8b c8	 mov	 rcx, rax
  00095	e8 00 00 00 00	 call	 memcpy

; 1148 :     ds->strm = dest;
; 1149 : 
; 1150 :     ds->window = (Bytef *) ZALLOC(dest, ds->w_size, 2*sizeof(Byte));

  0009a	8b 57 44	 mov	 edx, DWORD PTR [rdi+68]
  0009d	41 b8 02 00 00
	00		 mov	 r8d, 2
  000a3	48 89 1f	 mov	 QWORD PTR [rdi], rbx
  000a6	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  000aa	ff 53 30	 call	 QWORD PTR [rbx+48]

; 1151 :     ds->prev   = (Posf *)  ZALLOC(dest, ds->w_size, sizeof(Pos));

  000ad	8b 57 44	 mov	 edx, DWORD PTR [rdi+68]
  000b0	41 b8 02 00 00
	00		 mov	 r8d, 2
  000b6	48 89 47 50	 mov	 QWORD PTR [rdi+80], rax
  000ba	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  000be	ff 53 30	 call	 QWORD PTR [rbx+48]

; 1152 :     ds->head   = (Posf *)  ZALLOC(dest, ds->hash_size, sizeof(Pos));

  000c1	8b 57 74	 mov	 edx, DWORD PTR [rdi+116]
  000c4	41 b8 02 00 00
	00		 mov	 r8d, 2
  000ca	48 89 47 60	 mov	 QWORD PTR [rdi+96], rax
  000ce	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  000d2	ff 53 30	 call	 QWORD PTR [rbx+48]

; 1153 :     ds->pending_buf = (uchf *) ZALLOC(dest, ds->lit_bufsize, 4);

  000d5	8b 97 f0 16 00
	00		 mov	 edx, DWORD PTR [rdi+5872]
  000db	41 b8 04 00 00
	00		 mov	 r8d, 4
  000e1	48 89 47 68	 mov	 QWORD PTR [rdi+104], rax
  000e5	48 8b 4b 40	 mov	 rcx, QWORD PTR [rbx+64]
  000e9	ff 53 30	 call	 QWORD PTR [rbx+48]

; 1154 : 
; 1155 :     if (ds->window == Z_NULL || ds->prev == Z_NULL || ds->head == Z_NULL ||

  000ec	48 8b 4f 50	 mov	 rcx, QWORD PTR [rdi+80]
  000f0	48 89 47 10	 mov	 QWORD PTR [rdi+16], rax
  000f4	48 85 c9	 test	 rcx, rcx
  000f7	0f 84 c5 00 00
	00		 je	 $LN6@deflateCop
  000fd	48 83 7f 60 00	 cmp	 QWORD PTR [rdi+96], 0
  00102	0f 84 ba 00 00
	00		 je	 $LN6@deflateCop
  00108	48 83 7f 68 00	 cmp	 QWORD PTR [rdi+104], 0
  0010d	0f 84 af 00 00
	00		 je	 $LN6@deflateCop
  00113	48 85 c0	 test	 rax, rax
  00116	0f 84 a6 00 00
	00		 je	 $LN6@deflateCop

; 1159 :     }
; 1160 :     /* following zmemcpy do not work for 16-bit MSDOS */
; 1161 :     zmemcpy(ds->window, ss->window, ds->w_size * 2 * sizeof(Byte));

  0011c	8b 47 44	 mov	 eax, DWORD PTR [rdi+68]
  0011f	48 8b 56 50	 mov	 rdx, QWORD PTR [rsi+80]
  00123	44 8d 04 00	 lea	 r8d, DWORD PTR [rax+rax]
  00127	e8 00 00 00 00	 call	 memcpy

; 1162 :     zmemcpy((voidpf)ds->prev, (voidpf)ss->prev, ds->w_size * sizeof(Pos));

  0012c	44 8b 47 44	 mov	 r8d, DWORD PTR [rdi+68]
  00130	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  00134	4d 03 c0	 add	 r8, r8
  00137	48 8b 4f 60	 mov	 rcx, QWORD PTR [rdi+96]
  0013b	e8 00 00 00 00	 call	 memcpy

; 1163 :     zmemcpy((voidpf)ds->head, (voidpf)ss->head, ds->hash_size * sizeof(Pos));

  00140	44 8b 47 74	 mov	 r8d, DWORD PTR [rdi+116]
  00144	48 8b 56 68	 mov	 rdx, QWORD PTR [rsi+104]
  00148	4d 03 c0	 add	 r8, r8
  0014b	48 8b 4f 68	 mov	 rcx, QWORD PTR [rdi+104]
  0014f	e8 00 00 00 00	 call	 memcpy

; 1164 :     zmemcpy(ds->pending_buf, ss->pending_buf, (uInt)ds->pending_buf_size);

  00154	44 8b 47 18	 mov	 r8d, DWORD PTR [rdi+24]
  00158	48 8b 56 10	 mov	 rdx, QWORD PTR [rsi+16]
  0015c	48 8b 4f 10	 mov	 rcx, QWORD PTR [rdi+16]
  00160	e8 00 00 00 00	 call	 memcpy

; 1165 : 
; 1166 :     ds->pending_out = ds->pending_buf + (ss->pending_out - ss->pending_buf);

  00165	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  00169	48 2b 46 10	 sub	 rax, QWORD PTR [rsi+16]
  0016d	48 03 47 10	 add	 rax, QWORD PTR [rdi+16]
  00171	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
  00176	48 89 47 20	 mov	 QWORD PTR [rdi+32], rax

; 1167 :     ds->sym_buf = ds->pending_buf + ds->lit_bufsize;

  0017a	8b 87 f0 16 00
	00		 mov	 eax, DWORD PTR [rdi+5872]
  00180	48 03 47 10	 add	 rax, QWORD PTR [rdi+16]
  00184	48 89 87 e8 16
	00 00		 mov	 QWORD PTR [rdi+5864], rax

; 1168 : 
; 1169 :     ds->l_desc.dyn_tree = ds->dyn_ltree;

  0018b	48 8d 87 bc 00
	00 00		 lea	 rax, QWORD PTR [rdi+188]
  00192	48 89 87 40 0b
	00 00		 mov	 QWORD PTR [rdi+2880], rax

; 1170 :     ds->d_desc.dyn_tree = ds->dyn_dtree;

  00199	48 8d 87 b0 09
	00 00		 lea	 rax, QWORD PTR [rdi+2480]
  001a0	48 89 87 58 0b
	00 00		 mov	 QWORD PTR [rdi+2904], rax

; 1171 :     ds->bl_desc.dyn_tree = ds->bl_tree;

  001a7	48 8d 87 a4 0a
	00 00		 lea	 rax, QWORD PTR [rdi+2724]
  001ae	48 89 87 70 0b
	00 00		 mov	 QWORD PTR [rdi+2928], rax

; 1172 : 
; 1173 :     return Z_OK;

  001b5	33 c0		 xor	 eax, eax
  001b7	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]

; 1174 : #endif /* MAXSEG_64K */
; 1175 : }

  001bc	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001c0	5b		 pop	 rbx
  001c1	c3		 ret	 0
$LN6@deflateCop:

; 1156 :         ds->pending_buf == Z_NULL) {
; 1157 :         deflateEnd (dest);

  001c2	48 8b cb	 mov	 rcx, rbx
  001c5	e8 00 00 00 00	 call	 deflateEnd
$LN10@deflateCop:

; 1158 :         return Z_MEM_ERROR;

  001ca	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
  001cf	b8 fc ff ff ff	 mov	 eax, -4
  001d4	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]

; 1174 : #endif /* MAXSEG_64K */
; 1175 : }

  001d9	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001dd	5b		 pop	 rbx
  001de	c3		 ret	 0
$LN3@deflateCop:

; 1137 :         return Z_STREAM_ERROR;

  001df	b8 fe ff ff ff	 mov	 eax, -2

; 1174 : #endif /* MAXSEG_64K */
; 1175 : }

  001e4	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001e8	5b		 pop	 rbx
  001e9	c3		 ret	 0
deflateCopy ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\deflate.c
;	COMDAT read_buf
_TEXT	SEGMENT
strm$ = 48
buf$ = 56
size$ = 64
read_buf PROC						; COMDAT

; 1188 : {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1189 :     unsigned len = strm->avail_in;

  0000f	8b 41 08	 mov	 eax, DWORD PTR [rcx+8]
  00012	48 8b f2	 mov	 rsi, rdx

; 1190 : 
; 1191 :     if (len > size) len = size;

  00015	41 3b c0	 cmp	 eax, r8d
  00018	8b f8		 mov	 edi, eax
  0001a	48 8b d9	 mov	 rbx, rcx
  0001d	41 0f 47 f8	 cmova	 edi, r8d

; 1192 :     if (len == 0) return 0;

  00021	85 ff		 test	 edi, edi
  00023	75 12		 jne	 SHORT $LN3@read_buf
  00025	33 c0		 xor	 eax, eax

; 1209 : }

  00027	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0002c	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00031	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00035	5f		 pop	 rdi
  00036	c3		 ret	 0
$LN3@read_buf:

; 1193 : 
; 1194 :     strm->avail_in  -= len;
; 1195 : 
; 1196 :     zmemcpy(buf, strm->next_in, len);

  00037	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  0003a	2b c7		 sub	 eax, edi
  0003c	89 41 08	 mov	 DWORD PTR [rcx+8], eax
  0003f	48 8b ce	 mov	 rcx, rsi
  00042	48 89 6c 24 30	 mov	 QWORD PTR [rsp+48], rbp
  00047	44 8b c7	 mov	 r8d, edi
  0004a	8b ef		 mov	 ebp, edi
  0004c	e8 00 00 00 00	 call	 memcpy

; 1197 :     if (strm->state->wrap == 1) {

  00051	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  00055	8b 48 2c	 mov	 ecx, DWORD PTR [rax+44]
  00058	83 f9 01	 cmp	 ecx, 1
  0005b	75 10		 jne	 SHORT $LN4@read_buf

; 1198 :         strm->adler = adler32(strm->adler, buf, len);

  0005d	8b 4b 4c	 mov	 ecx, DWORD PTR [rbx+76]
  00060	44 8b c7	 mov	 r8d, edi
  00063	48 8b d6	 mov	 rdx, rsi
  00066	e8 00 00 00 00	 call	 adler32

; 1199 :     }

  0006b	eb 13		 jmp	 SHORT $LN8@read_buf
$LN4@read_buf:

; 1200 : #ifdef GZIP
; 1201 :     else if (strm->state->wrap == 2) {

  0006d	83 f9 02	 cmp	 ecx, 2
  00070	75 11		 jne	 SHORT $LN6@read_buf

; 1202 :         strm->adler = crc32(strm->adler, buf, len);

  00072	8b 4b 4c	 mov	 ecx, DWORD PTR [rbx+76]
  00075	44 8b c7	 mov	 r8d, edi
  00078	48 8b d6	 mov	 rdx, rsi
  0007b	e8 00 00 00 00	 call	 crc32
$LN8@read_buf:

; 1203 :     }
; 1204 : #endif
; 1205 :     strm->next_in  += len;

  00080	89 43 4c	 mov	 DWORD PTR [rbx+76], eax
$LN6@read_buf:
  00083	48 01 2b	 add	 QWORD PTR [rbx], rbp

; 1206 :     strm->total_in += len;
; 1207 : 
; 1208 :     return len;

  00086	8b c7		 mov	 eax, edi
  00088	01 7b 0c	 add	 DWORD PTR [rbx+12], edi

; 1209 : }

  0008b	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00090	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]
  00095	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0009a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009e	5f		 pop	 rdi
  0009f	c3		 ret	 0
read_buf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\deflate.c
;	COMDAT lm_init
_TEXT	SEGMENT
s$ = 48
lm_init	PROC						; COMDAT

; 1216 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1217 :     s->window_size = (ulg)2L*s->w_size;

  0000a	8b 41 44	 mov	 eax, DWORD PTR [rcx+68]
  0000d	48 8b d9	 mov	 rbx, rcx

; 1218 : 
; 1219 :     CLEAR_HASH(s);

  00010	8b 51 74	 mov	 edx, DWORD PTR [rcx+116]
  00013	03 c0		 add	 eax, eax
  00015	89 41 58	 mov	 DWORD PTR [rcx+88], eax
  00018	ff ca		 dec	 edx
  0001a	48 8b 41 68	 mov	 rax, QWORD PTR [rcx+104]
  0001e	33 ff		 xor	 edi, edi
  00020	66 89 3c 50	 mov	 WORD PTR [rax+rdx*2], di
  00024	33 d2		 xor	 edx, edx
  00026	44 8b 41 74	 mov	 r8d, DWORD PTR [rcx+116]
  0002a	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  0002e	41 ff c8	 dec	 r8d
  00031	4d 03 c0	 add	 r8, r8
  00034	e8 00 00 00 00	 call	 memset

; 1220 : 
; 1221 :     /* Set the default configuration parameters:
; 1222 :      */
; 1223 :     s->max_lazy_match   = configuration_table[s->level].max_lazy;

  00039	48 63 8b ac 00
	00 00		 movsxd	 rcx, DWORD PTR [rbx+172]
  00040	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:configuration_table
  00047	48 03 c9	 add	 rcx, rcx
  0004a	0f b7 44 ca 02	 movzx	 eax, WORD PTR [rdx+rcx*8+2]
  0004f	89 83 a8 00 00
	00		 mov	 DWORD PTR [rbx+168], eax

; 1224 :     s->good_match       = configuration_table[s->level].good_length;

  00055	0f b7 04 ca	 movzx	 eax, WORD PTR [rdx+rcx*8]
  00059	89 83 b4 00 00
	00		 mov	 DWORD PTR [rbx+180], eax

; 1225 :     s->nice_match       = configuration_table[s->level].nice_length;

  0005f	0f b7 44 ca 04	 movzx	 eax, WORD PTR [rdx+rcx*8+4]
  00064	89 83 b8 00 00
	00		 mov	 DWORD PTR [rbx+184], eax

; 1226 :     s->max_chain_length = configuration_table[s->level].max_chain;

  0006a	0f b7 44 ca 06	 movzx	 eax, WORD PTR [rdx+rcx*8+6]
  0006f	89 83 a4 00 00
	00		 mov	 DWORD PTR [rbx+164], eax

; 1227 : 
; 1228 :     s->strstart = 0;
; 1229 :     s->block_start = 0L;
; 1230 :     s->lookahead = 0;
; 1231 :     s->insert = 0;
; 1232 :     s->match_length = s->prev_length = MIN_MATCH-1;
; 1233 :     s->match_available = 0;

  00075	48 89 bb 90 00
	00 00		 mov	 QWORD PTR [rbx+144], rdi
  0007c	89 bb 84 00 00
	00		 mov	 DWORD PTR [rbx+132], edi
  00082	89 bb 9c 00 00
	00		 mov	 DWORD PTR [rbx+156], edi
  00088	89 bb 08 17 00
	00		 mov	 DWORD PTR [rbx+5896], edi
  0008e	c7 83 a0 00 00
	00 02 00 00 00	 mov	 DWORD PTR [rbx+160], 2
  00098	c7 83 88 00 00
	00 02 00 00 00	 mov	 DWORD PTR [rbx+136], 2

; 1234 :     s->ins_h = 0;

  000a2	89 7b 70	 mov	 DWORD PTR [rbx+112], edi

; 1238 : #endif
; 1239 : #endif
; 1240 : }

  000a5	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000aa	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ae	5f		 pop	 rdi

; 1235 : #ifndef FASTEST
; 1236 : #ifdef ASMV
; 1237 :     match_init(); /* initialize the asm code */

  000af	e9 00 00 00 00	 jmp	 match_init
lm_init	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\deflate.c
;	COMDAT fill_window
_TEXT	SEGMENT
s$ = 48
fill_window PROC					; COMDAT

; 1504 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1505 :     unsigned n;
; 1506 :     unsigned more;    /* Amount of free space at the end of the window. */
; 1507 :     uInt wsize = s->w_size;

  0000f	8b 71 44	 mov	 esi, DWORD PTR [rcx+68]
  00012	48 8b d9	 mov	 rbx, rcx

; 1514 : 
; 1515 :         /* Deal with !@#$% 64K limit: */
; 1516 :         if (intSizeTwoOrLess) {

  00015	44 8b 89 9c 00
	00 00		 mov	 r9d, DWORD PTR [rcx+156]
  0001c	0f 1f 40 00	 npad	 4
$LL4@fill_windo:

; 1508 :     const int intSizeTwoOrLess = sizeof(int) <= 2;//Fix for Compiler Warning (level 4) C4127 (and small optimization if loops more than once)
; 1509 : 
; 1510 :     Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");
; 1511 : 
; 1512 :     do {
; 1513 :         more = (unsigned)(s->window_size -(ulg)s->lookahead -(ulg)s->strstart);

  00020	8b 93 94 00 00
	00		 mov	 edx, DWORD PTR [rbx+148]
  00026	8b 7b 58	 mov	 edi, DWORD PTR [rbx+88]

; 1517 :             if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
; 1518 :                 more = wsize;
; 1519 : 
; 1520 :             } else if (more == (unsigned)(-1)) {
; 1521 :                 /* Very unlikely, but possible on 16 bit machine if
; 1522 :                  * strstart == 0 && lookahead == 1 (input done a byte at time)
; 1523 :                  */
; 1524 :                 --more;
; 1525 :             }
; 1526 :         }
; 1527 : 
; 1528 :         /* If the window is almost full and there is insufficient lookahead,
; 1529 :          * move the upper half to the lower one to make room in the upper half.
; 1530 :          */
; 1531 :         if (s->strstart >= wsize+MAX_DIST(s)) {

  00029	8b 4b 44	 mov	 ecx, DWORD PTR [rbx+68]
  0002c	2b fa		 sub	 edi, edx
  0002e	81 c1 fa fe ff
	ff		 add	 ecx, -262		; fffffefaH
  00034	41 2b f9	 sub	 edi, r9d
  00037	03 ce		 add	 ecx, esi
  00039	3b d1		 cmp	 edx, ecx
  0003b	72 43		 jb	 SHORT $LN11@fill_windo

; 1532 : 
; 1533 :             zmemcpy(s->window, s->window+wsize, (unsigned)wsize - more);

  0003d	48 8b 4b 50	 mov	 rcx, QWORD PTR [rbx+80]
  00041	44 8b c6	 mov	 r8d, esi
  00044	44 2b c7	 sub	 r8d, edi
  00047	48 8d 14 31	 lea	 rdx, QWORD PTR [rcx+rsi]
  0004b	e8 00 00 00 00	 call	 memcpy

; 1534 :             s->match_start -= wsize;
; 1535 :             s->strstart    -= wsize; /* we now have strstart >= MAX_DIST */

  00050	29 b3 94 00 00
	00		 sub	 DWORD PTR [rbx+148], esi
  00056	29 b3 98 00 00
	00		 sub	 DWORD PTR [rbx+152], esi

; 1536 :             s->block_start -= (long) wsize;

  0005c	29 b3 84 00 00
	00		 sub	 DWORD PTR [rbx+132], esi
  00062	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [rbx+148]

; 1537 :             if (s->insert > s->strstart)

  00068	39 83 08 17 00
	00		 cmp	 DWORD PTR [rbx+5896], eax
  0006e	76 06		 jbe	 SHORT $LN30@fill_windo

; 1538 :                 s->insert = s->strstart;

  00070	89 83 08 17 00
	00		 mov	 DWORD PTR [rbx+5896], eax
$LN30@fill_windo:

; 1539 :             slide_hash(s);

  00076	48 8b cb	 mov	 rcx, rbx
  00079	e8 00 00 00 00	 call	 slide_hash

; 1540 :             more += wsize;

  0007e	03 fe		 add	 edi, esi
$LN11@fill_windo:

; 1541 :         }
; 1542 :         if (s->strm->avail_in == 0) break;

  00080	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00083	83 79 08 00	 cmp	 DWORD PTR [rcx+8], 0
  00087	0f 84 07 01 00
	00		 je	 $LN3@fill_windo

; 1543 : 
; 1544 :         /* If there was no sliding:
; 1545 :          *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
; 1546 :          *    more == window_size - lookahead - strstart
; 1547 :          * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
; 1548 :          * => more >= window_size - 2*WSIZE + 2
; 1549 :          * In the BIG_MEM or MMAP case (not yet supported),
; 1550 :          *   window_size == input_size + MIN_LOOKAHEAD  &&
; 1551 :          *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
; 1552 :          * Otherwise, window_size == 2*WSIZE so more >= 2.
; 1553 :          * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
; 1554 :          */
; 1555 :         Assert(more >= 2, "more < 2");
; 1556 : 
; 1557 :         n = read_buf(s->strm, s->window + s->strstart + s->lookahead, more);

  0008d	8b 93 9c 00 00
	00		 mov	 edx, DWORD PTR [rbx+156]
  00093	44 8b c7	 mov	 r8d, edi
  00096	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [rbx+148]
  0009c	48 03 d0	 add	 rdx, rax
  0009f	48 03 53 50	 add	 rdx, QWORD PTR [rbx+80]
  000a3	e8 00 00 00 00	 call	 read_buf

; 1558 :         s->lookahead += n;

  000a8	44 8b 8b 9c 00
	00 00		 mov	 r9d, DWORD PTR [rbx+156]

; 1559 : 
; 1560 :         /* Initialize the hash value now that we have some input: */
; 1561 :         if (s->lookahead + s->insert >= MIN_MATCH) {

  000af	44 8b 9b 08 17
	00 00		 mov	 r11d, DWORD PTR [rbx+5896]
  000b6	44 03 c8	 add	 r9d, eax
  000b9	44 89 8b 9c 00
	00 00		 mov	 DWORD PTR [rbx+156], r9d
  000c0	43 8d 04 19	 lea	 eax, DWORD PTR [r9+r11]
  000c4	83 f8 03	 cmp	 eax, 3
  000c7	0f 82 b1 00 00
	00		 jb	 $LN2@fill_windo

; 1562 :             uInt str = s->strstart - s->insert;

  000cd	44 8b 93 94 00
	00 00		 mov	 r10d, DWORD PTR [rbx+148]

; 1563 :             s->ins_h = s->window[str];

  000d4	48 8b 53 50	 mov	 rdx, QWORD PTR [rbx+80]
  000d8	45 2b d3	 sub	 r10d, r11d

; 1564 :             UPDATE_HASH(s, s->ins_h, s->window[str + 1]);

  000db	8b 8b 80 00 00
	00		 mov	 ecx, DWORD PTR [rbx+128]
  000e1	45 0f b6 04 12	 movzx	 r8d, BYTE PTR [r10+rdx]
  000e6	41 8d 42 01	 lea	 eax, DWORD PTR [r10+1]
  000ea	44 89 43 70	 mov	 DWORD PTR [rbx+112], r8d
  000ee	0f b6 04 10	 movzx	 eax, BYTE PTR [rax+rdx]
  000f2	41 d3 e0	 shl	 r8d, cl
  000f5	41 33 c0	 xor	 eax, r8d
  000f8	23 43 7c	 and	 eax, DWORD PTR [rbx+124]
  000fb	89 43 70	 mov	 DWORD PTR [rbx+112], eax

; 1565 : #if MIN_MATCH != 3
; 1566 :             Call UPDATE_HASH() MIN_MATCH-3 more times
; 1567 : #endif
; 1568 :             while (s->insert) {

  000fe	45 85 db	 test	 r11d, r11d
  00101	74 7b		 je	 SHORT $LN2@fill_windo

; 1562 :             uInt str = s->strstart - s->insert;

  00103	45 8d 5a 02	 lea	 r11d, DWORD PTR [r10+2]
  00107	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL5@fill_windo:

; 1569 :                 UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]);

  00110	48 8b 43 50	 mov	 rax, QWORD PTR [rbx+80]
  00114	8b 8b 80 00 00
	00		 mov	 ecx, DWORD PTR [rbx+128]

; 1570 : #ifndef FASTEST
; 1571 :                 s->prev[str & s->w_mask] = s->head[s->ins_h];

  0011a	48 8b 53 68	 mov	 rdx, QWORD PTR [rbx+104]
  0011e	44 8b 43 4c	 mov	 r8d, DWORD PTR [rbx+76]
  00122	45 0f b6 0c 03	 movzx	 r9d, BYTE PTR [r11+rax]

; 1572 : #endif
; 1573 :                 s->head[s->ins_h] = (Pos)str;
; 1574 :                 ++str;

  00127	45 8d 5b 01	 lea	 r11d, DWORD PTR [r11+1]
  0012b	8b 43 70	 mov	 eax, DWORD PTR [rbx+112]
  0012e	d3 e0		 shl	 eax, cl
  00130	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  00134	44 33 c8	 xor	 r9d, eax
  00137	44 23 4b 7c	 and	 r9d, DWORD PTR [rbx+124]
  0013b	44 89 4b 70	 mov	 DWORD PTR [rbx+112], r9d
  0013f	41 8b c2	 mov	 eax, r10d
  00142	4c 23 c0	 and	 r8, rax
  00145	42 0f b7 04 4a	 movzx	 eax, WORD PTR [rdx+r9*2]
  0014a	66 42 89 04 41	 mov	 WORD PTR [rcx+r8*2], ax
  0014f	8b 4b 70	 mov	 ecx, DWORD PTR [rbx+112]
  00152	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]
  00156	66 44 89 14 48	 mov	 WORD PTR [rax+rcx*2], r10w
  0015b	41 ff c2	 inc	 r10d

; 1575 :                 --s->insert;

  0015e	ff 8b 08 17 00
	00		 dec	 DWORD PTR [rbx+5896]
  00164	8b 8b 08 17 00
	00		 mov	 ecx, DWORD PTR [rbx+5896]

; 1576 :                 if (s->lookahead + s->insert < MIN_MATCH)

  0016a	44 8b 8b 9c 00
	00 00		 mov	 r9d, DWORD PTR [rbx+156]
  00171	42 8d 04 09	 lea	 eax, DWORD PTR [rcx+r9]
  00175	83 f8 03	 cmp	 eax, 3
  00178	72 04		 jb	 SHORT $LN2@fill_windo

; 1565 : #if MIN_MATCH != 3
; 1566 :             Call UPDATE_HASH() MIN_MATCH-3 more times
; 1567 : #endif
; 1568 :             while (s->insert) {

  0017a	85 c9		 test	 ecx, ecx
  0017c	75 92		 jne	 SHORT $LL5@fill_windo
$LN2@fill_windo:

; 1577 :                     break;
; 1578 :             }
; 1579 :         }
; 1580 :         /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
; 1581 :          * but this is not important since only literal bytes will be emitted.
; 1582 :          */
; 1583 : 
; 1584 :     } while (s->lookahead < MIN_LOOKAHEAD && s->strm->avail_in != 0);

  0017e	41 81 f9 06 01
	00 00		 cmp	 r9d, 262		; 00000106H
  00185	73 0d		 jae	 SHORT $LN3@fill_windo
  00187	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0018a	83 78 08 00	 cmp	 DWORD PTR [rax+8], 0
  0018e	0f 85 8c fe ff
	ff		 jne	 $LL4@fill_windo
$LN3@fill_windo:

; 1585 : 
; 1586 :     /* If the WIN_INIT bytes after the end of the current data have never been
; 1587 :      * written, then zero those bytes in order to avoid memory check reports of
; 1588 :      * the use of uninitialized (or uninitialised as Julian writes) bytes by
; 1589 :      * the longest match routines.  Update the high water mark for the next
; 1590 :      * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
; 1591 :      * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
; 1592 :      */
; 1593 :     if (s->high_water < s->window_size) {

  00194	8b 8b 14 17 00
	00		 mov	 ecx, DWORD PTR [rbx+5908]
  0019a	8b 7b 58	 mov	 edi, DWORD PTR [rbx+88]
  0019d	3b cf		 cmp	 ecx, edi
  0019f	73 72		 jae	 SHORT $LN21@fill_windo

; 1594 :         ulg curr = s->strstart + (ulg)(s->lookahead);

  001a1	8b b3 9c 00 00
	00		 mov	 esi, DWORD PTR [rbx+156]
  001a7	03 b3 94 00 00
	00		 add	 esi, DWORD PTR [rbx+148]

; 1595 :         ulg init;
; 1596 : 
; 1597 :         if (s->high_water < curr) {

  001ad	3b ce		 cmp	 ecx, esi
  001af	73 35		 jae	 SHORT $LN18@fill_windo

; 1598 :             /* Previous high water mark below current data -- zero WIN_INIT
; 1599 :              * bytes or up to end of window, whichever is less.
; 1600 :              */
; 1601 :             init = s->window_size - curr;

  001b1	2b fe		 sub	 edi, esi

; 1602 :             if (init > WIN_INIT)
; 1603 :                 init = WIN_INIT;
; 1604 :             zmemzero(s->window + curr, (unsigned)init);

  001b3	8b ce		 mov	 ecx, esi
  001b5	b8 02 01 00 00	 mov	 eax, 258		; 00000102H
  001ba	3b f8		 cmp	 edi, eax
  001bc	0f 47 f8	 cmova	 edi, eax
  001bf	48 03 4b 50	 add	 rcx, QWORD PTR [rbx+80]
  001c3	44 8b c7	 mov	 r8d, edi
  001c6	33 d2		 xor	 edx, edx
  001c8	e8 00 00 00 00	 call	 memset

; 1605 :             s->high_water = curr + init;

  001cd	8d 04 37	 lea	 eax, DWORD PTR [rdi+rsi]
  001d0	89 83 14 17 00
	00		 mov	 DWORD PTR [rbx+5908], eax

; 1617 :         }
; 1618 :     }
; 1619 : 
; 1620 :     Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
; 1621 :            "not enough room for search");
; 1622 : }

  001d6	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  001db	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  001e0	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001e4	5f		 pop	 rdi
  001e5	c3		 ret	 0
$LN18@fill_windo:

; 1606 :         }
; 1607 :         else if (s->high_water < (ulg)curr + WIN_INIT) {

  001e6	8d 86 02 01 00
	00		 lea	 eax, DWORD PTR [rsi+258]
  001ec	3b c8		 cmp	 ecx, eax
  001ee	73 23		 jae	 SHORT $LN21@fill_windo

; 1608 :             /* High water mark at or above current data, but below current data
; 1609 :              * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
; 1610 :              * to end of window, whichever is less.
; 1611 :              */
; 1612 :             init = (ulg)curr + WIN_INIT - s->high_water;
; 1613 :             if (init > s->window_size - s->high_water)

  001f0	2b f9		 sub	 edi, ecx
  001f2	2b f1		 sub	 esi, ecx
  001f4	8d 86 02 01 00
	00		 lea	 eax, DWORD PTR [rsi+258]

; 1614 :                 init = s->window_size - s->high_water;
; 1615 :             zmemzero(s->window + s->high_water, (unsigned)init);

  001fa	3b c7		 cmp	 eax, edi
  001fc	0f 46 f8	 cmovbe	 edi, eax
  001ff	48 03 4b 50	 add	 rcx, QWORD PTR [rbx+80]
  00203	44 8b c7	 mov	 r8d, edi
  00206	33 d2		 xor	 edx, edx
  00208	e8 00 00 00 00	 call	 memset

; 1616 :             s->high_water += init;

  0020d	01 bb 14 17 00
	00		 add	 DWORD PTR [rbx+5908], edi
$LN21@fill_windo:

; 1617 :         }
; 1618 :     }
; 1619 : 
; 1620 :     Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
; 1621 :            "not enough room for search");
; 1622 : }

  00213	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00218	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0021d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00221	5f		 pop	 rdi
  00222	c3		 ret	 0
fill_window ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\deflate.c
;	COMDAT deflate_stored
_TEXT	SEGMENT
used$2$ = 80
s$ = 80
flush$ = 88
deflate_stored PROC					; COMDAT

; 1669 : {

  00000	40 53		 push	 rbx
  00002	56		 push	 rsi
  00003	41 56		 push	 r14
  00005	41 57		 push	 r15
  00007	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1670 :     /* Smallest worthy block size when not flushing or finishing. By default
; 1671 :      * this is 32K. This can be as small as 507 bytes for memLevel == 1. For
; 1672 :      * large input and output buffers, the stored block size will be larger.
; 1673 :      */
; 1674 :     unsigned min_block = MIN(s->pending_buf_size - 5, s->w_size);

  0000b	8b 41 18	 mov	 eax, DWORD PTR [rcx+24]
  0000e	44 8b fa	 mov	 r15d, edx
  00011	4c 89 64 24 68	 mov	 QWORD PTR [rsp+104], r12
  00016	83 c0 fb	 add	 eax, -5			; fffffffbH
  00019	4c 89 6c 24 20	 mov	 QWORD PTR [rsp+32], r13
  0001e	48 8b d9	 mov	 rbx, rcx
  00021	44 8b 69 44	 mov	 r13d, DWORD PTR [rcx+68]

; 1675 : 
; 1676 :     /* Copy as many min_block or larger stored blocks directly to next_out as
; 1677 :      * possible. If flushing, copy the remaining available input to next_out as
; 1678 :      * stored blocks, if there is enough space.
; 1679 :      */
; 1680 :     unsigned len, left, have, last = 0;

  00025	41 3b c5	 cmp	 eax, r13d

; 1681 :     unsigned used = s->strm->avail_in;

  00028	48 89 6c 24 58	 mov	 QWORD PTR [rsp+88], rbp
  0002d	44 0f 46 e8	 cmovbe	 r13d, eax
  00031	48 89 7c 24 60	 mov	 QWORD PTR [rsp+96], rdi
  00036	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00039	45 33 f6	 xor	 r14d, r14d
  0003c	44 8b 60 08	 mov	 r12d, DWORD PTR [rax+8]
  00040	44 89 64 24 50	 mov	 DWORD PTR used$2$[rsp], r12d
  00045	41 bc ff ff 00
	00		 mov	 r12d, 65535		; 0000ffffH
  0004b	0f 1f 44 00 00	 npad	 5
$LL4@deflate_st:

; 1682 :     do {
; 1683 :         /* Set len to the maximum size block that we can copy directly with the
; 1684 :          * available input data and output space. Set left to how much of that
; 1685 :          * would be copied from what's left in the window.
; 1686 :          */
; 1687 :         len = MAX_STORED;       /* maximum deflate stored block length */
; 1688 :         have = (s->bi_valid + 42) >> 3;         /* number of header bytes */

  00050	8b 83 10 17 00
	00		 mov	 eax, DWORD PTR [rbx+5904]

; 1689 :         if (s->strm->avail_out < have)          /* need room for header */

  00056	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00059	83 c0 2a	 add	 eax, 42			; 0000002aH
  0005c	c1 f8 03	 sar	 eax, 3
  0005f	8b 71 18	 mov	 esi, DWORD PTR [rcx+24]
  00062	3b f0		 cmp	 esi, eax
  00064	0f 82 27 01 00
	00		 jb	 $LN3@deflate_st

; 1690 :             break;
; 1691 :             /* maximum stored block length that will fit in avail_out: */
; 1692 :         have = s->strm->avail_out - have;
; 1693 :         left = s->strstart - s->block_start;    /* bytes left in window */

  0006a	8b ab 94 00 00
	00		 mov	 ebp, DWORD PTR [rbx+148]
  00070	2b f0		 sub	 esi, eax
  00072	2b ab 84 00 00
	00		 sub	 ebp, DWORD PTR [rbx+132]

; 1694 :         if (len > (ulg)left + s->strm->avail_in)

  00078	41 8b c4	 mov	 eax, r12d
  0007b	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  0007e	03 cd		 add	 ecx, ebp
  00080	41 3b cc	 cmp	 ecx, r12d
  00083	0f 42 c1	 cmovb	 eax, ecx

; 1695 :             len = left + s->strm->avail_in;     /* limit len to the input */
; 1696 :         if (len > have)
; 1697 :             len = have;                         /* limit len to the output */
; 1698 : 
; 1699 :         /* If the stored block would be less than min_block in length, or if
; 1700 :          * unable to copy all of the available input when flushing, then try
; 1701 :          * copying to the window and the pending buffer instead. Also don't
; 1702 :          * write an empty block when flushing -- deflate() does that.
; 1703 :          */
; 1704 :         if (len < min_block && ((len == 0 && flush != Z_FINISH) ||

  00086	3b c6		 cmp	 eax, esi
  00088	0f 46 f0	 cmovbe	 esi, eax
  0008b	41 3b f5	 cmp	 esi, r13d
  0008e	73 1f		 jae	 SHORT $LN51@deflate_st
  00090	85 f6		 test	 esi, esi
  00092	75 0a		 jne	 SHORT $LN10@deflate_st
  00094	41 83 ff 04	 cmp	 r15d, 4
  00098	0f 85 f3 00 00
	00		 jne	 $LN3@deflate_st
$LN10@deflate_st:
  0009e	45 85 ff	 test	 r15d, r15d
  000a1	0f 84 ea 00 00
	00		 je	 $LN3@deflate_st
  000a7	3b f1		 cmp	 esi, ecx
  000a9	0f 85 e2 00 00
	00		 jne	 $LN3@deflate_st
$LN51@deflate_st:

; 1705 :                                 flush == Z_NO_FLUSH ||
; 1706 :                                 len != left + s->strm->avail_in))
; 1707 :             break;
; 1708 : 
; 1709 :         /* Make a dummy stored block in pending to get the header bytes,
; 1710 :          * including any pending bits. This also updates the debugging counts.
; 1711 :          */
; 1712 :         last = flush == Z_FINISH && len == left + s->strm->avail_in ? 1 : 0;

  000af	41 83 ff 04	 cmp	 r15d, 4
  000b3	75 0a		 jne	 SHORT $LN52@deflate_st
  000b5	3b f1		 cmp	 esi, ecx
  000b7	75 06		 jne	 SHORT $LN52@deflate_st
  000b9	45 8d 77 fd	 lea	 r14d, QWORD PTR [r15-3]
  000bd	eb 03		 jmp	 SHORT $LN36@deflate_st
$LN52@deflate_st:
  000bf	45 33 f6	 xor	 r14d, r14d
$LN36@deflate_st:

; 1713 :         _tr_stored_block(s, (char *)0, 0L, last);

  000c2	45 8b ce	 mov	 r9d, r14d
  000c5	45 33 c0	 xor	 r8d, r8d
  000c8	33 d2		 xor	 edx, edx
  000ca	48 8b cb	 mov	 rcx, rbx
  000cd	e8 00 00 00 00	 call	 _tr_stored_block

; 1714 : 
; 1715 :         /* Replace the lengths in the dummy stored block with len. */
; 1716 :         s->pending_buf[s->pending - 4] = len;

  000d2	8b 4b 28	 mov	 ecx, DWORD PTR [rbx+40]

; 1717 :         s->pending_buf[s->pending - 3] = len >> 8;

  000d5	8b d6		 mov	 edx, esi
  000d7	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  000db	83 e9 04	 sub	 ecx, 4
  000de	c1 ea 08	 shr	 edx, 8
  000e1	40 88 34 01	 mov	 BYTE PTR [rcx+rax], sil
  000e5	8b 4b 28	 mov	 ecx, DWORD PTR [rbx+40]
  000e8	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  000ec	83 e9 03	 sub	 ecx, 3
  000ef	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 1718 :         s->pending_buf[s->pending - 2] = ~len;

  000f2	40 0f b6 d6	 movzx	 edx, sil
  000f6	8b 4b 28	 mov	 ecx, DWORD PTR [rbx+40]
  000f9	f6 d2		 not	 dl
  000fb	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  000ff	83 e9 02	 sub	 ecx, 2
  00102	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 1719 :         s->pending_buf[s->pending - 1] = ~len >> 8;

  00105	8b d6		 mov	 edx, esi
  00107	8b 4b 28	 mov	 ecx, DWORD PTR [rbx+40]
  0010a	f7 d2		 not	 edx
  0010c	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  00110	ff c9		 dec	 ecx
  00112	c1 ea 08	 shr	 edx, 8
  00115	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 1720 : 
; 1721 :         /* Write the stored block header bytes. */
; 1722 :         flush_pending(s->strm);

  00118	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  0011b	e8 00 00 00 00	 call	 flush_pending

; 1723 : 
; 1724 : #ifdef ZLIB_DEBUG
; 1725 :         /* Update debugging counts for the data about to be copied. */
; 1726 :         s->compressed_len += len << 3;
; 1727 :         s->bits_sent += len << 3;
; 1728 : #endif
; 1729 : 
; 1730 :         /* Copy uncompressed bytes from the window to next_out. */
; 1731 :         if (left) {

  00120	85 ed		 test	 ebp, ebp
  00122	74 3c		 je	 SHORT $LN50@deflate_st

; 1732 :             if (left > len)
; 1733 :                 left = len;
; 1734 :             zmemcpy(s->strm->next_out, s->window + s->block_start, left);

  00124	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00127	3b ee		 cmp	 ebp, esi
  00129	48 63 93 84 00
	00 00		 movsxd	 rdx, DWORD PTR [rbx+132]
  00130	0f 47 ee	 cmova	 ebp, esi
  00133	48 03 53 50	 add	 rdx, QWORD PTR [rbx+80]
  00137	44 8b c5	 mov	 r8d, ebp
  0013a	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  0013e	8b fd		 mov	 edi, ebp
  00140	e8 00 00 00 00	 call	 memcpy

; 1735 :             s->strm->next_out += left;

  00145	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00148	48 01 78 10	 add	 QWORD PTR [rax+16], rdi

; 1736 :             s->strm->avail_out -= left;

  0014c	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0014f	29 68 18	 sub	 DWORD PTR [rax+24], ebp

; 1737 :             s->strm->total_out += left;

  00152	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00155	01 68 1c	 add	 DWORD PTR [rax+28], ebp

; 1738 :             s->block_start += left;

  00158	01 ab 84 00 00
	00		 add	 DWORD PTR [rbx+132], ebp

; 1739 :             len -= left;

  0015e	2b f5		 sub	 esi, ebp
$LN50@deflate_st:

; 1740 :         }
; 1741 : 
; 1742 :         /* Copy uncompressed bytes directly from next_in to next_out, updating
; 1743 :          * the check value.
; 1744 :          */
; 1745 :         if (len) {

  00160	85 f6		 test	 esi, esi
  00162	74 24		 je	 SHORT $LN2@deflate_st

; 1746 :             read_buf(s->strm, s->strm->next_out, len);

  00164	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00167	44 8b c6	 mov	 r8d, esi
  0016a	48 8b 51 10	 mov	 rdx, QWORD PTR [rcx+16]
  0016e	e8 00 00 00 00	 call	 read_buf

; 1747 :             s->strm->next_out += len;

  00173	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00176	8b c6		 mov	 eax, esi
  00178	48 01 41 10	 add	 QWORD PTR [rcx+16], rax

; 1748 :             s->strm->avail_out -= len;

  0017c	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0017f	29 70 18	 sub	 DWORD PTR [rax+24], esi

; 1749 :             s->strm->total_out += len;

  00182	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00185	01 70 1c	 add	 DWORD PTR [rax+28], esi
$LN2@deflate_st:

; 1750 :         }
; 1751 :     } while (last == 0);

  00188	45 85 f6	 test	 r14d, r14d
  0018b	0f 84 bf fe ff
	ff		 je	 $LL4@deflate_st
$LN3@deflate_st:

; 1752 : 
; 1753 :     /* Update the sliding window with the last s->w_size bytes of the copied
; 1754 :      * data, or append all of the copied data to the existing window if less
; 1755 :      * than s->w_size bytes were copied. Also update the number of bytes to
; 1756 :      * insert in the hash tables, in the event that deflateParams() switches to
; 1757 :      * a non-zero compression level.
; 1758 :      */
; 1759 :     used -= s->strm->avail_in;      /* number of input bytes directly copied */

  00191	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00194	44 8b 64 24 50	 mov	 r12d, DWORD PTR used$2$[rsp]
  00199	4c 8b 6c 24 20	 mov	 r13, QWORD PTR [rsp+32]
  0019e	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  001a3	44 2b 60 08	 sub	 r12d, DWORD PTR [rax+8]

; 1760 :     if (used) {

  001a7	0f 84 d7 00 00
	00		 je	 $LN53@deflate_st

; 1761 :         /* If any input was used, then no unused input remains in the window,
; 1762 :          * therefore s->block_start == s->strstart.
; 1763 :          */
; 1764 :         if (used >= s->w_size) {    /* supplant the previous history */

  001ad	8b 53 44	 mov	 edx, DWORD PTR [rbx+68]
  001b0	44 3b e2	 cmp	 r12d, edx
  001b3	72 3a		 jb	 SHORT $LN15@deflate_st

; 1765 :             s->matches = 2;         /* clear hash */
; 1766 :             zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);

  001b5	48 8b 4b 50	 mov	 rcx, QWORD PTR [rbx+80]
  001b9	44 8b c2	 mov	 r8d, edx
  001bc	c7 83 04 17 00
	00 02 00 00 00	 mov	 DWORD PTR [rbx+5892], 2
  001c6	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  001c9	49 2b d0	 sub	 rdx, r8
  001cc	e8 00 00 00 00	 call	 memcpy

; 1767 :             s->strstart = s->w_size;

  001d1	44 8b 43 44	 mov	 r8d, DWORD PTR [rbx+68]
  001d5	44 89 83 94 00
	00 00		 mov	 DWORD PTR [rbx+148], r8d

; 1768 :             s->insert = s->strstart;

  001dc	44 89 83 08 17
	00 00		 mov	 DWORD PTR [rbx+5896], r8d

; 1783 :         }
; 1784 :         s->block_start = s->strstart;

  001e3	44 89 83 84 00
	00 00		 mov	 DWORD PTR [rbx+132], r8d
  001ea	e9 9c 00 00 00	 jmp	 $LN14@deflate_st
$LN15@deflate_st:

; 1769 :         }
; 1770 :         else {
; 1771 :             if (s->window_size - s->strstart <= used) {

  001ef	8b 8b 94 00 00
	00		 mov	 ecx, DWORD PTR [rbx+148]
  001f5	8b 43 58	 mov	 eax, DWORD PTR [rbx+88]
  001f8	2b c1		 sub	 eax, ecx
  001fa	41 3b c4	 cmp	 eax, r12d
  001fd	77 3f		 ja	 SHORT $LN19@deflate_st

; 1772 :                 /* Slide the window down. */
; 1773 :                 s->strstart -= s->w_size;

  001ff	2b ca		 sub	 ecx, edx
  00201	44 8b c1	 mov	 r8d, ecx

; 1774 :                 zmemcpy(s->window, s->window + s->w_size, s->strstart);

  00204	48 8b 4b 50	 mov	 rcx, QWORD PTR [rbx+80]
  00208	48 03 d1	 add	 rdx, rcx
  0020b	44 89 83 94 00
	00 00		 mov	 DWORD PTR [rbx+148], r8d
  00212	e8 00 00 00 00	 call	 memcpy

; 1775 :                 if (s->matches < 2)

  00217	8b 83 04 17 00
	00		 mov	 eax, DWORD PTR [rbx+5892]
  0021d	83 f8 02	 cmp	 eax, 2
  00220	73 08		 jae	 SHORT $LN18@deflate_st

; 1776 :                     ++s->matches;   /* add a pending slide_hash() */

  00222	ff c0		 inc	 eax
  00224	89 83 04 17 00
	00		 mov	 DWORD PTR [rbx+5892], eax
$LN18@deflate_st:

; 1777 :                 if (s->insert > s->strstart)

  0022a	8b 8b 94 00 00
	00		 mov	 ecx, DWORD PTR [rbx+148]
  00230	39 8b 08 17 00
	00		 cmp	 DWORD PTR [rbx+5896], ecx
  00236	76 06		 jbe	 SHORT $LN19@deflate_st

; 1778 :                     s->insert = s->strstart;

  00238	89 8b 08 17 00
	00		 mov	 DWORD PTR [rbx+5896], ecx
$LN19@deflate_st:

; 1779 :             }
; 1780 :             zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);

  0023e	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00241	48 03 4b 50	 add	 rcx, QWORD PTR [rbx+80]
  00245	45 8b c4	 mov	 r8d, r12d
  00248	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0024b	49 2b d0	 sub	 rdx, r8
  0024e	e8 00 00 00 00	 call	 memcpy

; 1781 :             s->strstart += used;
; 1782 :             s->insert += MIN(used, s->w_size - s->insert);

  00253	8b 83 08 17 00
	00		 mov	 eax, DWORD PTR [rbx+5896]
  00259	44 01 a3 94 00
	00 00		 add	 DWORD PTR [rbx+148], r12d
  00260	8b 4b 44	 mov	 ecx, DWORD PTR [rbx+68]
  00263	44 8b 83 94 00
	00 00		 mov	 r8d, DWORD PTR [rbx+148]
  0026a	2b c8		 sub	 ecx, eax
  0026c	44 3b e1	 cmp	 r12d, ecx

; 1783 :         }
; 1784 :         s->block_start = s->strstart;

  0026f	44 89 83 84 00
	00 00		 mov	 DWORD PTR [rbx+132], r8d
  00276	41 0f 46 cc	 cmovbe	 ecx, r12d
  0027a	03 c8		 add	 ecx, eax
  0027c	89 8b 08 17 00
	00		 mov	 DWORD PTR [rbx+5896], ecx
  00282	eb 07		 jmp	 SHORT $LN14@deflate_st
$LN53@deflate_st:
  00284	44 8b 83 94 00
	00 00		 mov	 r8d, DWORD PTR [rbx+148]
$LN14@deflate_st:
  0028b	4c 8b 64 24 68	 mov	 r12, QWORD PTR [rsp+104]

; 1785 :     }
; 1786 :     if (s->high_water < s->strstart)

  00290	44 39 83 14 17
	00 00		 cmp	 DWORD PTR [rbx+5908], r8d
  00297	73 07		 jae	 SHORT $LN20@deflate_st

; 1787 :         s->high_water = s->strstart;

  00299	44 89 83 14 17
	00 00		 mov	 DWORD PTR [rbx+5908], r8d
$LN20@deflate_st:

; 1788 : 
; 1789 :     /* If the last block was written to next_out, then done. */
; 1790 :     if (last)

  002a0	45 85 f6	 test	 r14d, r14d
  002a3	74 15		 je	 SHORT $LN21@deflate_st

; 1791 :         return finish_done;

  002a5	b8 03 00 00 00	 mov	 eax, 3
  002aa	48 8b 7c 24 60	 mov	 rdi, QWORD PTR [rsp+96]

; 1844 : }

  002af	48 83 c4 28	 add	 rsp, 40			; 00000028H
  002b3	41 5f		 pop	 r15
  002b5	41 5e		 pop	 r14
  002b7	5e		 pop	 rsi
  002b8	5b		 pop	 rbx
  002b9	c3		 ret	 0
$LN21@deflate_st:

; 1792 : 
; 1793 :     /* If flushing and all input has been consumed, then done. */
; 1794 :     if (flush != Z_NO_FLUSH && flush != Z_FINISH &&
; 1795 :         s->strm->avail_in == 0 && (long)s->strstart == s->block_start)

  002ba	41 f7 c7 fb ff
	ff ff		 test	 r15d, -5		; fffffffbH
  002c1	74 27		 je	 SHORT $LN22@deflate_st
  002c3	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  002c6	83 79 08 00	 cmp	 DWORD PTR [rcx+8], 0
  002ca	75 1e		 jne	 SHORT $LN22@deflate_st
  002cc	44 3b 83 84 00
	00 00		 cmp	 r8d, DWORD PTR [rbx+132]
  002d3	75 15		 jne	 SHORT $LN22@deflate_st

; 1796 :         return block_done;

  002d5	b8 01 00 00 00	 mov	 eax, 1
  002da	48 8b 7c 24 60	 mov	 rdi, QWORD PTR [rsp+96]

; 1844 : }

  002df	48 83 c4 28	 add	 rsp, 40			; 00000028H
  002e3	41 5f		 pop	 r15
  002e5	41 5e		 pop	 r14
  002e7	5e		 pop	 rsi
  002e8	5b		 pop	 rbx
  002e9	c3		 ret	 0
$LN22@deflate_st:

; 1797 : 
; 1798 :     /* Fill the window with any remaining input. */
; 1799 :     have = s->window_size - s->strstart;
; 1800 :     if (s->strm->avail_in > have && s->block_start >= (long)s->w_size) {

  002ea	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  002ed	8b 7b 58	 mov	 edi, DWORD PTR [rbx+88]
  002f0	41 2b f8	 sub	 edi, r8d
  002f3	41 8b d0	 mov	 edx, r8d
  002f6	39 78 08	 cmp	 DWORD PTR [rax+8], edi
  002f9	76 59		 jbe	 SHORT $LN25@deflate_st
  002fb	8b 43 44	 mov	 eax, DWORD PTR [rbx+68]
  002fe	8b 8b 84 00 00
	00		 mov	 ecx, DWORD PTR [rbx+132]
  00304	41 8b d0	 mov	 edx, r8d
  00307	3b c8		 cmp	 ecx, eax
  00309	7c 49		 jl	 SHORT $LN25@deflate_st

; 1801 :         /* Slide the window down. */
; 1802 :         s->block_start -= s->w_size;

  0030b	2b c8		 sub	 ecx, eax

; 1803 :         s->strstart -= s->w_size;

  0030d	44 2b c0	 sub	 r8d, eax
  00310	89 8b 84 00 00
	00		 mov	 DWORD PTR [rbx+132], ecx

; 1804 :         zmemcpy(s->window, s->window + s->w_size, s->strstart);

  00316	48 8b 4b 50	 mov	 rcx, QWORD PTR [rbx+80]
  0031a	44 89 83 94 00
	00 00		 mov	 DWORD PTR [rbx+148], r8d
  00321	48 8d 14 01	 lea	 rdx, QWORD PTR [rcx+rax]
  00325	e8 00 00 00 00	 call	 memcpy

; 1805 :         if (s->matches < 2)

  0032a	8b 83 04 17 00
	00		 mov	 eax, DWORD PTR [rbx+5892]
  00330	83 f8 02	 cmp	 eax, 2
  00333	73 08		 jae	 SHORT $LN24@deflate_st

; 1806 :             ++s->matches;           /* add a pending slide_hash() */

  00335	ff c0		 inc	 eax
  00337	89 83 04 17 00
	00		 mov	 DWORD PTR [rbx+5892], eax
$LN24@deflate_st:

; 1807 :         have += s->w_size;          /* more space now */

  0033d	03 7b 44	 add	 edi, DWORD PTR [rbx+68]

; 1808 :         if (s->insert > s->strstart)

  00340	8b 93 94 00 00
	00		 mov	 edx, DWORD PTR [rbx+148]
  00346	39 93 08 17 00
	00		 cmp	 DWORD PTR [rbx+5896], edx
  0034c	76 06		 jbe	 SHORT $LN25@deflate_st

; 1809 :             s->insert = s->strstart;

  0034e	89 93 08 17 00
	00		 mov	 DWORD PTR [rbx+5896], edx
$LN25@deflate_st:

; 1810 :     }
; 1811 :     if (have > s->strm->avail_in)

  00354	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00357	8b 71 08	 mov	 esi, DWORD PTR [rcx+8]

; 1812 :         have = s->strm->avail_in;
; 1813 :     if (have) {

  0035a	3b fe		 cmp	 edi, esi
  0035c	0f 46 f7	 cmovbe	 esi, edi
  0035f	85 f6		 test	 esi, esi
  00361	74 33		 je	 SHORT $LN57@deflate_st

; 1814 :         read_buf(s->strm, s->window + s->strstart, have);

  00363	48 03 53 50	 add	 rdx, QWORD PTR [rbx+80]
  00367	44 8b c6	 mov	 r8d, esi
  0036a	e8 00 00 00 00	 call	 read_buf

; 1815 :         s->strstart += have;
; 1816 :         s->insert += MIN(have, s->w_size - s->insert);

  0036f	8b 8b 08 17 00
	00		 mov	 ecx, DWORD PTR [rbx+5896]
  00375	8b 93 94 00 00
	00		 mov	 edx, DWORD PTR [rbx+148]
  0037b	8b 43 44	 mov	 eax, DWORD PTR [rbx+68]
  0037e	03 d6		 add	 edx, esi
  00380	2b c1		 sub	 eax, ecx
  00382	89 93 94 00 00
	00		 mov	 DWORD PTR [rbx+148], edx
  00388	3b f0		 cmp	 esi, eax
  0038a	0f 47 f0	 cmova	 esi, eax
  0038d	8d 04 31	 lea	 eax, DWORD PTR [rcx+rsi]
  00390	89 83 08 17 00
	00		 mov	 DWORD PTR [rbx+5896], eax
$LN57@deflate_st:

; 1817 :     }
; 1818 :     if (s->high_water < s->strstart)

  00396	39 93 14 17 00
	00		 cmp	 DWORD PTR [rbx+5908], edx
  0039c	73 06		 jae	 SHORT $LN28@deflate_st

; 1819 :         s->high_water = s->strstart;

  0039e	89 93 14 17 00
	00		 mov	 DWORD PTR [rbx+5908], edx
$LN28@deflate_st:

; 1820 : 
; 1821 :     /* There was not enough avail_out to write a complete worthy or flushed
; 1822 :      * stored block to next_out. Write a stored block to pending instead, if we
; 1823 :      * have enough input for a worthy block, or if flushing and there is enough
; 1824 :      * room for the remaining input as a stored block in the pending buffer.
; 1825 :      */
; 1826 :     have = (s->bi_valid + 42) >> 3;         /* number of header bytes */

  003a4	8b 83 10 17 00
	00		 mov	 eax, DWORD PTR [rbx+5904]

; 1827 :         /* maximum stored block length that will fit in pending: */
; 1828 :     have = MIN(s->pending_buf_size - have, MAX_STORED);

  003aa	8b 4b 18	 mov	 ecx, DWORD PTR [rbx+24]
  003ad	83 c0 2a	 add	 eax, 42			; 0000002aH

; 1829 :     min_block = MIN(have, s->w_size);
; 1830 :     left = s->strstart - s->block_start;

  003b0	4c 63 83 84 00
	00 00		 movsxd	 r8, DWORD PTR [rbx+132]
  003b7	c1 f8 03	 sar	 eax, 3
  003ba	2b c8		 sub	 ecx, eax
  003bc	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  003c1	3b c8		 cmp	 ecx, eax
  003c3	0f 47 c8	 cmova	 ecx, eax
  003c6	8b 43 44	 mov	 eax, DWORD PTR [rbx+68]
  003c9	41 2b d0	 sub	 edx, r8d
  003cc	3b c8		 cmp	 ecx, eax
  003ce	0f 46 c1	 cmovbe	 eax, ecx

; 1831 :     if (left >= min_block ||

  003d1	3b d0		 cmp	 edx, eax
  003d3	73 1c		 jae	 SHORT $LN58@deflate_st
  003d5	85 d2		 test	 edx, edx
  003d7	75 06		 jne	 SHORT $LN31@deflate_st
  003d9	41 83 ff 04	 cmp	 r15d, 4
  003dd	75 58		 jne	 SHORT $LN29@deflate_st
$LN31@deflate_st:
  003df	45 85 ff	 test	 r15d, r15d
  003e2	74 53		 je	 SHORT $LN29@deflate_st
  003e4	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  003e7	83 78 08 00	 cmp	 DWORD PTR [rax+8], 0
  003eb	75 4a		 jne	 SHORT $LN29@deflate_st
  003ed	3b d1		 cmp	 edx, ecx
  003ef	77 46		 ja	 SHORT $LN29@deflate_st
$LN58@deflate_st:

; 1832 :         ((left || flush == Z_FINISH) && flush != Z_NO_FLUSH &&
; 1833 :          s->strm->avail_in == 0 && left <= have)) {
; 1834 :         len = MIN(left, have);

  003f1	3b d1		 cmp	 edx, ecx
  003f3	8b fa		 mov	 edi, edx
  003f5	0f 47 f9	 cmova	 edi, ecx

; 1835 :         last = flush == Z_FINISH && s->strm->avail_in == 0 &&

  003f8	41 83 ff 04	 cmp	 r15d, 4
  003fc	75 13		 jne	 SHORT $LN45@deflate_st
  003fe	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00401	83 78 08 00	 cmp	 DWORD PTR [rax+8], 0
  00405	75 0a		 jne	 SHORT $LN45@deflate_st
  00407	3b fa		 cmp	 edi, edx
  00409	75 06		 jne	 SHORT $LN45@deflate_st
  0040b	45 8d 77 fd	 lea	 r14d, QWORD PTR [r15-3]
  0040f	eb 03		 jmp	 SHORT $LN46@deflate_st
$LN45@deflate_st:
  00411	45 33 f6	 xor	 r14d, r14d
$LN46@deflate_st:

; 1836 :                len == left ? 1 : 0;
; 1837 :         _tr_stored_block(s, (charf *)s->window + s->block_start, len, last);

  00414	49 8b d0	 mov	 rdx, r8
  00417	45 8b ce	 mov	 r9d, r14d
  0041a	48 03 53 50	 add	 rdx, QWORD PTR [rbx+80]
  0041e	44 8b c7	 mov	 r8d, edi
  00421	48 8b cb	 mov	 rcx, rbx
  00424	e8 00 00 00 00	 call	 _tr_stored_block

; 1838 :         s->block_start += len;
; 1839 :         flush_pending(s->strm);

  00429	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  0042c	01 bb 84 00 00
	00		 add	 DWORD PTR [rbx+132], edi
  00432	e8 00 00 00 00	 call	 flush_pending
$LN29@deflate_st:

; 1840 :     }
; 1841 : 
; 1842 :     /* We've done all we can with the available input and output. */
; 1843 :     return last ? finish_started : need_more;

  00437	48 8b 7c 24 60	 mov	 rdi, QWORD PTR [rsp+96]
  0043c	41 f7 de	 neg	 r14d
  0043f	1b c0		 sbb	 eax, eax
  00441	83 e0 02	 and	 eax, 2

; 1844 : }

  00444	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00448	41 5f		 pop	 r15
  0044a	41 5e		 pop	 r14
  0044c	5e		 pop	 rsi
  0044d	5b		 pop	 rbx
  0044e	c3		 ret	 0
deflate_stored ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\deflate.c
;	COMDAT deflate_fast
_TEXT	SEGMENT
s$ = 80
flush$ = 88
deflate_fast PROC					; COMDAT

; 1856 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	41 56		 push	 r14
  00016	41 57		 push	 r15
  00018	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0001c	8b f2		 mov	 esi, edx
  0001e	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:_length_code
  00025	48 8b d9	 mov	 rbx, rcx
  00028	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:_dist_code
  0002f	41 bf ff ff 00
	00		 mov	 r15d, 65535		; 0000ffffH
  00035	4c 8d 35 00 01
	00 00		 lea	 r14, OFFSET FLAT:_dist_code+256
  0003c	41 bd 00 01 00
	00		 mov	 r13d, 256		; 00000100H
  00042	33 ff		 xor	 edi, edi
  00044	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL2@deflate_fa:

; 1857 :     IPos hash_head;       /* head of the hash chain */
; 1858 :     int bflush;           /* set if current block must be flushed */
; 1859 : 
; 1860 :     for (;;) {
; 1861 :         /* Make sure that we always have enough lookahead, except
; 1862 :          * at the end of the input file. We need MAX_MATCH bytes
; 1863 :          * for the next match, plus MIN_MATCH bytes to insert the
; 1864 :          * string following the next match.
; 1865 :          */
; 1866 :         if (s->lookahead < MIN_LOOKAHEAD) {

  00050	8b 83 9c 00 00
	00		 mov	 eax, DWORD PTR [rbx+156]
  00056	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  0005b	73 25		 jae	 SHORT $LN10@deflate_fa

; 1867 :             fill_window(s);

  0005d	48 8b cb	 mov	 rcx, rbx
  00060	e8 00 00 00 00	 call	 fill_window

; 1868 :             if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {

  00065	8b 83 9c 00 00
	00		 mov	 eax, DWORD PTR [rbx+156]
  0006b	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  00070	73 08		 jae	 SHORT $LN9@deflate_fa
  00072	85 f6		 test	 esi, esi
  00074	0f 84 07 03 00
	00		 je	 $LN39@deflate_fa
$LN9@deflate_fa:

; 1869 :                 return need_more;
; 1870 :             }
; 1871 :             if (s->lookahead == 0) break; /* flush the current block */

  0007a	85 c0		 test	 eax, eax
  0007c	0f 84 1e 03 00
	00		 je	 $LN38@deflate_fa
$LN10@deflate_fa:

; 1872 :         }
; 1873 : 
; 1874 :         /* Insert the string window[strstart .. strstart+2] in the
; 1875 :          * dictionary, and set hash_head to the head of the hash chain:
; 1876 :          */
; 1877 :         hash_head = NIL;
; 1878 :         if (s->lookahead >= MIN_MATCH) {

  00082	83 f8 03	 cmp	 eax, 3
  00085	0f 82 8c 00 00
	00		 jb	 $LN12@deflate_fa

; 1879 :             INSERT_STRING(s, s->strstart, hash_head);

  0008b	48 8b 43 50	 mov	 rax, QWORD PTR [rbx+80]
  0008f	44 8b 8b 94 00
	00 00		 mov	 r9d, DWORD PTR [rbx+148]
  00096	48 8b 53 68	 mov	 rdx, QWORD PTR [rbx+104]
  0009a	41 8d 49 02	 lea	 ecx, DWORD PTR [r9+2]
  0009e	44 0f b6 04 01	 movzx	 r8d, BYTE PTR [rcx+rax]
  000a3	8b 43 70	 mov	 eax, DWORD PTR [rbx+112]
  000a6	8b 8b 80 00 00
	00		 mov	 ecx, DWORD PTR [rbx+128]
  000ac	d3 e0		 shl	 eax, cl
  000ae	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  000b2	44 33 c0	 xor	 r8d, eax
  000b5	44 23 43 7c	 and	 r8d, DWORD PTR [rbx+124]
  000b9	8b 43 4c	 mov	 eax, DWORD PTR [rbx+76]
  000bc	4c 23 c8	 and	 r9, rax
  000bf	44 89 43 70	 mov	 DWORD PTR [rbx+112], r8d
  000c3	42 0f b7 04 42	 movzx	 eax, WORD PTR [rdx+r8*2]
  000c8	66 42 89 04 49	 mov	 WORD PTR [rcx+r9*2], ax
  000cd	8b 43 4c	 mov	 eax, DWORD PTR [rbx+76]
  000d0	44 8b 83 94 00
	00 00		 mov	 r8d, DWORD PTR [rbx+148]
  000d7	41 8b c8	 mov	 ecx, r8d
  000da	48 23 c8	 and	 rcx, rax
  000dd	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  000e1	0f b7 14 48	 movzx	 edx, WORD PTR [rax+rcx*2]
  000e5	8b 4b 70	 mov	 ecx, DWORD PTR [rbx+112]
  000e8	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]
  000ec	66 44 89 04 48	 mov	 WORD PTR [rax+rcx*2], r8w

; 1880 :         }
; 1881 : 
; 1882 :         /* Find the longest match, discarding those <= prev_length.
; 1883 :          * At this point we have always match_length < MIN_MATCH
; 1884 :          */
; 1885 :         if (hash_head != NIL && s->strstart - hash_head <= MAX_DIST(s)) {

  000f1	85 d2		 test	 edx, edx
  000f3	74 22		 je	 SHORT $LN12@deflate_fa
  000f5	8b 8b 94 00 00
	00		 mov	 ecx, DWORD PTR [rbx+148]
  000fb	8b 43 44	 mov	 eax, DWORD PTR [rbx+68]
  000fe	2b ca		 sub	 ecx, edx
  00100	2d 06 01 00 00	 sub	 eax, 262		; 00000106H
  00105	3b c8		 cmp	 ecx, eax
  00107	77 0e		 ja	 SHORT $LN12@deflate_fa

; 1886 :             /* To simplify the code, we prevent matches with the string
; 1887 :              * of window index 0 (in particular we have to avoid a match
; 1888 :              * of the string with itself at the start of the input file).
; 1889 :              */
; 1890 :             s->match_length = longest_match (s, hash_head);

  00109	48 8b cb	 mov	 rcx, rbx
  0010c	e8 00 00 00 00	 call	 longest_match
  00111	89 83 88 00 00
	00		 mov	 DWORD PTR [rbx+136], eax
$LN12@deflate_fa:

; 1891 :             /* longest_match() sets match_start */
; 1892 :         }
; 1893 :         if (s->match_length >= MIN_MATCH) {

  00117	44 8b 8b 88 00
	00 00		 mov	 r9d, DWORD PTR [rbx+136]
  0011e	41 83 f9 03	 cmp	 r9d, 3
  00122	0f 82 87 01 00
	00		 jb	 $LN13@deflate_fa

; 1894 :             check_match(s, s->strstart, s->match_start, s->match_length);
; 1895 : 
; 1896 :             _tr_tally_dist(s, s->strstart - s->match_start,

  00128	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  0012e	41 80 e9 03	 sub	 r9b, 3
  00132	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  00139	44 0f b7 83 94
	00 00 00	 movzx	 r8d, WORD PTR [rbx+148]
  00141	66 44 2b 83 98
	00 00 00	 sub	 r8w, WORD PTR [rbx+152]
  00149	44 88 04 01	 mov	 BYTE PTR [rcx+rax], r8b
  0014d	41 0f b7 c8	 movzx	 ecx, r8w
  00151	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  00157	66 45 03 c7	 add	 r8w, r15w
  0015b	8b 93 f4 16 00
	00		 mov	 edx, DWORD PTR [rbx+5876]
  00161	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  00168	66 c1 e9 08	 shr	 cx, 8
  0016c	88 0c 02	 mov	 BYTE PTR [rdx+rax], cl
  0016f	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  00175	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  0017b	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  00182	44 88 0c 01	 mov	 BYTE PTR [rcx+rax], r9b
  00186	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  0018c	41 0f b6 c1	 movzx	 eax, r9b
  00190	42 0f b6 04 20	 movzx	 eax, BYTE PTR [rax+r12]
  00195	66 ff 84 83 c0
	04 00 00	 inc	 WORD PTR [rbx+rax*4+1216]
  0019d	41 0f b7 c0	 movzx	 eax, r8w
  001a1	66 45 3b c5	 cmp	 r8w, r13w
  001a5	73 05		 jae	 SHORT $LN24@deflate_fa
  001a7	48 03 c5	 add	 rax, rbp
  001aa	eb 07		 jmp	 SHORT $LN25@deflate_fa
$LN24@deflate_fa:
  001ac	48 c1 e8 07	 shr	 rax, 7
  001b0	49 03 c6	 add	 rax, r14
$LN25@deflate_fa:
  001b3	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  001b6	44 8b d7	 mov	 r10d, edi
  001b9	66 ff 84 83 b0
	09 00 00	 inc	 WORD PTR [rbx+rax*4+2480]
  001c1	8b 83 f8 16 00
	00		 mov	 eax, DWORD PTR [rbx+5880]
  001c7	39 83 f4 16 00
	00		 cmp	 DWORD PTR [rbx+5876], eax

; 1897 :                            s->match_length - MIN_MATCH, bflush);
; 1898 : 
; 1899 :             s->lookahead -= s->match_length;

  001cd	8b 83 9c 00 00
	00		 mov	 eax, DWORD PTR [rbx+156]
  001d3	8b 8b 88 00 00
	00		 mov	 ecx, DWORD PTR [rbx+136]
  001d9	41 0f 94 c2	 sete	 r10b
  001dd	2b c1		 sub	 eax, ecx
  001df	89 83 9c 00 00
	00		 mov	 DWORD PTR [rbx+156], eax

; 1900 : 
; 1901 :             /* Insert new strings in the hash table only if the match length
; 1902 :              * is not too large. This saves time but degrades compression.
; 1903 :              */
; 1904 : #ifndef FASTEST
; 1905 :             if (s->match_length <= s->max_insert_length &&

  001e5	3b 8b a8 00 00
	00		 cmp	 ecx, DWORD PTR [rbx+168]
  001eb	77 7a		 ja	 SHORT $LN54@deflate_fa
  001ed	83 f8 03	 cmp	 eax, 3
  001f0	72 75		 jb	 SHORT $LN54@deflate_fa

; 1906 :                 s->lookahead >= MIN_MATCH) {
; 1907 :                 s->match_length--; /* string at strstart already in table */

  001f2	8d 41 ff	 lea	 eax, DWORD PTR [rcx-1]
  001f5	89 83 88 00 00
	00		 mov	 DWORD PTR [rbx+136], eax
  001fb	0f 1f 44 00 00	 npad	 5
$LL7@deflate_fa:

; 1908 :                 do {
; 1909 :                     ++s->strstart;

  00200	ff 83 94 00 00
	00		 inc	 DWORD PTR [rbx+148]

; 1910 :                     INSERT_STRING(s, s->strstart, hash_head);

  00206	48 8b 43 50	 mov	 rax, QWORD PTR [rbx+80]
  0020a	44 8b 8b 94 00
	00 00		 mov	 r9d, DWORD PTR [rbx+148]
  00211	8b 53 4c	 mov	 edx, DWORD PTR [rbx+76]
  00214	49 23 d1	 and	 rdx, r9
  00217	41 8d 49 02	 lea	 ecx, DWORD PTR [r9+2]
  0021b	44 0f b6 04 01	 movzx	 r8d, BYTE PTR [rcx+rax]
  00220	8b 43 70	 mov	 eax, DWORD PTR [rbx+112]
  00223	8b 8b 80 00 00
	00		 mov	 ecx, DWORD PTR [rbx+128]
  00229	d3 e0		 shl	 eax, cl
  0022b	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  0022f	44 33 c0	 xor	 r8d, eax
  00232	44 23 43 7c	 and	 r8d, DWORD PTR [rbx+124]
  00236	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]
  0023a	44 89 43 70	 mov	 DWORD PTR [rbx+112], r8d
  0023e	42 0f b7 04 40	 movzx	 eax, WORD PTR [rax+r8*2]
  00243	66 89 04 51	 mov	 WORD PTR [rcx+rdx*2], ax
  00247	8b 53 70	 mov	 edx, DWORD PTR [rbx+112]
  0024a	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  0024e	0f b7 83 94 00
	00 00		 movzx	 eax, WORD PTR [rbx+148]
  00255	66 89 04 51	 mov	 WORD PTR [rcx+rdx*2], ax

; 1911 :                     /* strstart never exceeds WSIZE-MAX_MATCH, so there are
; 1912 :                      * always MIN_MATCH bytes ahead.
; 1913 :                      */
; 1914 :                 } while (--s->match_length != 0);

  00259	83 83 88 00 00
	00 ff		 add	 DWORD PTR [rbx+136], -1	; ffffffffH
  00260	75 9e		 jne	 SHORT $LL7@deflate_fa

; 1915 :                 ++s->strstart;
; 1916 :             } else

  00262	e9 c0 00 00 00	 jmp	 $LN56@deflate_fa
$LN54@deflate_fa:

; 1917 : #endif
; 1918 :             {
; 1919 :                 s->strstart += s->match_length;

  00267	44 8b 8b 94 00
	00 00		 mov	 r9d, DWORD PTR [rbx+148]

; 1920 :                 s->match_length = 0;
; 1921 :                 s->ins_h = s->window[s->strstart];

  0026e	48 8b 53 50	 mov	 rdx, QWORD PTR [rbx+80]
  00272	44 03 c9	 add	 r9d, ecx

; 1922 :                 UPDATE_HASH(s, s->ins_h, s->window[s->strstart+1]);

  00275	8b 8b 80 00 00
	00		 mov	 ecx, DWORD PTR [rbx+128]
  0027b	44 89 8b 94 00
	00 00		 mov	 DWORD PTR [rbx+148], r9d
  00282	89 bb 88 00 00
	00		 mov	 DWORD PTR [rbx+136], edi
  00288	45 0f b6 04 11	 movzx	 r8d, BYTE PTR [r9+rdx]
  0028d	41 8d 41 01	 lea	 eax, DWORD PTR [r9+1]
  00291	44 89 43 70	 mov	 DWORD PTR [rbx+112], r8d
  00295	0f b6 04 10	 movzx	 eax, BYTE PTR [rax+rdx]
  00299	41 d3 e0	 shl	 r8d, cl
  0029c	41 8b c9	 mov	 ecx, r9d
  0029f	44 33 c0	 xor	 r8d, eax
  002a2	44 23 43 7c	 and	 r8d, DWORD PTR [rbx+124]
  002a6	44 89 43 70	 mov	 DWORD PTR [rbx+112], r8d

; 1923 : #if MIN_MATCH != 3
; 1924 :                 Call UPDATE_HASH() MIN_MATCH-3 more times
; 1925 : #endif
; 1926 :                 /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
; 1927 :                  * matter since it will be recomputed at next deflate call.
; 1928 :                  */
; 1929 :             }
; 1930 :         } else {

  002aa	e9 84 00 00 00	 jmp	 $LN14@deflate_fa
$LN13@deflate_fa:

; 1931 :             /* No match, output a literal byte */
; 1932 :             Tracevv((stderr,"%c", s->window[s->strstart]));
; 1933 :             _tr_tally_lit (s, s->window[s->strstart], bflush);

  002af	8b 8b 94 00 00
	00		 mov	 ecx, DWORD PTR [rbx+148]
  002b5	44 8b d7	 mov	 r10d, edi
  002b8	48 8b 43 50	 mov	 rax, QWORD PTR [rbx+80]
  002bc	44 0f b6 04 01	 movzx	 r8d, BYTE PTR [rcx+rax]
  002c1	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  002c7	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  002ce	40 88 3c 01	 mov	 BYTE PTR [rcx+rax], dil
  002d2	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  002d8	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  002de	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  002e5	40 88 3c 01	 mov	 BYTE PTR [rcx+rax], dil
  002e9	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  002ef	ff c1		 inc	 ecx
  002f1	89 8b f4 16 00
	00		 mov	 DWORD PTR [rbx+5876], ecx
  002f7	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  002fe	44 88 04 01	 mov	 BYTE PTR [rcx+rax], r8b
  00302	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  00308	66 42 ff 84 83
	bc 00 00 00	 inc	 WORD PTR [rbx+r8*4+188]
  00311	8b 83 f8 16 00
	00		 mov	 eax, DWORD PTR [rbx+5880]
  00317	39 83 f4 16 00
	00		 cmp	 DWORD PTR [rbx+5876], eax
  0031d	41 0f 94 c2	 sete	 r10b

; 1934 :             --s->lookahead;

  00321	ff 8b 9c 00 00
	00		 dec	 DWORD PTR [rbx+156]
$LN56@deflate_fa:

; 1935 :             ++s->strstart;
; 1936 :         }
; 1937 :         if (bflush) FLUSH_BLOCK(s, 0);

  00327	ff 83 94 00 00
	00		 inc	 DWORD PTR [rbx+148]
  0032d	8b 8b 94 00 00
	00		 mov	 ecx, DWORD PTR [rbx+148]
$LN14@deflate_fa:
  00333	45 85 d2	 test	 r10d, r10d
  00336	0f 84 14 fd ff
	ff		 je	 $LL2@deflate_fa
  0033c	8b 83 84 00 00
	00		 mov	 eax, DWORD PTR [rbx+132]
  00342	85 c0		 test	 eax, eax
  00344	78 08		 js	 SHORT $LN26@deflate_fa
  00346	8b d0		 mov	 edx, eax
  00348	48 03 53 50	 add	 rdx, QWORD PTR [rbx+80]
  0034c	eb 03		 jmp	 SHORT $LN27@deflate_fa
$LN26@deflate_fa:
  0034e	48 8b d7	 mov	 rdx, rdi
$LN27@deflate_fa:
  00351	2b c8		 sub	 ecx, eax
  00353	45 33 c9	 xor	 r9d, r9d
  00356	44 8b c1	 mov	 r8d, ecx
  00359	48 8b cb	 mov	 rcx, rbx
  0035c	e8 00 00 00 00	 call	 _tr_flush_block
  00361	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [rbx+148]
  00367	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  0036a	89 83 84 00 00
	00		 mov	 DWORD PTR [rbx+132], eax
  00370	e8 00 00 00 00	 call	 flush_pending
  00375	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00378	39 78 18	 cmp	 DWORD PTR [rax+24], edi
  0037b	0f 85 cf fc ff
	ff		 jne	 $LL2@deflate_fa
$LN39@deflate_fa:
  00381	33 c0		 xor	 eax, eax
$LN1@deflate_fa:

; 1947 : }

  00383	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  00388	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  0038d	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  00392	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00396	41 5f		 pop	 r15
  00398	41 5e		 pop	 r14
  0039a	41 5d		 pop	 r13
  0039c	41 5c		 pop	 r12
  0039e	5f		 pop	 rdi
  0039f	c3		 ret	 0
$LN38@deflate_fa:

; 1938 :     }
; 1939 :     s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;

  003a0	8b 8b 94 00 00
	00		 mov	 ecx, DWORD PTR [rbx+148]
  003a6	b8 02 00 00 00	 mov	 eax, 2
  003ab	3b c8		 cmp	 ecx, eax
  003ad	0f 42 c1	 cmovb	 eax, ecx
  003b0	89 83 08 17 00
	00		 mov	 DWORD PTR [rbx+5896], eax

; 1940 :     if (flush == Z_FINISH) {

  003b6	83 fe 04	 cmp	 esi, 4
  003b9	75 4e		 jne	 SHORT $LN19@deflate_fa

; 1941 :         FLUSH_BLOCK(s, 1);

  003bb	8b 83 84 00 00
	00		 mov	 eax, DWORD PTR [rbx+132]
  003c1	85 c0		 test	 eax, eax
  003c3	78 08		 js	 SHORT $LN30@deflate_fa
  003c5	8b d0		 mov	 edx, eax
  003c7	48 03 53 50	 add	 rdx, QWORD PTR [rbx+80]
  003cb	eb 03		 jmp	 SHORT $LN31@deflate_fa
$LN30@deflate_fa:
  003cd	48 8b d7	 mov	 rdx, rdi
$LN31@deflate_fa:
  003d0	2b c8		 sub	 ecx, eax
  003d2	41 b9 01 00 00
	00		 mov	 r9d, 1
  003d8	44 8b c1	 mov	 r8d, ecx
  003db	48 8b cb	 mov	 rcx, rbx
  003de	e8 00 00 00 00	 call	 _tr_flush_block
  003e3	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [rbx+148]
  003e9	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  003ec	89 83 84 00 00
	00		 mov	 DWORD PTR [rbx+132], eax
  003f2	e8 00 00 00 00	 call	 flush_pending
  003f7	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  003fa	39 78 18	 cmp	 DWORD PTR [rax+24], edi
  003fd	40 0f 95 c7	 setne	 dil
  00401	8d 47 02	 lea	 eax, DWORD PTR [rdi+2]

; 1942 :         return finish_done;

  00404	e9 7a ff ff ff	 jmp	 $LN1@deflate_fa
$LN19@deflate_fa:

; 1943 :     }
; 1944 :     if (s->sym_next)

  00409	39 bb f4 16 00
	00		 cmp	 DWORD PTR [rbx+5876], edi
  0040f	74 44		 je	 SHORT $LN22@deflate_fa

; 1945 :         FLUSH_BLOCK(s, 0);

  00411	8b 83 84 00 00
	00		 mov	 eax, DWORD PTR [rbx+132]
  00417	85 c0		 test	 eax, eax
  00419	78 06		 js	 SHORT $LN32@deflate_fa
  0041b	8b f8		 mov	 edi, eax
  0041d	48 03 7b 50	 add	 rdi, QWORD PTR [rbx+80]
$LN32@deflate_fa:
  00421	2b c8		 sub	 ecx, eax
  00423	45 33 c9	 xor	 r9d, r9d
  00426	44 8b c1	 mov	 r8d, ecx
  00429	48 8b d7	 mov	 rdx, rdi
  0042c	48 8b cb	 mov	 rcx, rbx
  0042f	e8 00 00 00 00	 call	 _tr_flush_block
  00434	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [rbx+148]
  0043a	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  0043d	89 83 84 00 00
	00		 mov	 DWORD PTR [rbx+132], eax
  00443	e8 00 00 00 00	 call	 flush_pending
  00448	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0044b	83 78 18 00	 cmp	 DWORD PTR [rax+24], 0
  0044f	0f 84 2c ff ff
	ff		 je	 $LN39@deflate_fa
$LN22@deflate_fa:

; 1946 :     return block_done;

  00455	b8 01 00 00 00	 mov	 eax, 1
  0045a	e9 24 ff ff ff	 jmp	 $LN1@deflate_fa
deflate_fast ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\deflate.c
;	COMDAT deflate_slow
_TEXT	SEGMENT
s$ = 80
flush$ = 88
deflate_slow PROC					; COMDAT

; 1958 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	41 56		 push	 r14
  00016	41 57		 push	 r15
  00018	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0001c	33 f6		 xor	 esi, esi
  0001e	4c 8d 25 00 00
	00 00		 lea	 r12, OFFSET FLAT:_dist_code
  00025	44 8b fa	 mov	 r15d, edx
  00028	4c 8d 2d 00 01
	00 00		 lea	 r13, OFFSET FLAT:_dist_code+256
  0002f	48 8b d9	 mov	 rbx, rcx
  00032	bd ff ff 00 00	 mov	 ebp, 65535		; 0000ffffH
  00037	8d 7e 02	 lea	 edi, QWORD PTR [rsi+2]
$LN74@deflate_sl:

; 1959 :     IPos hash_head;          /* head of hash chain */
; 1960 :     int bflush;              /* set if current block must be flushed */
; 1961 : 
; 1962 :     /* Process the input block. */
; 1963 :     for (;;) {
; 1964 :         /* Make sure that we always have enough lookahead, except
; 1965 :          * at the end of the input file. We need MAX_MATCH bytes
; 1966 :          * for the next match, plus MIN_MATCH bytes to insert the
; 1967 :          * string following the next match.
; 1968 :          */
; 1969 :         if (s->lookahead < MIN_LOOKAHEAD) {

  0003a	4c 8d 35 00 00
	00 00		 lea	 r14, OFFSET FLAT:_length_code
$LL2@deflate_sl:
  00041	8b 83 9c 00 00
	00		 mov	 eax, DWORD PTR [rbx+156]
  00047	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  0004c	73 26		 jae	 SHORT $LN10@deflate_sl

; 1970 :             fill_window(s);

  0004e	48 8b cb	 mov	 rcx, rbx
  00051	e8 00 00 00 00	 call	 fill_window

; 1971 :             if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {

  00056	8b 83 9c 00 00
	00		 mov	 eax, DWORD PTR [rbx+156]
  0005c	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  00061	73 09		 jae	 SHORT $LN9@deflate_sl
  00063	45 85 ff	 test	 r15d, r15d
  00066	0f 84 ca 02 00
	00		 je	 $LN48@deflate_sl
$LN9@deflate_sl:

; 1972 :                 return need_more;
; 1973 :             }
; 1974 :             if (s->lookahead == 0) break; /* flush the current block */

  0006c	85 c0		 test	 eax, eax
  0006e	0f 84 d5 03 00
	00		 je	 $LN46@deflate_sl
$LN10@deflate_sl:

; 1975 :         }
; 1976 : 
; 1977 :         /* Insert the string window[strstart .. strstart+2] in the
; 1978 :          * dictionary, and set hash_head to the head of the hash chain:
; 1979 :          */
; 1980 :         hash_head = NIL;

  00074	44 8b c6	 mov	 r8d, esi

; 1981 :         if (s->lookahead >= MIN_MATCH) {

  00077	83 f8 03	 cmp	 eax, 3
  0007a	72 61		 jb	 SHORT $LN11@deflate_sl

; 1982 :             INSERT_STRING(s, s->strstart, hash_head);

  0007c	48 8b 43 50	 mov	 rax, QWORD PTR [rbx+80]
  00080	44 8b 8b 94 00
	00 00		 mov	 r9d, DWORD PTR [rbx+148]
  00087	8b 53 4c	 mov	 edx, DWORD PTR [rbx+76]
  0008a	49 23 d1	 and	 rdx, r9
  0008d	41 8d 49 02	 lea	 ecx, DWORD PTR [r9+2]
  00091	44 0f b6 04 01	 movzx	 r8d, BYTE PTR [rcx+rax]
  00096	8b 43 70	 mov	 eax, DWORD PTR [rbx+112]
  00099	8b 8b 80 00 00
	00		 mov	 ecx, DWORD PTR [rbx+128]
  0009f	d3 e0		 shl	 eax, cl
  000a1	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  000a5	44 33 c0	 xor	 r8d, eax
  000a8	44 23 43 7c	 and	 r8d, DWORD PTR [rbx+124]
  000ac	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]
  000b0	44 89 43 70	 mov	 DWORD PTR [rbx+112], r8d
  000b4	42 0f b7 04 40	 movzx	 eax, WORD PTR [rax+r8*2]
  000b9	66 89 04 51	 mov	 WORD PTR [rcx+rdx*2], ax
  000bd	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  000c1	8b 93 94 00 00
	00		 mov	 edx, DWORD PTR [rbx+148]
  000c7	8b 4b 4c	 mov	 ecx, DWORD PTR [rbx+76]
  000ca	48 23 ca	 and	 rcx, rdx
  000cd	44 0f b7 04 48	 movzx	 r8d, WORD PTR [rax+rcx*2]
  000d2	8b 4b 70	 mov	 ecx, DWORD PTR [rbx+112]
  000d5	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]
  000d9	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
$LN11@deflate_sl:

; 1983 :         }
; 1984 : 
; 1985 :         /* Find the longest match, discarding those <= prev_length.
; 1986 :          */
; 1987 :         s->prev_length = s->match_length, s->prev_match = s->match_start;

  000dd	8b 8b 88 00 00
	00		 mov	 ecx, DWORD PTR [rbx+136]

; 1988 :         s->match_length = MIN_MATCH-1;

  000e3	8b d7		 mov	 edx, edi
  000e5	8b 83 98 00 00
	00		 mov	 eax, DWORD PTR [rbx+152]
  000eb	89 8b a0 00 00
	00		 mov	 DWORD PTR [rbx+160], ecx
  000f1	89 83 8c 00 00
	00		 mov	 DWORD PTR [rbx+140], eax
  000f7	89 bb 88 00 00
	00		 mov	 DWORD PTR [rbx+136], edi

; 1989 : 
; 1990 :         if (hash_head != NIL && s->prev_length < s->max_lazy_match &&

  000fd	45 85 c0	 test	 r8d, r8d
  00100	74 5e		 je	 SHORT $LN13@deflate_sl
  00102	3b 8b a8 00 00
	00		 cmp	 ecx, DWORD PTR [rbx+168]
  00108	73 56		 jae	 SHORT $LN13@deflate_sl
  0010a	8b 8b 94 00 00
	00		 mov	 ecx, DWORD PTR [rbx+148]
  00110	8b 43 44	 mov	 eax, DWORD PTR [rbx+68]
  00113	41 2b c8	 sub	 ecx, r8d
  00116	2d 06 01 00 00	 sub	 eax, 262		; 00000106H
  0011b	3b c8		 cmp	 ecx, eax
  0011d	77 41		 ja	 SHORT $LN13@deflate_sl

; 1991 :             s->strstart - hash_head <= MAX_DIST(s)) {
; 1992 :             /* To simplify the code, we prevent matches with the string
; 1993 :              * of window index 0 (in particular we have to avoid a match
; 1994 :              * of the string with itself at the start of the input file).
; 1995 :              */
; 1996 :             s->match_length = longest_match (s, hash_head);

  0011f	41 8b d0	 mov	 edx, r8d
  00122	48 8b cb	 mov	 rcx, rbx
  00125	e8 00 00 00 00	 call	 longest_match
  0012a	89 83 88 00 00
	00		 mov	 DWORD PTR [rbx+136], eax

; 1997 :             /* longest_match() sets match_start */
; 1998 : 
; 1999 :             if (s->match_length <= 5 && (s->strategy == Z_FILTERED

  00130	8b d0		 mov	 edx, eax
  00132	83 f8 05	 cmp	 eax, 5
  00135	77 29		 ja	 SHORT $LN13@deflate_sl
  00137	83 bb b0 00 00
	00 01		 cmp	 DWORD PTR [rbx+176], 1
  0013e	74 18		 je	 SHORT $LN14@deflate_sl
  00140	83 f8 03	 cmp	 eax, 3
  00143	75 1b		 jne	 SHORT $LN13@deflate_sl
  00145	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [rbx+148]
  0014b	2b 83 98 00 00
	00		 sub	 eax, DWORD PTR [rbx+152]
  00151	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00156	76 08		 jbe	 SHORT $LN13@deflate_sl
$LN14@deflate_sl:

; 2000 : #if TOO_FAR <= 32767
; 2001 :                 || (s->match_length == MIN_MATCH &&
; 2002 :                     s->strstart - s->match_start > TOO_FAR)
; 2003 : #endif
; 2004 :                 )) {
; 2005 : 
; 2006 :                 /* If prev_match is also MIN_MATCH, match_start is garbage
; 2007 :                  * but we will ignore the current match anyway.
; 2008 :                  */
; 2009 :                 s->match_length = MIN_MATCH-1;

  00158	89 bb 88 00 00
	00		 mov	 DWORD PTR [rbx+136], edi
  0015e	8b d7		 mov	 edx, edi
$LN13@deflate_sl:

; 2010 :             }
; 2011 :         }
; 2012 :         /* If there was a match at the previous step and the current
; 2013 :          * match is not better, output the previous match:
; 2014 :          */
; 2015 :         if (s->prev_length >= MIN_MATCH && s->match_length <= s->prev_length) {

  00160	44 8b 83 a0 00
	00 00		 mov	 r8d, DWORD PTR [rbx+160]
  00167	41 83 f8 03	 cmp	 r8d, 3
  0016b	0f 82 e4 01 00
	00		 jb	 $LN63@deflate_sl
  00171	41 3b d0	 cmp	 edx, r8d
  00174	0f 87 db 01 00
	00		 ja	 $LN63@deflate_sl

; 2016 :             uInt max_insert = s->strstart + s->lookahead - MIN_MATCH;
; 2017 :             /* Do not insert strings in hash table beyond this. */
; 2018 : 
; 2019 :             check_match(s, s->strstart-1, s->prev_match, s->prev_length);
; 2020 : 
; 2021 :             _tr_tally_dist(s, s->strstart -1 - s->prev_match,

  0017a	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  00180	41 80 e8 03	 sub	 r8b, 3
  00184	44 8b 8b 94 00
	00 00		 mov	 r9d, DWORD PTR [rbx+148]
  0018b	44 8b 9b 9c 00
	00 00		 mov	 r11d, DWORD PTR [rbx+156]
  00192	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  00199	41 83 c3 fd	 add	 r11d, -3		; fffffffdH
  0019d	45 03 d9	 add	 r11d, r9d
  001a0	66 44 2b 8b 8c
	00 00 00	 sub	 r9w, WORD PTR [rbx+140]
  001a8	66 41 ff c9	 dec	 r9w
  001ac	44 88 0c 01	 mov	 BYTE PTR [rcx+rax], r9b
  001b0	41 0f b7 c9	 movzx	 ecx, r9w
  001b4	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  001ba	66 44 03 cd	 add	 r9w, bp
  001be	8b 93 f4 16 00
	00		 mov	 edx, DWORD PTR [rbx+5876]
  001c4	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  001cb	66 c1 e9 08	 shr	 cx, 8
  001cf	88 0c 02	 mov	 BYTE PTR [rdx+rax], cl
  001d2	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  001d8	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  001de	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  001e5	44 88 04 01	 mov	 BYTE PTR [rcx+rax], r8b
  001e9	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  001ef	41 0f b6 c0	 movzx	 eax, r8b
  001f3	42 0f b6 04 30	 movzx	 eax, BYTE PTR [rax+r14]
  001f8	66 ff 84 83 c0
	04 00 00	 inc	 WORD PTR [rbx+rax*4+1216]
  00200	b8 00 01 00 00	 mov	 eax, 256		; 00000100H
  00205	66 44 3b c8	 cmp	 r9w, ax
  00209	41 0f b7 c1	 movzx	 eax, r9w
  0020d	73 05		 jae	 SHORT $LN30@deflate_sl
  0020f	49 03 c4	 add	 rax, r12
  00212	eb 07		 jmp	 SHORT $LN31@deflate_sl
$LN30@deflate_sl:
  00214	48 c1 e8 07	 shr	 rax, 7
  00218	49 03 c5	 add	 rax, r13
$LN31@deflate_sl:
  0021b	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0021e	66 ff 84 83 b0
	09 00 00	 inc	 WORD PTR [rbx+rax*4+2480]

; 2022 :                            s->prev_length - MIN_MATCH, bflush);
; 2023 : 
; 2024 :             /* Insert in hash table all strings up to the end of the match.
; 2025 :              * strstart-1 and strstart are already inserted. If there is not
; 2026 :              * enough lookahead, the last two strings are not inserted in
; 2027 :              * the hash table.
; 2028 :              */
; 2029 :             s->lookahead -= s->prev_length-1;

  00226	b8 01 00 00 00	 mov	 eax, 1
  0022b	8b 8b a0 00 00
	00		 mov	 ecx, DWORD PTR [rbx+160]
  00231	2b c1		 sub	 eax, ecx
  00233	01 83 9c 00 00
	00		 add	 DWORD PTR [rbx+156], eax
  00239	8b ab f4 16 00
	00		 mov	 ebp, DWORD PTR [rbx+5876]
  0023f	44 8b b3 f8 16
	00 00		 mov	 r14d, DWORD PTR [rbx+5880]

; 2030 :             s->prev_length -= 2;

  00246	8d 41 fe	 lea	 eax, DWORD PTR [rcx-2]
  00249	89 83 a0 00 00
	00		 mov	 DWORD PTR [rbx+160], eax
  0024f	90		 npad	 1
$LL7@deflate_sl:

; 2031 :             do {
; 2032 :                 if (++s->strstart <= max_insert) {

  00250	44 8b 93 94 00
	00 00		 mov	 r10d, DWORD PTR [rbx+148]
  00257	41 ff c2	 inc	 r10d
  0025a	44 89 93 94 00
	00 00		 mov	 DWORD PTR [rbx+148], r10d
  00261	45 3b d3	 cmp	 r10d, r11d
  00264	77 58		 ja	 SHORT $LN5@deflate_sl

; 2033 :                     INSERT_STRING(s, s->strstart, hash_head);

  00266	48 8b 43 50	 mov	 rax, QWORD PTR [rbx+80]
  0026a	41 8d 4a 02	 lea	 ecx, DWORD PTR [r10+2]
  0026e	48 8b 53 68	 mov	 rdx, QWORD PTR [rbx+104]
  00272	44 8b 43 4c	 mov	 r8d, DWORD PTR [rbx+76]
  00276	44 0f b6 0c 01	 movzx	 r9d, BYTE PTR [rcx+rax]
  0027b	8b 43 70	 mov	 eax, DWORD PTR [rbx+112]
  0027e	8b 8b 80 00 00
	00		 mov	 ecx, DWORD PTR [rbx+128]
  00284	d3 e0		 shl	 eax, cl
  00286	48 8b 4b 60	 mov	 rcx, QWORD PTR [rbx+96]
  0028a	44 33 c8	 xor	 r9d, eax
  0028d	44 23 4b 7c	 and	 r9d, DWORD PTR [rbx+124]
  00291	44 89 4b 70	 mov	 DWORD PTR [rbx+112], r9d
  00295	41 8b c2	 mov	 eax, r10d
  00298	4c 23 c0	 and	 r8, rax
  0029b	42 0f b7 04 4a	 movzx	 eax, WORD PTR [rdx+r9*2]
  002a0	66 42 89 04 41	 mov	 WORD PTR [rcx+r8*2], ax
  002a5	8b 53 70	 mov	 edx, DWORD PTR [rbx+112]
  002a8	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  002ac	0f b7 83 94 00
	00 00		 movzx	 eax, WORD PTR [rbx+148]
  002b3	66 89 04 51	 mov	 WORD PTR [rcx+rdx*2], ax
  002b7	44 8b 93 94 00
	00 00		 mov	 r10d, DWORD PTR [rbx+148]
$LN5@deflate_sl:

; 2034 :                 }
; 2035 :             } while (--s->prev_length != 0);

  002be	83 83 a0 00 00
	00 ff		 add	 DWORD PTR [rbx+160], -1	; ffffffffH
  002c5	75 89		 jne	 SHORT $LL7@deflate_sl

; 2036 :             s->match_available = 0;
; 2037 :             s->match_length = MIN_MATCH-1;
; 2038 :             s->strstart++;
; 2039 : 
; 2040 :             if (bflush) FLUSH_BLOCK(s, 0);

  002c7	41 3b ee	 cmp	 ebp, r14d
  002ca	89 b3 90 00 00
	00		 mov	 DWORD PTR [rbx+144], esi
  002d0	45 8d 42 01	 lea	 r8d, DWORD PTR [r10+1]
  002d4	89 bb 88 00 00
	00		 mov	 DWORD PTR [rbx+136], edi
  002da	44 89 83 94 00
	00 00		 mov	 DWORD PTR [rbx+148], r8d
  002e1	4c 8d 35 00 00
	00 00		 lea	 r14, OFFSET FLAT:_length_code
  002e8	bd ff ff 00 00	 mov	 ebp, 65535		; 0000ffffH
  002ed	0f 85 4e fd ff
	ff		 jne	 $LL2@deflate_sl
  002f3	8b 83 84 00 00
	00		 mov	 eax, DWORD PTR [rbx+132]
  002f9	85 c0		 test	 eax, eax
  002fb	78 08		 js	 SHORT $LN32@deflate_sl
  002fd	8b d0		 mov	 edx, eax
  002ff	48 03 53 50	 add	 rdx, QWORD PTR [rbx+80]
  00303	eb 03		 jmp	 SHORT $LN33@deflate_sl
$LN32@deflate_sl:
  00305	48 8b d6	 mov	 rdx, rsi
$LN33@deflate_sl:
  00308	44 2b c0	 sub	 r8d, eax
  0030b	45 33 c9	 xor	 r9d, r9d
  0030e	48 8b cb	 mov	 rcx, rbx
  00311	e8 00 00 00 00	 call	 _tr_flush_block
  00316	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [rbx+148]
  0031c	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  0031f	89 83 84 00 00
	00		 mov	 DWORD PTR [rbx+132], eax
  00325	e8 00 00 00 00	 call	 flush_pending
  0032a	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0032d	39 70 18	 cmp	 DWORD PTR [rax+24], esi
  00330	0f 85 04 fd ff
	ff		 jne	 $LN74@deflate_sl
$LN48@deflate_sl:

; 2051 :             }
; 2052 :             ++s->strstart;
; 2053 :             --s->lookahead;
; 2054 :             if (s->strm->avail_out == 0) return need_more;

  00336	33 c0		 xor	 eax, eax
$LN1@deflate_sl:

; 2078 : }

  00338	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0033d	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
  00342	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  00347	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0034b	41 5f		 pop	 r15
  0034d	41 5e		 pop	 r14
  0034f	41 5d		 pop	 r13
  00351	41 5c		 pop	 r12
  00353	5f		 pop	 rdi
  00354	c3		 ret	 0
$LN63@deflate_sl:

; 2041 : 
; 2042 :         } else if (s->match_available) {

  00355	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [rbx+148]
  0035b	39 b3 90 00 00
	00		 cmp	 DWORD PTR [rbx+144], esi
  00361	0f 84 c5 00 00
	00		 je	 $LN20@deflate_sl

; 2043 :             /* If there was no match at the previous position, output a
; 2044 :              * single literal. If there was a match but the current match
; 2045 :              * is longer, truncate the previous match to a single literal.
; 2046 :              */
; 2047 :             Tracevv((stderr,"%c", s->window[s->strstart-1]));
; 2048 :             _tr_tally_lit(s, s->window[s->strstart-1], bflush);

  00367	8d 48 ff	 lea	 ecx, DWORD PTR [rax-1]
  0036a	48 8b 43 50	 mov	 rax, QWORD PTR [rbx+80]
  0036e	44 0f b6 04 01	 movzx	 r8d, BYTE PTR [rcx+rax]
  00373	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  00379	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  00380	40 88 34 01	 mov	 BYTE PTR [rcx+rax], sil
  00384	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  0038a	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  00390	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  00397	40 88 34 01	 mov	 BYTE PTR [rcx+rax], sil
  0039b	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  003a1	ff c1		 inc	 ecx
  003a3	89 8b f4 16 00
	00		 mov	 DWORD PTR [rbx+5876], ecx
  003a9	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  003b0	44 88 04 01	 mov	 BYTE PTR [rcx+rax], r8b
  003b4	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  003ba	66 42 ff 84 83
	bc 00 00 00	 inc	 WORD PTR [rbx+r8*4+188]
  003c3	8b 83 f8 16 00
	00		 mov	 eax, DWORD PTR [rbx+5880]
  003c9	39 83 f4 16 00
	00		 cmp	 DWORD PTR [rbx+5876], eax

; 2049 :             if (bflush) {

  003cf	75 3e		 jne	 SHORT $LN22@deflate_sl

; 2050 :                 FLUSH_BLOCK_ONLY(s, 0);

  003d1	8b 83 84 00 00
	00		 mov	 eax, DWORD PTR [rbx+132]
  003d7	85 c0		 test	 eax, eax
  003d9	78 08		 js	 SHORT $LN34@deflate_sl
  003db	8b d0		 mov	 edx, eax
  003dd	48 03 53 50	 add	 rdx, QWORD PTR [rbx+80]
  003e1	eb 03		 jmp	 SHORT $LN35@deflate_sl
$LN34@deflate_sl:
  003e3	48 8b d6	 mov	 rdx, rsi
$LN35@deflate_sl:
  003e6	44 8b 83 94 00
	00 00		 mov	 r8d, DWORD PTR [rbx+148]
  003ed	45 33 c9	 xor	 r9d, r9d
  003f0	44 2b c0	 sub	 r8d, eax
  003f3	48 8b cb	 mov	 rcx, rbx
  003f6	e8 00 00 00 00	 call	 _tr_flush_block
  003fb	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [rbx+148]
  00401	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00404	89 83 84 00 00
	00		 mov	 DWORD PTR [rbx+132], eax
  0040a	e8 00 00 00 00	 call	 flush_pending
$LN22@deflate_sl:

; 2051 :             }
; 2052 :             ++s->strstart;
; 2053 :             --s->lookahead;
; 2054 :             if (s->strm->avail_out == 0) return need_more;

  0040f	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00412	ff 83 94 00 00
	00		 inc	 DWORD PTR [rbx+148]
  00418	ff 8b 9c 00 00
	00		 dec	 DWORD PTR [rbx+156]
  0041e	39 70 18	 cmp	 DWORD PTR [rax+24], esi
  00421	0f 85 1a fc ff
	ff		 jne	 $LL2@deflate_sl

; 2055 :         } else {

  00427	e9 0a ff ff ff	 jmp	 $LN48@deflate_sl
$LN20@deflate_sl:

; 2056 :             /* There is no previous match to compare with, wait for
; 2057 :              * the next step to decide.
; 2058 :              */
; 2059 :             s->match_available = 1;
; 2060 :             ++s->strstart;

  0042c	ff c0		 inc	 eax
  0042e	c7 83 90 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rbx+144], 1

; 2061 :             --s->lookahead;

  00438	ff 8b 9c 00 00
	00		 dec	 DWORD PTR [rbx+156]
  0043e	89 83 94 00 00
	00		 mov	 DWORD PTR [rbx+148], eax

; 2062 :         }
; 2063 :     }

  00444	e9 f8 fb ff ff	 jmp	 $LL2@deflate_sl
$LN46@deflate_sl:

; 2064 :     Assert (flush != Z_NO_FLUSH, "no flush?");
; 2065 :     if (s->match_available) {

  00449	39 b3 90 00 00
	00		 cmp	 DWORD PTR [rbx+144], esi
  0044f	74 67		 je	 SHORT $LN24@deflate_sl

; 2066 :         Tracevv((stderr,"%c", s->window[s->strstart-1]));
; 2067 :         _tr_tally_lit(s, s->window[s->strstart-1], bflush);

  00451	8b 8b 94 00 00
	00		 mov	 ecx, DWORD PTR [rbx+148]
  00457	48 8b 43 50	 mov	 rax, QWORD PTR [rbx+80]
  0045b	ff c9		 dec	 ecx
  0045d	44 0f b6 04 01	 movzx	 r8d, BYTE PTR [rcx+rax]
  00462	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  00468	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  0046f	40 88 34 01	 mov	 BYTE PTR [rcx+rax], sil
  00473	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  00479	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  0047f	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  00486	40 88 34 01	 mov	 BYTE PTR [rcx+rax], sil
  0048a	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  00490	ff c1		 inc	 ecx
  00492	89 8b f4 16 00
	00		 mov	 DWORD PTR [rbx+5876], ecx
  00498	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  0049f	44 88 04 01	 mov	 BYTE PTR [rcx+rax], r8b
  004a3	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  004a9	66 42 ff 84 83
	bc 00 00 00	 inc	 WORD PTR [rbx+r8*4+188]

; 2068 :         s->match_available = 0;

  004b2	89 b3 90 00 00
	00		 mov	 DWORD PTR [rbx+144], esi
$LN24@deflate_sl:

; 2069 :     }
; 2070 :     s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;

  004b8	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [rbx+148]
  004be	3b c7		 cmp	 eax, edi
  004c0	0f 42 f8	 cmovb	 edi, eax
  004c3	89 bb 08 17 00
	00		 mov	 DWORD PTR [rbx+5896], edi

; 2071 :     if (flush == Z_FINISH) {

  004c9	41 83 ff 04	 cmp	 r15d, 4
  004cd	75 4e		 jne	 SHORT $LN25@deflate_sl

; 2072 :         FLUSH_BLOCK(s, 1);

  004cf	8b 8b 84 00 00
	00		 mov	 ecx, DWORD PTR [rbx+132]
  004d5	85 c9		 test	 ecx, ecx
  004d7	78 08		 js	 SHORT $LN38@deflate_sl
  004d9	8b d1		 mov	 edx, ecx
  004db	48 03 53 50	 add	 rdx, QWORD PTR [rbx+80]
  004df	eb 03		 jmp	 SHORT $LN39@deflate_sl
$LN38@deflate_sl:
  004e1	48 8b d6	 mov	 rdx, rsi
$LN39@deflate_sl:
  004e4	2b c1		 sub	 eax, ecx
  004e6	41 b9 01 00 00
	00		 mov	 r9d, 1
  004ec	44 8b c0	 mov	 r8d, eax
  004ef	48 8b cb	 mov	 rcx, rbx
  004f2	e8 00 00 00 00	 call	 _tr_flush_block
  004f7	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [rbx+148]
  004fd	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00500	89 83 84 00 00
	00		 mov	 DWORD PTR [rbx+132], eax
  00506	e8 00 00 00 00	 call	 flush_pending
  0050b	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0050e	39 70 18	 cmp	 DWORD PTR [rax+24], esi
  00511	40 0f 95 c6	 setne	 sil
  00515	8d 46 02	 lea	 eax, DWORD PTR [rsi+2]

; 2073 :         return finish_done;

  00518	e9 1b fe ff ff	 jmp	 $LN1@deflate_sl
$LN25@deflate_sl:

; 2074 :     }
; 2075 :     if (s->sym_next)

  0051d	39 b3 f4 16 00
	00		 cmp	 DWORD PTR [rbx+5876], esi
  00523	74 44		 je	 SHORT $LN28@deflate_sl

; 2076 :         FLUSH_BLOCK(s, 0);

  00525	8b 8b 84 00 00
	00		 mov	 ecx, DWORD PTR [rbx+132]
  0052b	85 c9		 test	 ecx, ecx
  0052d	78 06		 js	 SHORT $LN40@deflate_sl
  0052f	8b f1		 mov	 esi, ecx
  00531	48 03 73 50	 add	 rsi, QWORD PTR [rbx+80]
$LN40@deflate_sl:
  00535	2b c1		 sub	 eax, ecx
  00537	45 33 c9	 xor	 r9d, r9d
  0053a	44 8b c0	 mov	 r8d, eax
  0053d	48 8b d6	 mov	 rdx, rsi
  00540	48 8b cb	 mov	 rcx, rbx
  00543	e8 00 00 00 00	 call	 _tr_flush_block
  00548	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [rbx+148]
  0054e	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00551	89 83 84 00 00
	00		 mov	 DWORD PTR [rbx+132], eax
  00557	e8 00 00 00 00	 call	 flush_pending
  0055c	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0055f	83 78 18 00	 cmp	 DWORD PTR [rax+24], 0
  00563	0f 84 cd fd ff
	ff		 je	 $LN48@deflate_sl
$LN28@deflate_sl:

; 2077 :     return block_done;

  00569	b8 01 00 00 00	 mov	 eax, 1
  0056e	e9 c5 fd ff ff	 jmp	 $LN1@deflate_sl
deflate_slow ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\deflate.c
;	COMDAT deflate_rle
_TEXT	SEGMENT
s$ = 48
flush$ = 56
deflate_rle PROC					; COMDAT

; 2089 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 56		 push	 r14
  00016	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0001a	8b ea		 mov	 ebp, edx
  0001c	48 8d b1 94 00
	00 00		 lea	 rsi, QWORD PTR [rcx+148]
  00023	48 8b d9	 mov	 rbx, rcx
  00026	4c 8d 35 00 00
	00 00		 lea	 r14, OFFSET FLAT:_length_code
  0002d	33 ff		 xor	 edi, edi
  0002f	90		 npad	 1
$LL2@deflate_rl:

; 2090 :     int bflush;             /* set if current block must be flushed */
; 2091 :     uInt prev;              /* byte at distance one to match */
; 2092 :     Bytef *scan, *strend;   /* scan goes up to strend for length of run */
; 2093 : 
; 2094 :     for (;;) {
; 2095 :         /* Make sure that we always have enough lookahead, except
; 2096 :          * at the end of the input file. We need MAX_MATCH bytes
; 2097 :          * for the longest run, plus one for the unrolled loop.
; 2098 :          */
; 2099 :         if (s->lookahead <= MAX_MATCH) {

  00030	44 8b 8b 9c 00
	00 00		 mov	 r9d, DWORD PTR [rbx+156]
  00037	41 8b c1	 mov	 eax, r9d
  0003a	41 81 f9 02 01
	00 00		 cmp	 r9d, 258		; 00000102H
  00041	77 2c		 ja	 SHORT $LN10@deflate_rl

; 2100 :             fill_window(s);

  00043	48 8b cb	 mov	 rcx, rbx
  00046	e8 00 00 00 00	 call	 fill_window

; 2101 :             if (s->lookahead <= MAX_MATCH && flush == Z_NO_FLUSH) {

  0004b	44 8b 8b 9c 00
	00 00		 mov	 r9d, DWORD PTR [rbx+156]
  00052	41 81 f9 02 01
	00 00		 cmp	 r9d, 258		; 00000102H
  00059	77 08		 ja	 SHORT $LN9@deflate_rl
  0005b	85 ed		 test	 ebp, ebp
  0005d	0f 84 d7 02 00
	00		 je	 $LN37@deflate_rl
$LN9@deflate_rl:

; 2102 :                 return need_more;
; 2103 :             }
; 2104 :             if (s->lookahead == 0) break; /* flush the current block */

  00063	41 8b c1	 mov	 eax, r9d
  00066	45 85 c9	 test	 r9d, r9d
  00069	0f 84 1c 02 00
	00		 je	 $LN36@deflate_rl
$LN10@deflate_rl:

; 2105 :         }
; 2106 : 
; 2107 :         /* See how many times the previous byte repeats */
; 2108 :         s->match_length = 0;

  0006f	89 bb 88 00 00
	00		 mov	 DWORD PTR [rbx+136], edi
  00075	44 8b c7	 mov	 r8d, edi

; 2109 :         if (s->lookahead >= MIN_MATCH && s->strstart > 0) {

  00078	83 f8 03	 cmp	 eax, 3
  0007b	0f 82 9e 00 00
	00		 jb	 $LN14@deflate_rl
  00081	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [rbx+148]
  00087	85 c0		 test	 eax, eax
  00089	0f 84 90 00 00
	00		 je	 $LN14@deflate_rl

; 2110 :             scan = s->window + s->strstart - 1;

  0008f	4c 8b 53 50	 mov	 r10, QWORD PTR [rbx+80]
  00093	4c 03 d0	 add	 r10, rax
  00096	41 0f b6 52 ff	 movzx	 edx, BYTE PTR [r10-1]

; 2111 :             prev = *scan;
; 2112 :             if (prev == *++scan && prev == *++scan && prev == *++scan) {

  0009b	41 3a 12	 cmp	 dl, BYTE PTR [r10]
  0009e	75 7f		 jne	 SHORT $LN14@deflate_rl
  000a0	41 3a 52 01	 cmp	 dl, BYTE PTR [r10+1]
  000a4	75 79		 jne	 SHORT $LN14@deflate_rl
  000a6	41 3a 52 02	 cmp	 dl, BYTE PTR [r10+2]
  000aa	49 8d 42 02	 lea	 rax, QWORD PTR [r10+2]
  000ae	75 6f		 jne	 SHORT $LN14@deflate_rl

; 2113 :                 strend = s->window + s->strstart + MAX_MATCH;

  000b0	49 81 c2 02 01
	00 00		 add	 r10, 258		; 00000102H
$LL7@deflate_rl:

; 2114 :                 do {
; 2115 :                 } while (prev == *++scan && prev == *++scan &&
; 2116 :                          prev == *++scan && prev == *++scan &&
; 2117 :                          prev == *++scan && prev == *++scan &&
; 2118 :                          prev == *++scan && prev == *++scan &&

  000b7	8d 48 01	 lea	 ecx, DWORD PTR [rax+1]
  000ba	3a 50 01	 cmp	 dl, BYTE PTR [rax+1]
  000bd	75 40		 jne	 SHORT $LN13@deflate_rl
  000bf	48 8d 48 02	 lea	 rcx, QWORD PTR [rax+2]
  000c3	3a 50 02	 cmp	 dl, BYTE PTR [rax+2]
  000c6	75 37		 jne	 SHORT $LN13@deflate_rl
  000c8	8d 48 03	 lea	 ecx, DWORD PTR [rax+3]
  000cb	3a 50 03	 cmp	 dl, BYTE PTR [rax+3]
  000ce	75 2f		 jne	 SHORT $LN13@deflate_rl
  000d0	8d 48 04	 lea	 ecx, DWORD PTR [rax+4]
  000d3	3a 50 04	 cmp	 dl, BYTE PTR [rax+4]
  000d6	75 27		 jne	 SHORT $LN13@deflate_rl
  000d8	8d 48 05	 lea	 ecx, DWORD PTR [rax+5]
  000db	3a 50 05	 cmp	 dl, BYTE PTR [rax+5]
  000de	75 1f		 jne	 SHORT $LN13@deflate_rl
  000e0	8d 48 06	 lea	 ecx, DWORD PTR [rax+6]
  000e3	3a 50 06	 cmp	 dl, BYTE PTR [rax+6]
  000e6	75 17		 jne	 SHORT $LN13@deflate_rl
  000e8	8d 48 07	 lea	 ecx, DWORD PTR [rax+7]
  000eb	3a 50 07	 cmp	 dl, BYTE PTR [rax+7]
  000ee	75 0f		 jne	 SHORT $LN13@deflate_rl
  000f0	48 83 c0 08	 add	 rax, 8
  000f4	8b c8		 mov	 ecx, eax
  000f6	3a 10		 cmp	 dl, BYTE PTR [rax]
  000f8	75 05		 jne	 SHORT $LN13@deflate_rl
  000fa	49 3b c2	 cmp	 rax, r10
  000fd	72 b8		 jb	 SHORT $LL7@deflate_rl
$LN13@deflate_rl:

; 2119 :                          scan < strend);
; 2120 :                 s->match_length = MAX_MATCH - (uInt)(strend - scan);

  000ff	41 2b ca	 sub	 ecx, r10d
  00102	44 8d 81 02 01
	00 00		 lea	 r8d, DWORD PTR [rcx+258]
  00109	44 89 83 88 00
	00 00		 mov	 DWORD PTR [rbx+136], r8d

; 2121 :                 if (s->match_length > s->lookahead)

  00110	45 3b c1	 cmp	 r8d, r9d
  00113	76 0a		 jbe	 SHORT $LN14@deflate_rl

; 2122 :                     s->match_length = s->lookahead;

  00115	44 89 8b 88 00
	00 00		 mov	 DWORD PTR [rbx+136], r9d
  0011c	45 8b c1	 mov	 r8d, r9d
$LN14@deflate_rl:

; 2123 :             }
; 2124 :             Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
; 2125 :         }
; 2126 : 
; 2127 :         /* Emit match if have run of MIN_MATCH or longer, else emit literal */
; 2128 :         if (s->match_length >= MIN_MATCH) {

  0011f	41 83 f8 03	 cmp	 r8d, 3
  00123	0f 82 8c 00 00
	00		 jb	 $LN15@deflate_rl

; 2129 :             check_match(s, s->strstart, s->strstart - 1, s->match_length);
; 2130 : 
; 2131 :             _tr_tally_dist(s, 1, s->match_length - MIN_MATCH, bflush);

  00129	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  0012f	41 80 e8 03	 sub	 r8b, 3
  00133	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  0013a	c6 04 01 01	 mov	 BYTE PTR [rcx+rax], 1
  0013e	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  00144	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  0014a	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  00151	40 88 3c 01	 mov	 BYTE PTR [rcx+rax], dil
  00155	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  0015b	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  00161	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  00168	44 88 04 01	 mov	 BYTE PTR [rcx+rax], r8b
  0016c	8b cf		 mov	 ecx, edi
  0016e	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  00174	41 0f b6 c0	 movzx	 eax, r8b
  00178	42 0f b6 04 30	 movzx	 eax, BYTE PTR [rax+r14]
  0017d	66 ff 84 83 c0
	04 00 00	 inc	 WORD PTR [rbx+rax*4+1216]
  00185	66 ff 83 b0 09
	00 00		 inc	 WORD PTR [rbx+2480]
  0018c	8b 83 f8 16 00
	00		 mov	 eax, DWORD PTR [rbx+5880]
  00192	39 83 f4 16 00
	00		 cmp	 DWORD PTR [rbx+5876], eax

; 2132 : 
; 2133 :             s->lookahead -= s->match_length;

  00198	8b 83 88 00 00
	00		 mov	 eax, DWORD PTR [rbx+136]
  0019e	0f 94 c1	 sete	 cl

; 2134 :             s->strstart += s->match_length;
; 2135 :             s->match_length = 0;

  001a1	89 bb 88 00 00
	00		 mov	 DWORD PTR [rbx+136], edi
  001a7	29 83 9c 00 00
	00		 sub	 DWORD PTR [rbx+156], eax
  001ad	01 83 94 00 00
	00		 add	 DWORD PTR [rbx+148], eax

; 2136 :         } else {

  001b3	eb 7c		 jmp	 SHORT $LN56@deflate_rl
$LN15@deflate_rl:

; 2137 :             /* No match, output a literal byte */
; 2138 :             Tracevv((stderr,"%c", s->window[s->strstart]));
; 2139 :             _tr_tally_lit (s, s->window[s->strstart], bflush);

  001b5	8b 8b 94 00 00
	00		 mov	 ecx, DWORD PTR [rbx+148]
  001bb	48 8b 43 50	 mov	 rax, QWORD PTR [rbx+80]
  001bf	44 0f b6 04 01	 movzx	 r8d, BYTE PTR [rcx+rax]
  001c4	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  001ca	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  001d1	40 88 3c 01	 mov	 BYTE PTR [rcx+rax], dil
  001d5	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  001db	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  001e1	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  001e8	40 88 3c 01	 mov	 BYTE PTR [rcx+rax], dil
  001ec	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  001f2	ff c1		 inc	 ecx
  001f4	89 8b f4 16 00
	00		 mov	 DWORD PTR [rbx+5876], ecx
  001fa	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  00201	44 88 04 01	 mov	 BYTE PTR [rcx+rax], r8b
  00205	8b cf		 mov	 ecx, edi
  00207	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  0020d	66 42 ff 84 83
	bc 00 00 00	 inc	 WORD PTR [rbx+r8*4+188]
  00216	8b 83 f8 16 00
	00		 mov	 eax, DWORD PTR [rbx+5880]
  0021c	39 83 f4 16 00
	00		 cmp	 DWORD PTR [rbx+5876], eax
  00222	0f 94 c1	 sete	 cl

; 2140 :             --s->lookahead;

  00225	ff 8b 9c 00 00
	00		 dec	 DWORD PTR [rbx+156]

; 2141 :             ++s->strstart;

  0022b	ff 83 94 00 00
	00		 inc	 DWORD PTR [rbx+148]
$LN56@deflate_rl:

; 2142 :         }
; 2143 :         if (bflush) FLUSH_BLOCK(s, 0);

  00231	44 8b 83 94 00
	00 00		 mov	 r8d, DWORD PTR [rbx+148]
  00238	85 c9		 test	 ecx, ecx
  0023a	0f 84 f0 fd ff
	ff		 je	 $LL2@deflate_rl
  00240	8b 83 84 00 00
	00		 mov	 eax, DWORD PTR [rbx+132]
  00246	85 c0		 test	 eax, eax
  00248	78 08		 js	 SHORT $LN26@deflate_rl
  0024a	8b d0		 mov	 edx, eax
  0024c	48 03 53 50	 add	 rdx, QWORD PTR [rbx+80]
  00250	eb 03		 jmp	 SHORT $LN27@deflate_rl
$LN26@deflate_rl:
  00252	48 8b d7	 mov	 rdx, rdi
$LN27@deflate_rl:
  00255	44 2b c0	 sub	 r8d, eax
  00258	45 33 c9	 xor	 r9d, r9d
  0025b	48 8b cb	 mov	 rcx, rbx
  0025e	e8 00 00 00 00	 call	 _tr_flush_block
  00263	8b 06		 mov	 eax, DWORD PTR [rsi]
  00265	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00268	89 83 84 00 00
	00		 mov	 DWORD PTR [rbx+132], eax
  0026e	e8 00 00 00 00	 call	 flush_pending
  00273	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00276	39 78 18	 cmp	 DWORD PTR [rax+24], edi
  00279	0f 84 bb 00 00
	00		 je	 $LN37@deflate_rl
  0027f	48 8d b3 94 00
	00 00		 lea	 rsi, QWORD PTR [rbx+148]

; 2144 :     }

  00286	e9 a5 fd ff ff	 jmp	 $LL2@deflate_rl
$LN36@deflate_rl:

; 2145 :     s->insert = 0;

  0028b	89 bb 08 17 00
	00		 mov	 DWORD PTR [rbx+5896], edi

; 2146 :     if (flush == Z_FINISH) {

  00291	83 fd 04	 cmp	 ebp, 4
  00294	75 50		 jne	 SHORT $LN19@deflate_rl

; 2147 :         FLUSH_BLOCK(s, 1);

  00296	8b 83 84 00 00
	00		 mov	 eax, DWORD PTR [rbx+132]
  0029c	85 c0		 test	 eax, eax
  0029e	78 08		 js	 SHORT $LN28@deflate_rl
  002a0	8b d0		 mov	 edx, eax
  002a2	48 03 53 50	 add	 rdx, QWORD PTR [rbx+80]
  002a6	eb 03		 jmp	 SHORT $LN29@deflate_rl
$LN28@deflate_rl:
  002a8	48 8b d7	 mov	 rdx, rdi
$LN29@deflate_rl:
  002ab	44 8b 83 94 00
	00 00		 mov	 r8d, DWORD PTR [rbx+148]
  002b2	41 b9 01 00 00
	00		 mov	 r9d, 1
  002b8	44 2b c0	 sub	 r8d, eax
  002bb	48 8b cb	 mov	 rcx, rbx
  002be	e8 00 00 00 00	 call	 _tr_flush_block
  002c3	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [rbx+148]
  002c9	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  002cc	89 83 84 00 00
	00		 mov	 DWORD PTR [rbx+132], eax
  002d2	e8 00 00 00 00	 call	 flush_pending
  002d7	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  002da	39 78 18	 cmp	 DWORD PTR [rax+24], edi
  002dd	40 0f 95 c7	 setne	 dil
  002e1	8d 47 02	 lea	 eax, DWORD PTR [rdi+2]

; 2148 :         return finish_done;

  002e4	eb 56		 jmp	 SHORT $LN1@deflate_rl
$LN19@deflate_rl:

; 2149 :     }
; 2150 :     if (s->sym_next)

  002e6	39 bb f4 16 00
	00		 cmp	 DWORD PTR [rbx+5876], edi
  002ec	74 45		 je	 SHORT $LN22@deflate_rl

; 2151 :         FLUSH_BLOCK(s, 0);

  002ee	8b 83 84 00 00
	00		 mov	 eax, DWORD PTR [rbx+132]
  002f4	85 c0		 test	 eax, eax
  002f6	78 06		 js	 SHORT $LN30@deflate_rl
  002f8	8b f8		 mov	 edi, eax
  002fa	48 03 7b 50	 add	 rdi, QWORD PTR [rbx+80]
$LN30@deflate_rl:
  002fe	44 8b 83 94 00
	00 00		 mov	 r8d, DWORD PTR [rbx+148]
  00305	45 33 c9	 xor	 r9d, r9d
  00308	44 2b c0	 sub	 r8d, eax
  0030b	48 8b d7	 mov	 rdx, rdi
  0030e	48 8b cb	 mov	 rcx, rbx
  00311	e8 00 00 00 00	 call	 _tr_flush_block
  00316	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [rbx+148]
  0031c	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  0031f	89 83 84 00 00
	00		 mov	 DWORD PTR [rbx+132], eax
  00325	e8 00 00 00 00	 call	 flush_pending
  0032a	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0032d	83 78 18 00	 cmp	 DWORD PTR [rax+24], 0
  00331	74 07		 je	 SHORT $LN37@deflate_rl
$LN22@deflate_rl:

; 2152 :     return block_done;

  00333	b8 01 00 00 00	 mov	 eax, 1
  00338	eb 02		 jmp	 SHORT $LN1@deflate_rl
$LN37@deflate_rl:

; 2142 :         }
; 2143 :         if (bflush) FLUSH_BLOCK(s, 0);

  0033a	33 c0		 xor	 eax, eax
$LN1@deflate_rl:

; 2153 : }

  0033c	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00341	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00346	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0034b	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  00350	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00354	41 5e		 pop	 r14
  00356	c3		 ret	 0
deflate_rle ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\UserFiles\Github\zlib-win64\deflate.c
;	COMDAT deflate_huff
_TEXT	SEGMENT
s$ = 48
flush$ = 56
deflate_huff PROC					; COMDAT

; 2162 : {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	8b f2		 mov	 esi, edx
  00011	48 8b d9	 mov	 rbx, rcx
  00014	33 ff		 xor	 edi, edi
$LL2@deflate_hu:

; 2163 :     int bflush;             /* set if current block must be flushed */
; 2164 : 
; 2165 :     for (;;) {
; 2166 :         /* Make sure that we have a literal to write. */
; 2167 :         if (s->lookahead == 0) {

  00016	39 bb 9c 00 00
	00		 cmp	 DWORD PTR [rbx+156], edi
  0001c	75 14		 jne	 SHORT $LN6@deflate_hu

; 2168 :             fill_window(s);

  0001e	48 8b cb	 mov	 rcx, rbx
  00021	e8 00 00 00 00	 call	 fill_window

; 2169 :             if (s->lookahead == 0) {

  00026	39 bb 9c 00 00
	00		 cmp	 DWORD PTR [rbx+156], edi
  0002c	0f 84 e3 00 00
	00		 je	 $LN23@deflate_hu
$LN6@deflate_hu:

; 2171 :                     return need_more;
; 2172 :                 break;      /* flush the current block */
; 2173 :             }
; 2174 :         }
; 2175 : 
; 2176 :         /* Output a literal byte */
; 2177 :         s->match_length = 0;
; 2178 :         Tracevv((stderr,"%c", s->window[s->strstart]));
; 2179 :         _tr_tally_lit (s, s->window[s->strstart], bflush);

  00032	8b 8b 94 00 00
	00		 mov	 ecx, DWORD PTR [rbx+148]
  00038	48 8b 43 50	 mov	 rax, QWORD PTR [rbx+80]
  0003c	89 bb 88 00 00
	00		 mov	 DWORD PTR [rbx+136], edi
  00042	44 0f b6 04 01	 movzx	 r8d, BYTE PTR [rcx+rax]
  00047	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  0004d	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  00054	40 88 3c 01	 mov	 BYTE PTR [rcx+rax], dil
  00058	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  0005e	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  00064	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  0006b	40 88 3c 01	 mov	 BYTE PTR [rcx+rax], dil
  0006f	8b 8b f4 16 00
	00		 mov	 ecx, DWORD PTR [rbx+5876]
  00075	ff c1		 inc	 ecx
  00077	89 8b f4 16 00
	00		 mov	 DWORD PTR [rbx+5876], ecx
  0007d	48 8b 83 e8 16
	00 00		 mov	 rax, QWORD PTR [rbx+5864]
  00084	44 88 04 01	 mov	 BYTE PTR [rcx+rax], r8b
  00088	ff 83 f4 16 00
	00		 inc	 DWORD PTR [rbx+5876]
  0008e	66 42 ff 84 83
	bc 00 00 00	 inc	 WORD PTR [rbx+r8*4+188]

; 2180 :         --s->lookahead;
; 2181 :         ++s->strstart;

  00097	44 8b 83 94 00
	00 00		 mov	 r8d, DWORD PTR [rbx+148]
  0009e	ff 8b 9c 00 00
	00		 dec	 DWORD PTR [rbx+156]
  000a4	41 ff c0	 inc	 r8d
  000a7	8b 83 f8 16 00
	00		 mov	 eax, DWORD PTR [rbx+5880]
  000ad	44 89 83 94 00
	00 00		 mov	 DWORD PTR [rbx+148], r8d
  000b4	39 83 f4 16 00
	00		 cmp	 DWORD PTR [rbx+5876], eax

; 2182 :         if (bflush) FLUSH_BLOCK(s, 0);

  000ba	0f 85 56 ff ff
	ff		 jne	 $LL2@deflate_hu
  000c0	8b 83 84 00 00
	00		 mov	 eax, DWORD PTR [rbx+132]
  000c6	85 c0		 test	 eax, eax
  000c8	78 08		 js	 SHORT $LN15@deflate_hu
  000ca	8b d0		 mov	 edx, eax
  000cc	48 03 53 50	 add	 rdx, QWORD PTR [rbx+80]
  000d0	eb 03		 jmp	 SHORT $LN16@deflate_hu
$LN15@deflate_hu:
  000d2	48 8b d7	 mov	 rdx, rdi
$LN16@deflate_hu:
  000d5	44 2b c0	 sub	 r8d, eax
  000d8	45 33 c9	 xor	 r9d, r9d
  000db	48 8b cb	 mov	 rcx, rbx
  000de	e8 00 00 00 00	 call	 _tr_flush_block
  000e3	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [rbx+148]
  000e9	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  000ec	89 83 84 00 00
	00		 mov	 DWORD PTR [rbx+132], eax
  000f2	e8 00 00 00 00	 call	 flush_pending
  000f7	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  000fa	39 78 18	 cmp	 DWORD PTR [rax+24], edi
  000fd	0f 85 13 ff ff
	ff		 jne	 $LL2@deflate_hu
$LN24@deflate_hu:
  00103	33 c0		 xor	 eax, eax

; 2191 :     return block_done;
; 2192 : }

  00105	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0010a	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0010f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00113	5f		 pop	 rdi
  00114	c3		 ret	 0
$LN23@deflate_hu:

; 2170 :                 if (flush == Z_NO_FLUSH)

  00115	85 f6		 test	 esi, esi
  00117	74 ea		 je	 SHORT $LN24@deflate_hu

; 2183 :     }
; 2184 :     s->insert = 0;

  00119	89 bb 08 17 00
	00		 mov	 DWORD PTR [rbx+5896], edi

; 2185 :     if (flush == Z_FINISH) {

  0011f	83 fe 04	 cmp	 esi, 4
  00122	75 5e		 jne	 SHORT $LN10@deflate_hu

; 2186 :         FLUSH_BLOCK(s, 1);

  00124	8b 83 84 00 00
	00		 mov	 eax, DWORD PTR [rbx+132]
  0012a	85 c0		 test	 eax, eax
  0012c	78 08		 js	 SHORT $LN17@deflate_hu
  0012e	8b d0		 mov	 edx, eax
  00130	48 03 53 50	 add	 rdx, QWORD PTR [rbx+80]
  00134	eb 03		 jmp	 SHORT $LN18@deflate_hu
$LN17@deflate_hu:
  00136	48 8b d7	 mov	 rdx, rdi
$LN18@deflate_hu:
  00139	44 8b 83 94 00
	00 00		 mov	 r8d, DWORD PTR [rbx+148]
  00140	41 b9 01 00 00
	00		 mov	 r9d, 1
  00146	44 2b c0	 sub	 r8d, eax
  00149	48 8b cb	 mov	 rcx, rbx
  0014c	e8 00 00 00 00	 call	 _tr_flush_block
  00151	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [rbx+148]
  00157	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  0015a	89 83 84 00 00
	00		 mov	 DWORD PTR [rbx+132], eax
  00160	e8 00 00 00 00	 call	 flush_pending
  00165	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00168	39 78 18	 cmp	 DWORD PTR [rax+24], edi
  0016b	40 0f 95 c7	 setne	 dil
  0016f	8d 47 02	 lea	 eax, DWORD PTR [rdi+2]

; 2191 :     return block_done;
; 2192 : }

  00172	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00177	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0017c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00180	5f		 pop	 rdi
  00181	c3		 ret	 0
$LN10@deflate_hu:

; 2187 :         return finish_done;
; 2188 :     }
; 2189 :     if (s->sym_next)

  00182	39 bb f4 16 00
	00		 cmp	 DWORD PTR [rbx+5876], edi
  00188	74 49		 je	 SHORT $LN13@deflate_hu

; 2190 :         FLUSH_BLOCK(s, 0);

  0018a	8b 83 84 00 00
	00		 mov	 eax, DWORD PTR [rbx+132]
  00190	85 c0		 test	 eax, eax
  00192	78 06		 js	 SHORT $LN19@deflate_hu
  00194	8b f8		 mov	 edi, eax
  00196	48 03 7b 50	 add	 rdi, QWORD PTR [rbx+80]
$LN19@deflate_hu:
  0019a	44 8b 83 94 00
	00 00		 mov	 r8d, DWORD PTR [rbx+148]
  001a1	45 33 c9	 xor	 r9d, r9d
  001a4	44 2b c0	 sub	 r8d, eax
  001a7	48 8b d7	 mov	 rdx, rdi
  001aa	48 8b cb	 mov	 rcx, rbx
  001ad	e8 00 00 00 00	 call	 _tr_flush_block
  001b2	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [rbx+148]
  001b8	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  001bb	89 83 84 00 00
	00		 mov	 DWORD PTR [rbx+132], eax
  001c1	e8 00 00 00 00	 call	 flush_pending
  001c6	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  001c9	83 78 18 00	 cmp	 DWORD PTR [rax+24], 0
  001cd	0f 84 30 ff ff
	ff		 je	 $LN24@deflate_hu
$LN13@deflate_hu:

; 2191 :     return block_done;
; 2192 : }

  001d3	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  001d8	b8 01 00 00 00	 mov	 eax, 1
  001dd	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  001e2	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001e6	5f		 pop	 rdi
  001e7	c3		 ret	 0
deflate_huff ENDP
_TEXT	ENDS
END
